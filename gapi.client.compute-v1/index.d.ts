/* Type definitions for non-npm package Compute Engine API v1 0.0 */
// Project: https://cloud.google.com/compute/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://www.googleapis.com/discovery/v1/apis/compute/v1/rest
// Revision: 20230103

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Compute Engine API v1 */
    function load(urlOrObject: "https://www.googleapis.com/discovery/v1/apis/compute/v1/rest"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "compute", version: "v1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "compute", version: "v1", callback: () => any): void;

    namespace compute {
        interface AcceleratorConfig {
            /** The number of the guest accelerator cards exposed to this instance. */
            acceleratorCount?: number;
            /**
             * Full or partial URL of the accelerator type resource to attach to this instance. For example: projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100 If you are
             * creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
             */
            acceleratorType?: string;
        }
        interface AcceleratorType {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The deprecation status associated with this accelerator type. */
            deprecated?: DeprecationStatus;
            /** [Output Only] An optional textual description of the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types. */
            kind?: string;
            /** [Output Only] Maximum number of accelerator cards allowed per instance. */
            maximumCardsPerInstance?: number;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] Server-defined, fully qualified URL for this resource. */
            selfLink?: string;
            /**
             * [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a
             * field in the request body.
             */
            zone?: string;
        }
        interface AcceleratorTypeAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of AcceleratorTypesScopedList resources. */
            items?: { [P in string]: AcceleratorTypesScopedList };
            /** [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AcceleratorTypeList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of AcceleratorType resources. */
            items?: AcceleratorType[];
            /** [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AcceleratorTypesScopedList {
            /** [Output Only] A list of accelerator types contained in this scope. */
            acceleratorTypes?: AcceleratorType[];
            /** [Output Only] An informational warning that appears when the accelerator types list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AccessConfig {
            /**
             * The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only,
             * an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.
             */
            externalIpv6?: string;
            /** The prefix length of the external IPv6 range. */
            externalIpv6PrefixLength?: number;
            /** [Output Only] Type of the resource. Always compute#accessConfig for access configs. */
            kind?: string;
            /** The name of this access configuration. The default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. */
            name?: string;
            /**
             * An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared
             * ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
             */
            natIP?: string;
            /**
             * This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without
             * a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the
             * networkTier associated with the Address resource owning that IP.
             */
            networkTier?: string;
            /**
             * The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig,
             * a default PTR record will be createc for first IP in associated external IPv6 range.
             */
            publicPtrDomainName?: string;
            /**
             * Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A
             * default PTR record will be created if the VM has external IPv6 range associated.
             */
            setPublicPtr?: boolean;
            /** The type of configuration. The default and only option is ONE_TO_ONE_NAT. */
            type?: string;
        }
        interface Address {
            /** The static IP address represented by this resource. */
            address?: string;
            /** The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL. */
            addressType?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this field when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address
             * reservation.
             */
            ipv6EndpointType?: string;
            /** The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address. */
            ipVersion?: string;
            /** [Output Only] Type of the resource. Always compute#address for addresses. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last
             * character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
             */
            name?: string;
            /** The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose. */
            network?: string;
            /**
             * This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier;
             * global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be
             * PREMIUM.
             */
            networkTier?: string;
            /** The prefix length if the resource represents an IP range. */
            prefixLength?: number;
            /**
             * The purpose of this resource, which can be one of the following values: - GCE_ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar
             * resources. - DNS_RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) -
             * VPC_PEERING for global internal IP addresses used for private services access allocated ranges. - NAT_AUTO for the regional external IP addresses used by Cloud NAT when allocating
             * addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an *HA VPN over
             * Cloud Interconnect* configuration. These addresses are regional resources. - `SHARED_LOADBALANCER_VIP` for an internal IP address that is assigned to multiple internal forwarding
             * rules. - `PRIVATE_SERVICE_CONNECT` for a private network address that is used to configure Private Service Connect. Only global internal addresses can use this purpose.
             */
            purpose?: string;
            /**
             * [Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. *This field is
             * not applicable to global addresses.*
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN_USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED
             * address is currently reserved and available to use. An IN_USE address is currently being used by another resource and is not available.
             */
            status?: string;
            /**
             * The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork's IP range. This field can only be used with INTERNAL type
             * with a GCE_ENDPOINT or DNS_RESOLVER purpose.
             */
            subnetwork?: string;
            /** [Output Only] The URLs of the resources that are using this address. */
            users?: string[];
        }
        interface AddressAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of AddressesScopedList resources. */
            items?: { [P in string]: AddressesScopedList };
            /** [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AddressesScopedList {
            /** [Output Only] A list of addresses contained in this scope. */
            addresses?: Address[];
            /** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AddressList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Address resources. */
            items?: Address[];
            /** [Output Only] Type of resource. Always compute#addressList for lists of addresses. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AdvancedMachineFeatures {
            /** Whether to enable nested virtualization or not (default is false). */
            enableNestedVirtualization?: boolean;
            /** Whether to enable UEFI networking for instance creation. */
            enableUefiNetworking?: boolean;
            /**
             * The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying
             * processor is assumed.
             */
            threadsPerCore?: number;
            /**
             * The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset,
             * the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
             */
            visibleCoreCount?: number;
        }
        interface AliasIpRange {
            /**
             * The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other
             * network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
             */
            ipCidrRange?: string;
            /** The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used. */
            subnetworkRangeName?: string;
        }
        interface AllocationResourceStatus {
            specificSkuAllocation?: AllocationResourceStatusSpecificSKUAllocation;
        }
        interface AllocationResourceStatusSpecificSKUAllocation {
            sourceInstanceTemplateId?: string;
        }
        interface AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {
            /** Specifies the size of the disk in base-2 GB. */
            diskSizeGb?: string;
            /**
             * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD
             * performance.
             */
            interface?: string;
        }
        interface AllocationSpecificSKUAllocationReservedInstanceProperties {
            /** Specifies accelerator type and count. */
            guestAccelerators?: AcceleratorConfig[];
            /** Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd. */
            localSsds?: AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk[];
            /** An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API. */
            locationHint?: string;
            /**
             * Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following
             * custom-NUMBER_OF_CPUS-AMOUNT_OF_MEMORY pattern.
             */
            machineType?: string;
            /** Minimum cpu platform the reservation. */
            minCpuPlatform?: string;
        }
        interface AllocationSpecificSKUReservation {
            /** [Output Only] Indicates how many instances are actually usable currently. */
            assuredCount?: string;
            /** Specifies the number of resources that are allocated. */
            count?: string;
            /** The instance properties for the reservation. */
            instanceProperties?: AllocationSpecificSKUAllocationReservedInstanceProperties;
            /** [Output Only] Indicates how many instances are in use. */
            inUseCount?: string;
            /**
             * Specifies the instance template to create the reservation. If you use this field, you must exclude the instanceProperties field. This field is optional, and it can be a full or
             * partial URL. For example, the following are all valid URLs to an instance template: - https://www.googleapis.com/compute/v1/projects/project
             * /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate - global/instanceTemplates/instanceTemplate
             */
            sourceInstanceTemplate?: string;
        }
        interface AttachedDisk {
            /** [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64. */
            architecture?: string;
            /** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
            autoDelete?: boolean;
            /** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
            boot?: boolean;
            /**
             * Specifies a unique device name of your choice that is reflected into the /dev/disk/by-id/google-* tree of a Linux operating system running within the instance. This name can be used
             * to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form
             * persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
             */
            deviceName?: string;
            /**
             * Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If
             * you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a
             * customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or
             * an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically
             * generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to
             * encrypt disks in a managed instance group.
             */
            diskEncryptionKey?: CustomerEncryptionKey;
            /** The size of the disk in GB. */
            diskSizeGb?: string;
            /**
             * [Input Only] Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive
             * an error.
             */
            forceAttach?: boolean;
            /** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
            guestOsFeatures?: GuestOsFeature[];
            /** [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number. */
            index?: number;
            /**
             * [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to
             * the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
             */
            initializeParams?: AttachedDiskInitializeParams;
            /**
             * Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In
             * certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
             */
            interface?: string;
            /** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
            kind?: string;
            /** [Output Only] Any valid publicly visible licenses. */
            licenses?: string[];
            /** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
            mode?: string;
            /** [Output Only] shielded vm initial state stored on disk */
            shieldedInstanceInitialState?: InitialStateConfig;
            /**
             * Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot
             * or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for
             * persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
             */
            source?: string;
            /** Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT. */
            type?: string;
        }
        interface AttachedDiskInitializeParams {
            /** The architecture of the attached disk. Valid values are arm64 or x86_64. */
            architecture?: string;
            /** An optional description. Provide this property when creating the disk. */
            description?: string;
            /**
             * Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is
             * attached to the new instance and the new disk is not created.
             */
            diskName?: string;
            /**
             * Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the
             * sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
             */
            diskSizeGb?: string;
            /**
             * Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example:
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /diskTypes/pd-standard For a full list of acceptable values, see Persistent disk types. If you specify this field
             * when creating a VM, you can provide either the full or partial URL. For example, the following values are valid: - https://www.googleapis.com/compute/v1/projects/project/zones/zone
             * /diskTypes/diskType - projects/project/zones/zone/diskTypes/diskType - zones/zone/diskTypes/diskType If you specify this field when creating or updating an instance template or
             * all-instances configuration, specify the type of the disk, not the URL. For example: pd-standard.
             */
            diskType?: string;
            /** Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks. */
            labels?: { [P in string]: string };
            /** A list of publicly visible licenses. Reserved for Google's use. */
            licenses?: string[];
            /** Specifies which action to take on instance update with this disk. Default is to use the existing disk. */
            onUpdateAction?: string;
            /**
             * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more
             * details, see the Extreme persistent disk documentation.
             */
            provisionedIops?: string;
            /**
             * Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values
             * are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
             */
            resourceManagerTags?: { [P in string]: string };
            /** Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name. */
            resourcePolicies?: string[];
            /**
             * The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for
             * local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9
             * image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image:
             * projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format:
             * global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with
             * family/family-name: global/images/family/my-image-family If the source image is deleted later, this field will not be set.
             */
            sourceImage?: string;
            /**
             * The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. InstanceTemplate and
             * InstancePropertiesPatch do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with
             * your own keys.
             */
            sourceImageEncryptionKey?: CustomerEncryptionKey;
            /**
             * The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for
             * local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global/snapshots/my-backup If the source snapshot is deleted later,
             * this field will not be set.
             */
            sourceSnapshot?: string;
            /** The customer-supplied encryption key of the source snapshot. */
            sourceSnapshotEncryptionKey?: CustomerEncryptionKey;
        }
        interface AuditConfig {
            /** The configuration for logging of each type of permission. */
            auditLogConfigs?: AuditLogConfig[];
            /** This is deprecated and has no effect. Do not use. */
            exemptedMembers?: string[];
            /**
             * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all
             * services.
             */
            service?: string;
        }
        interface AuditLogConfig {
            /** Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members. */
            exemptedMembers?: string[];
            /** This is deprecated and has no effect. Do not use. */
            ignoreChildExemptions?: boolean;
            /** The log type that this config enables. */
            logType?: string;
        }
        interface AuthorizationLoggingOptions {
            /** This is deprecated and has no effect. Do not use. */
            permissionType?: string;
        }
        interface Autoscaler {
            /**
             * The configuration parameters for the autoscaling algorithm. You can define one or more signals for an autoscaler: cpuUtilization, customMetricUtilizations, and
             * loadBalancingUtilization. If none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.
             */
            autoscalingPolicy?: AutoscalingPolicy;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#autoscaler for autoscalers. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is
             * different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction.
             */
            recommendedSize?: number;
            /** [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope). */
            region?: string;
            /** [Output Only] Status information of existing scaling schedules. */
            scalingScheduleStatus?: { [P in string]: ScalingScheduleStatus };
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn't read new/updated configuration. - DELETING:
             * Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has
             * errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future.
             */
            status?: string;
            /**
             * [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you
             * might encounter.
             */
            statusDetails?: AutoscalerStatusDetails[];
            /** URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler. */
            target?: string;
            /** [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope). */
            zone?: string;
        }
        interface AutoscalerAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of AutoscalersScopedList resources. */
            items?: { [P in string]: AutoscalersScopedList };
            /** [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. end_interface: MixerListResponseWithEtagBuilder */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AutoscalerList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Autoscaler resources. */
            items?: Autoscaler[];
            /** [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AutoscalersScopedList {
            /** [Output Only] A list of autoscalers contained in this scope. */
            autoscalers?: Autoscaler[];
            /** [Output Only] Informational warning which replaces the list of autoscalers when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface AutoscalerStatusDetails {
            /** The status message. */
            message?: string;
            /**
             * The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in
             * RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a
             * size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. -
             * CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to
             * maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any
             * data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but
             * the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change
             * automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the "Autoscale only out" mode. The autoscaler can add instances but not remove
             * any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE
             * (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there
             * is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION
             * (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource
             * stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the
             * values might not be available in all API versions.
             */
            type?: string;
        }
        interface AutoscalingPolicy {
            /**
             * The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the
             * instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary
             * because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
             */
            coolDownPeriodSec?: number;
            /** Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group. */
            cpuUtilization?: AutoscalingPolicyCpuUtilization;
            /** Configuration parameters of autoscaling based on a custom metric. */
            customMetricUtilizations?: AutoscalingPolicyCustomMetricUtilization[];
            /** Configuration parameters of autoscaling based on load balancer. */
            loadBalancingUtilization?: AutoscalingPolicyLoadBalancingUtilization;
            /**
             * The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than
             * minimal number of replicas.
             */
            maxNumReplicas?: number;
            /**
             * The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of
             * instances allowed.
             */
            minNumReplicas?: number;
            /** Defines operating mode for this policy. */
            mode?: string;
            scaleInControl?: AutoscalingPolicyScaleInControl;
            /**
             * Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min_required_replicas of
             * all scaling schedules is applied. Up to 128 scaling schedules are allowed.
             */
            scalingSchedules?: { [P in string]: AutoscalingPolicyScalingSchedule };
        }
        interface AutoscalingPolicyCpuUtilization {
            /**
             * Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet
             * current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead
             * of anticipated demand.
             */
            predictiveMethod?: string;
            /**
             * The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target
             * utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the
             * target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average
             * utilization reaches the target utilization.
             */
            utilizationTarget?: number;
        }
        interface AutoscalingPolicyCustomMetricUtilization {
            /**
             * A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of
             * autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You
             * can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric
             * in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values
             * are expected for the metric. If it is a gce_instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot
             * filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply to the entire autoscaled instance group and
             * resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a *per-group metric* for the purpose of autoscaling. If not
             * specified, the type defaults to gce_instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if
             * you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
             */
            filter?: string;
            /** The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE. */
            metric?: string;
            /**
             * If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of
             * the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to
             * use with the target is for example pubsub.googleapis.com/subscription/num_undelivered_messages or a custom metric exporting the total number of requests coming to your instances. A
             * bad example would be a metric exporting an average or median latency, since this value can't include a chunk assignable to a single instance, it could be better used with
             * utilization_target instead.
             */
            singleInstanceAssignment?: number;
            /**
             * The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or
             * decrease proportionally to the metric. For example, a good metric to use as a utilization_target is https://www.googleapis.com/compute/v1/instance/network/received_bytes_count. The
             * autoscaler works to keep this value constant for each of the instances.
             */
            utilizationTarget?: number;
            /** Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA_PER_SECOND, or DELTA_PER_MINUTE. */
            utilizationTargetType?: string;
        }
        interface AutoscalingPolicyLoadBalancingUtilization {
            /**
             * Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is
             * 0.8.
             */
            utilizationTarget?: number;
        }
        interface AutoscalingPolicyScaleInControl {
            /**
             * Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs
             * can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
             */
            maxScaledInReplicas?: FixedOrPercent;
            /** How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above. */
            timeWindowSec?: number;
        }
        interface AutoscalingPolicyScalingSchedule {
            /** A description of a scaling schedule. */
            description?: string;
            /**
             * A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional,
             * and its value is false by default.
             */
            disabled?: boolean;
            /** The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required. */
            durationSec?: number;
            /** The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required. */
            minRequiredReplicas?: number;
            /**
             * The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The
             * expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This
             * field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving.
             */
            schedule?: string;
            /**
             * The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database. This field is
             * assigned a default value of “UTC” if left empty.
             */
            timeZone?: string;
        }
        interface Backend {
            /**
             * Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends
             * must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note:
             * Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically,
             * Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
             */
            balancingMode?: string;
            /**
             * A multiplier applied to the backend's target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on
             * balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting
             * larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service. Not available with backends that don't
             * support using a balancingMode. This includes backends such as global internet NEGs, regional serverless NEGs, and PSC NEGs.
             */
            capacityScaler?: number;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService. */
            failover?: boolean;
            /**
             * The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the [Backend services
             * overview](https://cloud.google.com/load-balancing/docs/backend-service#backends). You must use the *fully-qualified* URL (starting with https://www.googleapis.com/) to specify the
             * instance group or NEG. Partial URLs are not supported.
             */
            group?: string;
            /**
             * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's
             * balancingMode is RATE.
             */
            maxConnections?: number;
            /**
             * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's
             * balancingMode is RATE.
             */
            maxConnectionsPerEndpoint?: number;
            /**
             * Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend's
             * balancingMode is RATE.
             */
            maxConnectionsPerInstance?: number;
            /**
             * Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's
             * balancingMode is CONNECTION.
             */
            maxRate?: number;
            /**
             * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is
             * CONNECTION.
             */
            maxRatePerEndpoint?: number;
            /**
             * Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend's balancingMode is
             * CONNECTION.
             */
            maxRatePerInstance?: number;
            /** Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode. */
            maxUtilization?: number;
        }
        interface BackendBucket {
            /** Cloud Storage bucket name. */
            bucketName?: string;
            /** Cloud CDN configuration for this BackendBucket. */
            cdnPolicy?: BackendBucketCdnPolicy;
            /** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
            compressionMode?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** Headers that the HTTP/S load balancer should add to proxied responses. */
            customResponseHeaders?: string[];
            /** An optional textual description of the resource; provided by the client when the resource is created. */
            description?: string;
            /** [Output Only] The resource URL for the edge security policy associated with this backend bucket. */
            edgeSecurityPolicy?: string;
            /** If true, enable Cloud CDN for this BackendBucket. */
            enableCdn?: boolean;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** Type of the resource. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface BackendBucketCdnPolicy {
            /**
             * Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all
             * cdnPolicy.cacheMode settings.
             */
            bypassCacheOnRequestHeaders?: BackendBucketCdnPolicyBypassCacheOnRequestHeader[];
            /** The CacheKeyPolicy for this CdnPolicy. */
            cacheKeyPolicy?: BackendBucketCdnPolicyCacheKeyPolicy;
            /**
             * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content.
             * Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing
             * load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result
             * in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and
             * web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
             */
            cacheMode?: string;
            /**
             * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of
             * client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age
             * from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is
             * present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
             */
            clientTtl?: number;
            /**
             * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always
             * revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will
             * overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined
             * TTL.
             */
            defaultTtl?: number;
            /**
             * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more
             * than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be
             * modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache
             * before the defined TTL.
             */
            maxTtl?: number;
            /**
             * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve
             * end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified
             * response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the
             * specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308
             * (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented):
             * 60s. These defaults can be overridden in negative_caching_policy.
             */
            negativeCaching?: boolean;
            /**
             * Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled
             * will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you
             * wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
             */
            negativeCachingPolicy?: BackendBucketCdnPolicyNegativeCachingPolicy[];
            /** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
            requestCoalescing?: boolean;
            /**
             * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the
             * default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default
             * limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value
             * is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
             */
            serveWhileStale?: number;
            /**
             * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to
             * 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]"
             * header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
             */
            signedUrlCacheMaxAgeSec?: string;
            /** [Output Only] Names of the keys for signing request URLs. */
            signedUrlKeyNames?: string[];
        }
        interface BackendBucketCdnPolicyBypassCacheOnRequestHeader {
            /** The header field name to match on when bypassing cache. Values are case-insensitive. */
            headerName?: string;
        }
        interface BackendBucketCdnPolicyCacheKeyPolicy {
            /** Allows HTTP request headers (by name) to be used in the cache key. */
            includeHttpHeaders?: string[];
            /** Names of query string parameters to include in cache keys. Default parameters are always included. '&' and '=' will be percent encoded and not treated as delimiters. */
            queryStringWhitelist?: string[];
        }
        interface BackendBucketCdnPolicyNegativeCachingPolicy {
            /**
             * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify
             * a status code more than once.
             */
            code?: number;
            /**
             * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may
             * be evicted from the cache before the defined TTL.
             */
            ttl?: number;
        }
        interface BackendBucketList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of BackendBucket resources. */
            items?: BackendBucket[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface BackendService {
            /**
             * Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session
             * affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not
             * supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            affinityCookieTtlSec?: number;
            /** The list of backends that serve this BackendService. */
            backends?: Backend[];
            /** Cloud CDN configuration for this BackendService. Only available for specified load balancer types. */
            cdnPolicy?: BackendServiceCdnPolicy;
            circuitBreakers?: CircuitBreakers;
            /** Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header. */
            compressionMode?: string;
            connectionDraining?: ConnectionDraining;
            /** Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP/UDP Load Balancing. */
            connectionTrackingPolicy?: BackendServiceConnectionTrackingPolicy;
            /**
             * Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only
             * for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added/removed from the destination service. This field specifies
             * parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING_HASH. This field is applicable to either: - A regional
             * backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme
             * set to INTERNAL_SELF_MANAGED.
             */
            consistentHash?: ConsistentHashLoadBalancerSettings;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers). */
            customRequestHeaders?: string[];
            /** Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers). */
            customResponseHeaders?: string[];
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The resource URL for the edge security policy associated with this backend service. */
            edgeSecurityPolicy?: string;
            /** If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer. */
            enableCDN?: boolean;
            /**
             * Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: [Internal TCP/UDP Load
             * Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load
             * Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
             */
            failoverPolicy?: BackendServiceFailoverPolicy;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An
             * up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a
             * get() request to retrieve a BackendService.
             */
            fingerprint?: string;
            /**
             * The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support
             * legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG
             * backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
             */
            healthChecks?: string[];
            /** The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP/UDP Load Balancing and Network Load Balancing. */
            iap?: BackendServiceIAP;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#backendService for backend services. */
            kind?: string;
            /** Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer. */
            loadBalancingScheme?: string;
            /**
             * A list of locality load balancing policies to be used in order of preference. Either the policy or the customPolicy field should be set. Overrides any value set in the
             * localityLbPolicy field. localityLbPolicies is only supported when the BackendService is referenced by a URL Map that is referenced by a target gRPC proxy that has the
             * validateForProxyless field set to true.
             */
            localityLbPolicies?: BackendServiceLocalityLoadBalancingPolicyConfig[];
            /**
             * The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in
             * round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH:
             * The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects
             * 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e.,
             * connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop
             * in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about
             * Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
             * load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED. If sessionAffinity is not NONE, and this field
             * is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map
             * that is bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            localityLbPolicy?: string;
            /** This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver. */
            logConfig?: BackendServiceLogConfig;
            /**
             * Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed,
             * including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This
             * value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend
             * service is INTERNAL_SELF_MANAGED.
             */
            maxStreamDuration?: Duration;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL. */
            network?: string;
            /**
             * Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable
             * to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, HTTP2, or GRPC, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service
             * with the load_balancing_scheme set to INTERNAL_SELF_MANAGED.
             */
            outlierDetection?: OutlierDetection;
            /** Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP/UDP Load Balancing and Network Load Balancing, omit port. */
            port?: number;
            /**
             * A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance
             * group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For Internal TCP/UDP Load Balancing and
             * Network Load Balancing, omit port_name.
             */
            portName?: string;
            /**
             * The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic
             * Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by
             * a URL map that is bound to target gRPC proxy.
             */
            protocol?: string;
            /**
             * [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP
             * request URL. It is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] The resource URL for the security policy associated with this backend service. */
            securityPolicy?: string;
            /**
             * This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load_balancing_scheme set to
             * INTERNAL_SELF_MANAGED.
             */
            securitySettings?: SecuritySettings;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty. */
            serviceBindings?: string[];
            /**
             * Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy
             * that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).
             */
            sessionAffinity?: string;
            subsetting?: Subsetting;
            /**
             * The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full
             * range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend
             * service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use
             * maxStreamDuration.
             */
            timeoutSec?: number;
        }
        interface BackendServiceAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of BackendServicesScopedList resources. */
            items?: { [P in string]: BackendServicesScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface BackendServiceCdnPolicy {
            /**
             * Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all
             * cdnPolicy.cacheMode settings.
             */
            bypassCacheOnRequestHeaders?: BackendServiceCdnPolicyBypassCacheOnRequestHeader[];
            /** The CacheKeyPolicy for this CdnPolicy. */
            cacheKeyPolicy?: CacheKeyPolicy;
            /**
             * Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content.
             * Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing
             * load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any "private", "no-store" or "no-cache" directives in Cache-Control response headers. Warning: this may result
             * in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and
             * web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
             */
            cacheMode?: string;
            /**
             * Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of
             * client_ttl and default_ttl is used for the response max-age directive, along with a "public" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age
             * from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a "public" cache-control directive is
             * present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
             */
            clientTtl?: number;
            /**
             * Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of "0" means "always
             * revalidate". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will
             * overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined
             * TTL.
             */
            defaultTtl?: number;
            /**
             * Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more
             * than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be
             * modified. Setting a TTL of "0" means "always revalidate". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache
             * before the defined TTL.
             */
            maxTtl?: number;
            /**
             * Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve
             * end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified
             * response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the
             * specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308
             * (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented):
             * 60s. These defaults can be overridden in negative_caching_policy.
             */
            negativeCaching?: boolean;
            /**
             * Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled
             * will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you
             * wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
             */
            negativeCachingPolicy?: BackendServiceCdnPolicyNegativeCachingPolicy[];
            /** If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin. */
            requestCoalescing?: boolean;
            /**
             * Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the
             * default "max-stale" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default
             * limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value
             * is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
             */
            serveWhileStale?: number;
            /**
             * Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to
             * 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a "Cache-Control: public, max-age=[TTL]"
             * header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
             */
            signedUrlCacheMaxAgeSec?: string;
            /** [Output Only] Names of the keys for signing request URLs. */
            signedUrlKeyNames?: string[];
        }
        interface BackendServiceCdnPolicyBypassCacheOnRequestHeader {
            /** The header field name to match on when bypassing cache. Values are case-insensitive. */
            headerName?: string;
        }
        interface BackendServiceCdnPolicyNegativeCachingPolicy {
            /**
             * The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify
             * a status code more than once.
             */
            code?: number;
            /**
             * The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may
             * be evicted from the cache before the defined TTL.
             */
            ttl?: number;
        }
        interface BackendServiceConnectionTrackingPolicy {
            /**
             * Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on
             * unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is
             * configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never
             * persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections
             * always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see
             * [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection
             * Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).
             */
            connectionPersistenceOnUnhealthyBackends?: string;
            /** Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly. */
            enableStrongAffinity?: boolean;
            /**
             * Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For Internal TCP/UDP Load Balancing: - The minimum (default) is 10 minutes
             * and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and
             * Tracking Mode is PER_SESSION). For Network Load Balancer the default is 60 seconds. This option is not available publicly.
             */
            idleTimeoutSec?: number;
            /**
             * Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key
             * (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session
             * Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and
             * [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode).
             */
            trackingMode?: string;
        }
        interface BackendServiceFailoverPolicy {
            /** This can be set to true only if the protocol is TCP. The default is false. */
            disableConnectionDrainOnFailover?: boolean;
            /**
             * If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary
             * VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal TCP/UDP Load
             * Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load
             * Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false.
             */
            dropTrafficIfUnhealthy?: boolean;
            /**
             * The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other
             * values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal
             * TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load
             * Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview).
             */
            failoverRatio?: number;
        }
        interface BackendServiceGroupHealth {
            /** Metadata defined as annotations on the network endpoint group. */
            annotations?: { [P in string]: string };
            /** Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks. */
            healthStatus?: HealthStatus[];
            /** [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services. */
            kind?: string;
        }
        interface BackendServiceIAP {
            /** Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty. */
            enabled?: boolean;
            /** OAuth2 client ID to use for the authentication flow. */
            oauth2ClientId?: string;
            /**
             * OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the
             * oauth2ClientSecretSha256 field. @InputOnly
             */
            oauth2ClientSecret?: string;
            /** [Output Only] SHA256 hash value for the field oauth2_client_secret above. */
            oauth2ClientSecretSha256?: string;
        }
        interface BackendServiceList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of BackendService resources. */
            items?: BackendService[];
            /** [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface BackendServiceLocalityLoadBalancingPolicyConfig {
            customPolicy?: BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy;
            policy?: BackendServiceLocalityLoadBalancingPolicyConfigPolicy;
        }
        interface BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {
            /** An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation. */
            data?: string;
            /**
             * Identifies the custom policy. The value should match the type the custom implementation is registered with on the gRPC clients. It should follow protocol buffer message naming
             * conventions and include the full path (e.g. myorg.CustomLbPolicy). The maximum length is 256 characters. Note that specifying the same custom policy more than once for a backend is
             * not a valid configuration and will be rejected.
             */
            name?: string;
        }
        interface BackendServiceLocalityLoadBalancingPolicyConfigPolicy {
            /**
             * The name of a locality load balancer policy to be used. The value should be one of the predefined ones as supported by localityLbPolicy, although at the moment only ROUND_ROBIN is
             * supported. This field should only be populated when the customPolicy field is not used. Note that specifying the same policy more than once for a backend is not a valid
             * configuration and will be rejected.
             */
            name?: string;
        }
        interface BackendServiceLogConfig {
            /** Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false. */
            enable?: boolean;
            /**
             * This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load
             * balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
             */
            sampleRate?: number;
        }
        interface BackendServiceReference {
            backendService?: string;
        }
        interface BackendServicesScopedList {
            /** A list of BackendServices contained in this scope. */
            backendServices?: BackendService[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface BfdPacket {
            /** The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            authenticationPresent?: boolean;
            /** The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            controlPlaneIndependent?: boolean;
            /** The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            demand?: boolean;
            /**
             * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed,
             * for example. These diagnostic codes are specified in section 4.1 of RFC5880
             */
            diagnostic?: string;
            /** The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            final?: boolean;
            /** The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880 */
            length?: number;
            /** The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880 */
            minEchoRxIntervalMs?: number;
            /** The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880 */
            minRxIntervalMs?: number;
            /** The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880 */
            minTxIntervalMs?: number;
            /** The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880 */
            multiplier?: number;
            /** The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            multipoint?: boolean;
            /** The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880 */
            myDiscriminator?: number;
            /** The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880 */
            poll?: boolean;
            /** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
            state?: string;
            /** The version number of the BFD protocol, as specified in section 4.1 of RFC5880. */
            version?: number;
            /** The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880 */
            yourDiscriminator?: number;
        }
        interface BfdStatus {
            /**
             * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will
             * wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
             */
            bfdSessionInitializationMode?: string;
            /** Unix timestamp of the most recent config update. */
            configUpdateTimestampMicros?: string;
            /** Control packet counts for the current BFD session. */
            controlPacketCounts?: BfdStatusPacketCounts;
            /** Inter-packet time interval statistics for control packets. */
            controlPacketIntervals?: PacketIntervals[];
            /**
             * The diagnostic code specifies the local system's reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed,
             * for example. These diagnostic codes are specified in section 4.1 of RFC5880
             */
            localDiagnostic?: string;
            /** The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880 */
            localState?: string;
            /** Negotiated transmit interval for control packets. */
            negotiatedLocalControlTxIntervalMs?: number;
            /** The most recent Rx control packet for this BFD session. */
            rxPacket?: BfdPacket;
            /** The most recent Tx control packet for this BFD session. */
            txPacket?: BfdPacket;
            /** Session uptime in milliseconds. Value will be 0 if session is not up. */
            uptimeMs?: string;
        }
        interface BfdStatusPacketCounts {
            /** Number of packets received since the beginning of the current BFD session. */
            numRx?: number;
            /** Number of packets received that were rejected because of errors since the beginning of the current BFD session. */
            numRxRejected?: number;
            /** Number of packets received that were successfully processed since the beginning of the current BFD session. */
            numRxSuccessful?: number;
            /** Number of packets transmitted since the beginning of the current BFD session. */
            numTx?: number;
        }
        interface Binding {
            /** This is deprecated and has no effect. Do not use. */
            bindingId?: string;
            /**
             * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`,
             * then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which
             * resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            condition?: Expr;
            /**
             * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on
             * the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service
             * account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific
             * Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example,
             * `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service
             * account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
             * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to
             * `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing
             * a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value
             * reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to
             * `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For
             * example, `google.com` or `example.com`.
             */
            members?: string[];
            /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
            role?: string;
        }
        interface BulkInsertInstanceResource {
            /** The maximum number of instances to create. */
            count?: string;
            /** The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided. */
            instanceProperties?: InstanceProperties;
            /** Policy for chosing target zone. For more information, see Create VMs in bulk . */
            locationPolicy?: LocationPolicy;
            /**
             * The minimum number of instances to create. If no min_count is specified then count is used as the default value. If min_count instances cannot be created, then no instances will be
             * created and instances already created will be deleted.
             */
            minCount?: string;
            /**
             * The string pattern used for the names of the VMs. Either name_pattern or per_instance_properties must be set. The pattern must contain one continuous sequence of placeholder hash
             * characters (#) with each character corresponding to one digit of the generated instance name. Example: a name_pattern of inst-#### generates instance names such as inst-0001 and
             * inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For
             * example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can
             * contain up to 18 characters.
             */
            namePattern?: string;
            /** Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used. */
            perInstanceProperties?: { [P in string]: BulkInsertInstanceResourcePerInstanceProperties };
            /**
             * Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance
             * template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance
             * template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate -
             * global/instanceTemplates/instanceTemplate This field is optional.
             */
            sourceInstanceTemplate?: string;
        }
        interface BulkInsertInstanceResourcePerInstanceProperties {
            /** This field is only temporary. It will be removed. Do not use it. */
            name?: string;
        }
        interface CacheInvalidationRule {
            /** If set, this invalidation rule will only apply to requests with a Host header matching host. */
            host?: string;
            path?: string;
        }
        interface CacheKeyPolicy {
            /** If true, requests to different hosts will be cached separately. */
            includeHost?: boolean;
            /** Allows HTTP request headers (by name) to be used in the cache key. */
            includeHttpHeaders?: string[];
            /** Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates. */
            includeNamedCookies?: string[];
            /** If true, http and https requests will be cached separately. */
            includeProtocol?: boolean;
            /**
             * If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be
             * included. If false, the query string will be excluded from the cache key entirely.
             */
            includeQueryString?: boolean;
            /**
             * Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and
             * '=' will be percent encoded and not treated as delimiters.
             */
            queryStringBlacklist?: string[];
            /**
             * Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and
             * '=' will be percent encoded and not treated as delimiters.
             */
            queryStringWhitelist?: string[];
        }
        interface CircuitBreakers {
            /**
             * The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to
             * target gRPC proxy that has validateForProxyless field set to true.
             */
            maxConnections?: number;
            /**
             * The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is
             * bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            maxPendingRequests?: number;
            /** The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit. */
            maxRequests?: number;
            /**
             * Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit.
             * Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has
             * validateForProxyless field set to true.
             */
            maxRequestsPerConnection?: number;
            /**
             * The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is
             * bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            maxRetries?: number;
        }
        interface Commitment {
            /**
             * Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at
             * 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
             */
            autoRenew?: boolean;
            /**
             * The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies
             * commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
             */
            category?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] Commitment end time in RFC3339 text format. */
            endTimestamp?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#commitment for commitments. */
            kind?: string;
            /** The license specification required as part of a license commitment. */
            licenseResource?: LicenseResourceCommitment;
            /** List of source commitments to be merged into a new commitment. */
            mergeSourceCommitments?: string[];
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE_MONTH (1 year), and THIRTY_SIX_MONTH (3 years). */
            plan?: string;
            /** [Output Only] URL of the region where this commitment may be used. */
            region?: string;
            /** List of reservations in this commitment. */
            reservations?: Reservation[];
            /** A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together. */
            resources?: ResourceCommitment[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Source commitment to be splitted into a new commitment. */
            splitSourceCommitment?: string;
            /** [Output Only] Commitment start time in RFC3339 text format. */
            startTimestamp?: string;
            /** [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT_YET_ACTIVE, ACTIVE, EXPIRED. */
            status?: string;
            /** [Output Only] An optional, human-readable explanation of the status. */
            statusMessage?: string;
            /**
             * The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY_OPTIMIZED specifies a commitment that will only apply to memory optimized machines.
             * Type ACCELERATOR_OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
             */
            type?: string;
        }
        interface CommitmentAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of CommitmentsScopedList resources. */
            items?: { [P in string]: CommitmentsScopedList };
            /** [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface CommitmentList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Commitment resources. */
            items?: Commitment[];
            /** [Output Only] Type of resource. Always compute#commitmentList for lists of commitments. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface CommitmentsScopedList {
            /** [Output Only] A list of commitments contained in this scope. */
            commitments?: Commitment[];
            /** [Output Only] Informational warning which replaces the list of commitments when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface Condition {
            /** This is deprecated and has no effect. Do not use. */
            iam?: string;
            /** This is deprecated and has no effect. Do not use. */
            op?: string;
            /** This is deprecated and has no effect. Do not use. */
            svc?: string;
            /** This is deprecated and has no effect. Do not use. */
            sys?: string;
            /** This is deprecated and has no effect. Do not use. */
            values?: string[];
        }
        interface ConfidentialInstanceConfig {
            /** Defines whether the instance should have confidential compute enabled. */
            enableConfidentialCompute?: boolean;
        }
        interface ConnectionDraining {
            /** Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining. */
            drainingTimeoutSec?: number;
        }
        interface ConsistentHashLoadBalancerSettings {
            /**
             * Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be
             * generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC
             * proxy that has validateForProxyless field set to true.
             */
            httpCookie?: ConsistentHashLoadBalancerSettingsHttpCookie;
            /** The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD. */
            httpHeaderName?: string;
            /**
             * The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load
             * balancing pool is larger than the ring size, each host will be assigned a single virtual node.
             */
            minimumRingSize?: string;
        }
        interface ConsistentHashLoadBalancerSettingsHttpCookie {
            /** Name of the cookie. */
            name?: string;
            /** Path to set for the cookie. */
            path?: string;
            /** Lifetime of the cookie. */
            ttl?: Duration;
        }
        interface CorsPolicy {
            /**
             * In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the
             * Access-Control-Allow-Credentials header. Default is false.
             */
            allowCredentials?: boolean;
            /** Specifies the content for the Access-Control-Allow-Headers header. */
            allowHeaders?: string[];
            /** Specifies the content for the Access-Control-Allow-Methods header. */
            allowMethods?: string[];
            /**
             * Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item
             * in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
             */
            allowOriginRegexes?: string[];
            /** Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. */
            allowOrigins?: string[];
            /** If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect. */
            disabled?: boolean;
            /** Specifies the content for the Access-Control-Expose-Headers header. */
            exposeHeaders?: string[];
            /** Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header. */
            maxAge?: number;
        }
        interface CustomerEncryptionKey {
            /** The name of the encryption key that is stored in Google Cloud KMS. For example: "kmsKeyName": "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key */
            kmsKeyName?: string;
            /**
             * The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: "kmsKeyServiceAccount":
             * "name@project_id.iam.gserviceaccount.com/
             */
            kmsKeyServiceAccount?: string;
            /**
             * Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the
             * rsaEncryptedKey. For example: "rawKey": "SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0="
             */
            rawKey?: string;
            /**
             * Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the
             * rsaEncryptedKey. For example: "rsaEncryptedKey": "ieCx/NcW06PcT7Ep1X6LUTc/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH
             * z0mBibXUInrC/jEk014kCK/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==" The key must meet the following
             * requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be
             * encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https://cloud-certs.storage.googleapis.com/google-cloud-csek-ingress.pem
             */
            rsaEncryptedKey?: string;
            /** [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource. */
            sha256?: string;
        }
        interface CustomerEncryptionKeyProtectedDisk {
            /** Decrypts data associated with the disk with a customer-supplied encryption key. */
            diskEncryptionKey?: CustomerEncryptionKey;
            /**
             * Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. For example: "source":
             * "/compute/v1/projects/project_id/zones/zone/disks/ disk_name
             */
            source?: string;
        }
        interface DeprecationStatus {
            /**
             * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the
             * client explicitly changes it.
             */
            deleted?: string;
            /**
             * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the
             * client explicitly changes it.
             */
            deprecated?: string;
            /**
             * An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the
             * client explicitly changes it.
             */
            obsolete?: string;
            /** The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource. */
            replacement?: string;
            /**
             * The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE.
             * Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement.
             * Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
             */
            state?: string;
        }
        interface Disk {
            /** The architecture of the disk. Valid values are ARM64 or X86_64. */
            architecture?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Encrypts the disk using a customer-supplied encryption key or a customer-managed encryption key. Encryption keys do not protect access to metadata of the disk. After you encrypt a
             * disk with a customer-supplied key, you must provide the same key if you use the disk later. For example, to create a disk snapshot, to create a disk image, to create a machine
             * image, or to attach the disk to a virtual machine. After you encrypt a disk with a customer-managed key, the diskEncryptionKey.kmsKeyName is set to a key *version* name once the
             * disk is created. The disk is encrypted with this version of the key. In the response, diskEncryptionKey.kmsKeyName appears in the following format: "diskEncryptionKey.kmsKeyName":
             * "projects/kms_project_id/locations/region/keyRings/ key_region/cryptoKeys/key /cryptoKeysVersions/version If you do not provide an encryption key when creating the disk, then the
             * disk is encrypted using an automatically generated key and you don't need to provide a key to use the disk later.
             */
            diskEncryptionKey?: CustomerEncryptionKey;
            /** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
            guestOsFeatures?: GuestOsFeature[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#disk for disks. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request
             * will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk.
             */
            labelFingerprint?: string;
            /** Labels to apply to this disk. These can be later modified by the setLabels method. */
            labels?: { [P in string]: string };
            /** [Output Only] Last attach timestamp in RFC3339 text format. */
            lastAttachTimestamp?: string;
            /** [Output Only] Last detach timestamp in RFC3339 text format. */
            lastDetachTimestamp?: string;
            /** Integer license codes indicating which licenses are attached to this disk. */
            licenseCodes?: string[];
            /** A list of publicly visible licenses. Reserved for Google's use. */
            licenses?: string[];
            /** An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API. */
            locationHint?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** Internal use only. */
            options?: string;
            /** Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload. */
            params?: DiskParams;
            /**
             * Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the
             * future. If an unsupported value is requested, the error message will list the supported values for the caller's project.
             */
            physicalBlockSizeBytes?: string;
            /**
             * Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more
             * details, see the Extreme persistent disk documentation.
             */
            provisionedIops?: string;
            /**
             * [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a
             * field in the request body.
             */
            region?: string;
            /** URLs of the zones where the disk should be replicated to. Only applicable for regional resources. */
            replicaZones?: string[];
            /** Resource policies applied to this disk for automatic snapshot creations. */
            resourcePolicies?: string[];
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined fully-qualified URL for this resource. */
            selfLink?: string;
            /**
             * Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone
             * to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to
             * 65536, inclusive.
             */
            sizeGb?: string;
            /**
             * The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk -
             * projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
             */
            sourceDisk?: string;
            /**
             * [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the
             * persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
             */
            sourceDiskId?: string;
            /**
             * The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the
             * image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific
             * version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image
             * name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family.
             * Replace the image name with family/family-name: global/images/family/my-image-family
             */
            sourceImage?: string;
            /** The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. */
            sourceImageEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the
             * persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
             */
            sourceImageId?: string;
            /**
             * The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: -
             * https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot
             */
            sourceSnapshot?: string;
            /** The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key. */
            sourceSnapshotEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you
             * created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that
             * was used.
             */
            sourceSnapshotId?: string;
            /**
             * The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in
             * vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks
             * from a source storage object, use gcloud compute images import instead.
             */
            sourceStorageObject?: string;
            /**
             * [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is
             * ready for use. - DELETING: Disk is deleting.
             */
            status?: string;
            /**
             * URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd .
             * See Persistent disk types.
             */
            type?: string;
            /** [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance */
            users?: string[];
            /** [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            zone?: string;
        }
        interface DiskAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of DisksScopedList resources. */
            items?: { [P in string]: DisksScopedList };
            /** [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DiskInstantiationConfig {
            /** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
            autoDelete?: boolean;
            /** The custom source image to be used to restore this disk when instantiating this instance template. */
            customImage?: string;
            /** Specifies the device name of the disk to which the configurations apply to. */
            deviceName?: string;
            /**
             * Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance's corresponding
             * disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance's corresponding
             * disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional
             * read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional
             * read-write disks, local SSDs, and read-only disks.
             */
            instantiateFrom?: string;
        }
        interface DiskList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Disk resources. */
            items?: Disk[];
            /** [Output Only] Type of resource. Always compute#diskList for lists of disks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DiskMoveRequest {
            /**
             * The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone
             */
            destinationZone?: string;
            /**
             * The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
             */
            targetDisk?: string;
        }
        interface DiskParams {
            /**
             * Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and values
             * are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
             */
            resourceManagerTags?: { [P in string]: string };
        }
        interface DisksAddResourcePoliciesRequest {
            /** Full or relative path to the resource policy to be added to this disk. You can only specify one resource policy. */
            resourcePolicies?: string[];
        }
        interface DisksRemoveResourcePoliciesRequest {
            /** Resource policies to be removed from this disk. */
            resourcePolicies?: string[];
        }
        interface DisksResizeRequest {
            /** The new size of the persistent disk, which is specified in GB. */
            sizeGb?: string;
        }
        interface DisksScopedList {
            /** [Output Only] A list of disks contained in this scope. */
            disks?: Disk[];
            /** [Output Only] Informational warning which replaces the list of disks when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DiskType {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] Server-defined default disk size in GB. */
            defaultDiskSizeGb?: string;
            /** [Output Only] The deprecation status associated with this disk type. */
            deprecated?: DeprecationStatus;
            /** [Output Only] An optional description of this resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#diskType for disk types. */
            kind?: string;
            /** [Output Only] Name of the resource. */
            name?: string;
            /**
             * [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable
             * as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] An optional textual description of the valid disk size, such as "10GB-10TB". */
            validDiskSize?: string;
            /** [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            zone?: string;
        }
        interface DiskTypeAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of DiskTypesScopedList resources. */
            items?: { [P in string]: DiskTypesScopedList };
            /** [Output Only] Type of resource. Always compute#diskTypeAggregatedList. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DiskTypeList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of DiskType resources. */
            items?: DiskType[];
            /** [Output Only] Type of resource. Always compute#diskTypeList for disk types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DiskTypesScopedList {
            /** [Output Only] A list of disk types contained in this scope. */
            diskTypes?: DiskType[];
            /** [Output Only] Informational warning which replaces the list of disk types when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface DisplayDevice {
            /** Defines whether the instance has Display enabled. */
            enableDisplay?: boolean;
        }
        interface DistributionPolicy {
            /** The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType). */
            targetShape?: string;
            /** Zones where the regional managed instance group will create and manage its instances. */
            zones?: DistributionPolicyZoneConfiguration[];
        }
        interface DistributionPolicyZoneConfiguration {
            /** The URL of the zone. The zone must exist in the region where the managed instance group is located. */
            zone?: string;
        }
        interface Duration {
            /**
             * Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be
             * from 0 to 999,999,999 inclusive.
             */
            nanos?: number;
            /**
             * Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year *
             * 10000 years
             */
            seconds?: string;
        }
        interface ErrorInfo {
            /**
             * The logical grouping to which the "reason" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example:
             * "pubsub.googleapis.com". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API
             * infrastructure, the error domain is "googleapis.com".
             */
            domain?: string;
            /**
             * Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit,
             * the units should be contained in the key, not the value. For example, rather than {"instanceLimit": "100/request"}, should be returned as, {"instanceLimitPerRequest": "100"}, if the
             * client exceeds the number of instances that can be created in a single (batch) request.
             */
            metadatas?: { [P in string]: string };
            /**
             * The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at
             * most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
             */
            reason?: string;
        }
        interface ExchangedPeeringRoute {
            /** The destination range of the route. */
            destRange?: string;
            /**
             * True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and
             * networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict.
             */
            imported?: boolean;
            /** The region of peering route next hop, only applies to dynamic routes. */
            nextHopRegion?: string;
            /** The priority of the peering route. */
            priority?: number;
            /** The type of the peering route. */
            type?: string;
        }
        interface ExchangedPeeringRoutesList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ExchangedPeeringRoute resources. */
            items?: ExchangedPeeringRoute[];
            /** [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface Expr {
            /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
            description?: string;
            /** Textual representation of an expression in Common Expression Language syntax. */
            expression?: string;
            /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
            location?: string;
            /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
            title?: string;
        }
        interface ExternalVpnGateway {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * A list of interfaces for this external VPN gateway. If your peer-side gateway is an on-premises gateway and non-AWS cloud providers' gateway, at most two interfaces can be provided
             * for an external VPN gateway. If your peer side is an AWS virtual private gateway, four interfaces should be provided for an external VPN gateway.
             */
            interfaces?: ExternalVpnGatewayInterface[];
            /** [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially
             * generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels,
             * otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway.
             */
            labelFingerprint?: string;
            /** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
            labels?: { [P in string]: string };
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** Indicates the user-supplied redundancy type of this external VPN gateway. */
            redundancyType?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface ExternalVpnGatewayInterface {
            /**
             * The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE_IP_INTERNALLY_REDUNDANT - 0 -
             * TWO_IPS_REDUNDANCY - 0, 1 - FOUR_IPS_REDUNDANCY - 0, 1, 2, 3
             */
            id?: number;
            /**
             * IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider's VPN gateway,
             * it cannot be an IP address from Google Compute Engine.
             */
            ipAddress?: string;
        }
        interface ExternalVpnGatewayList {
            etag?: string;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ExternalVpnGateway resources. */
            items?: ExternalVpnGateway[];
            /** [Output Only] Type of resource. Always compute#externalVpnGatewayList for lists of externalVpnGateways. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface FileContentBuffer {
            /** The raw content in the secure keys file. */
            content?: string;
            /** The file type of source file. */
            fileType?: string;
        }
        interface Firewall {
            /** The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection. */
            allowed?: Array<{
                /**
                 * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol
                 * strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
                 */
                IPProtocol?: string;
                /**
                 * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not
                 * specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
                 */
                ports?: string[];
            }>;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection. */
            denied?: Array<{
                /**
                 * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol
                 * strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
                 */
                IPProtocol?: string;
                /**
                 * An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not
                 * specified, this rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
                 */
                ports?: string[];
            }>;
            /** An optional description of this resource. Provide this field when you create the resource. */
            description?: string;
            /**
             * If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Both
             * IPv4 and IPv6 are supported.
             */
            destinationRanges?: string[];
            /** Direction of traffic to which this firewall applies, either `INGRESS` or `EGRESS`. The default is `INGRESS`. For `EGRESS` traffic, you cannot specify the sourceTags fields. */
            direction?: string;
            /**
             * Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the
             * firewall rule will be enabled.
             */
            disabled?: boolean;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#firewall for firewall rules. */
            kind?: string;
            /** This field denotes the logging options for a particular firewall rule. If logging is enabled, logs will be exported to Cloud Logging. */
            logConfig?: FirewallLogConfig;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last
             * character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
             */
            name?: string;
            /**
             * URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global/networks/default If you choose to specify
             * this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs: -
             * https://www.googleapis.com/compute/v1/projects/myproject/global/networks/my-network - projects/myproject/global/networks/my-network - global/networks/default
             */
            network?: string;
            /**
             * Priority for this rule. This is an integer between `0` and `65535`, both inclusive. The default value is `1000`. Relative priorities determine which rule takes effect if multiple
             * rules apply. Lower values indicate higher priority. For example, a rule with priority `0` has higher precedence than a rule with priority `1`. DENY rules take precedence over ALLOW
             * rules if they have equal priority. Note that VPC networks have implied rules with a priority of `65535`. To avoid conflicts with the implied rules, use a priority number less than
             * `65535`.
             */
            priority?: number;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of
             * sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a
             * matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Both IPv4 and IPv6 are supported.
             */
            sourceRanges?: string[];
            /**
             * If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot
             * be used to control traffic to an instance's external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time
             * as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with
             * service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as
             * sourceTags or targetTags.
             */
            sourceServiceAccounts?: string[];
            /**
             * If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the
             * same VPC network. Source tags cannot be used to control traffic to an instance's external IP address, it only applies to traffic between instances in the same virtual network.
             * Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has
             * a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the
             * firewall to apply.
             */
            sourceTags?: string[];
            /**
             * A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at
             * the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.
             */
            targetServiceAccounts?: string[];
            /**
             * A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have
             * one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network.
             */
            targetTags?: string[];
        }
        interface FirewallList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Firewall resources. */
            items?: Firewall[];
            /** [Output Only] Type of resource. Always compute#firewallList for lists of firewalls. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface FirewallLogConfig {
            /** This field denotes whether to enable logging for a particular firewall rule. */
            enable?: boolean;
            /** This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs. */
            metadata?: string;
        }
        interface FirewallPoliciesListAssociationsResponse {
            /** A list of associations. */
            associations?: FirewallPolicyAssociation[];
            /** [Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations. */
            kind?: string;
        }
        interface FirewallPolicy {
            /** A list of associations that belong to this firewall policy. */
            associations?: FirewallPolicyAssociation[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Deprecated, please use short name instead. User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is
             * created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with
             * RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase
             * letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            displayName?: string;
            /**
             * Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the firewall policy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies */
            kind?: string;
            /** Name of the resource. For Organization Firewall Policies it's a [Output Only] numeric ID allocated by Google Cloud which uniquely identifies the Organization Firewall Policy. */
            name?: string;
            /** [Output Only] The parent of the firewall policy. This field is not applicable to network firewall policies. */
            parent?: string;
            /**
             * [Output Only] URL of the region where the regional firewall policy resides. This field is not applicable to global firewall policies. You must specify this field as part of the HTTP
             * request URL. It is not settable as a field in the request body.
             */
            region?: string;
            /**
             * A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a firewall
             * policy, a default rule with action "allow" will be added.
             */
            rules?: FirewallPolicyRule[];
            /** [Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples. */
            ruleTupleCount?: number;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Server-defined URL for this resource with the resource id. */
            selfLinkWithId?: string;
            /**
             * User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to
             * network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
             * 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            shortName?: string;
        }
        interface FirewallPolicyAssociation {
            /** The target that the firewall policy is attached to. */
            attachmentTarget?: string;
            /** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy of the association. */
            displayName?: string;
            /** [Output Only] The firewall policy ID of the association. */
            firewallPolicyId?: string;
            /** The name for an association. */
            name?: string;
            /** [Output Only] The short name of the firewall policy of the association. */
            shortName?: string;
        }
        interface FirewallPolicyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of FirewallPolicy resources. */
            items?: FirewallPolicy[];
            /** [Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface FirewallPolicyRule {
            /** The Action to perform when the client connection triggers the rule. Valid actions are "allow", "deny" and "goto_next". */
            action?: string;
            /** An optional description for this resource. */
            description?: string;
            /** The direction in which this rule applies. */
            direction?: string;
            /**
             * Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified,
             * the firewall policy rule will be enabled.
             */
            disabled?: boolean;
            /**
             * Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to
             * BigQuery or Pub/Sub. Note: you cannot enable logging on "goto_next" rules.
             */
            enableLogging?: boolean;
            /** [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules */
            kind?: string;
            /** A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced. */
            match?: FirewallPolicyRuleMatcher;
            /**
             * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0
             * is the highest priority and 2147483647 is the lowest prority.
             */
            priority?: number;
            /** An optional name for the rule. This field is not a unique identifier and can be updated. */
            ruleName?: string;
            /** [Output Only] Calculation of the complexity of a single firewall policy rule. */
            ruleTupleCount?: number;
            /**
             * A list of network resource URLs to which this rule applies. This field allows you to control which network's VMs get this rule. If this field is left blank, all VMs within the
             * organization will receive the rule.
             */
            targetResources?: string[];
            /**
             * A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC
             * network that have one of those EFFECTIVE secure tags, if all the target_secure_tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the
             * same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum
             * number of target label tags allowed is 256.
             */
            targetSecureTags?: FirewallPolicyRuleSecureTag[];
            /** A list of service accounts indicating the sets of instances that are applied with this rule. */
            targetServiceAccounts?: string[];
        }
        interface FirewallPolicyRuleMatcher {
            /** CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000. */
            destIpRanges?: string[];
            /** Pairs of IP protocols and ports that the rule should match. */
            layer4Configs?: FirewallPolicyRuleMatcherLayer4Config[];
            /** CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000. */
            srcIpRanges?: string[];
            /**
             * List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule
             * will be ignored. Maximum number of source tag values allowed is 256.
             */
            srcSecureTags?: FirewallPolicyRuleSecureTag[];
        }
        interface FirewallPolicyRuleMatcherLayer4Config {
            /**
             * The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings
             * (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
             */
            ipProtocol?: string;
            /**
             * An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this
             * rule applies to connections through any port. Example inputs include: ["22"], ["80","443"], and ["12345-12349"].
             */
            ports?: string[];
        }
        interface FirewallPolicyRuleSecureTag {
            /** Name of the secure tag, created with TagManager's TagValue API. */
            name?: string;
            /** [Output Only] State of the secure tag, either `EFFECTIVE` or `INEFFECTIVE`. A secure tag is `INEFFECTIVE` when it is deleted or its network is deleted. */
            state?: string;
        }
        interface FixedOrPercent {
            /**
             * [Output Only] Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is
             * a percent, then the calculated value is percent/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80/100 * 150) =
             * 120 VM instances. If there is a remainder, the number is rounded.
             */
            calculated?: number;
            /** Specifies a fixed number of VM instances. This must be a positive integer. */
            fixed?: number;
            /** Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%. */
            percent?: number;
        }
        interface ForwardingRule {
            /**
             * This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can
             * access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer.
             */
            allowGlobalAccess?: boolean;
            /**
             * This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP/UDP load balancers, backend service-based network load balancers, and internal and
             * external protocol forwarding. Set this field to true to allow packets addressed to any port or packets lacking destination port information (for example, UDP fragments after the
             * first fragment) to be forwarded to the backends configured with this forwarding rule. The ports, port_range, and allPorts fields are mutually exclusive.
             */
            allPorts?: boolean;
            /**
             * Identifies the backend service to which the forwarding rule sends traffic. Required for Internal TCP/UDP Load Balancing and Network Load Balancing; must be omitted for all other
             * load balancer types.
             */
            backendService?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule.
             * Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request. To see the latest fingerprint, make a get()
             * request to retrieve a ForwardingRule.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * IP address for which this forwarding rule accepts traffic. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the referenced target or
             * backendService. While creating a forwarding rule, specifying an IPAddress is required under the following circumstances: - When the target is set to targetGrpcProxy and
             * validateForProxyless is set to true, the IPAddress should be set to 0.0.0.0. - When the target is a Private Service Connect Google APIs bundle, you must specify an IPAddress.
             * Otherwise, you can optionally specify an IP address that references an existing static (reserved) IP address resource. When omitted, Google Cloud assigns an ephemeral IP address.
             * Use one of the following formats to specify an IP address while creating a forwarding rule: * IP address number, as in `100.1.2.3` * IPv6 address range, as in `2600:1234::/96` *
             * Full resource URL, as in https://www.googleapis.com/compute/v1/projects/ project_id/regions/region/addresses/address-name * Partial URL or by name, as in: -
             * projects/project_id/regions/region/addresses/address-name - regions/region/addresses/address-name - global/addresses/address-name - address-name The forwarding rule's target or
             * backendService, and in most cases, also the loadBalancingScheme, determine the type of IP address that you can use. For detailed information, see [IP address
             * specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). When reading an IPAddress, the API always returns the IP address
             * number.
             */
            IPAddress?: string;
            /**
             * The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for
             * different load balancing products as described in [Load balancing features](https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends).
             */
            IPProtocol?: string;
            /** The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6. */
            ipVersion?: string;
            /**
             * Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their
             * traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.
             */
            isMirroringCollector?: boolean;
            /** [Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by
             * Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
             */
            labelFingerprint?: string;
            /** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
            labels?: { [P in string]: string };
            /** Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts. */
            loadBalancingScheme?: string;
            /**
             * Opaque filter criteria used by load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to load balancer, xDS clients present
             * node metadata. When there is a match, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the
             * ForwardingRule are not visible to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH_ANY, at least one of the filterLabels must match
             * the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its filterLabels must match with corresponding labels provided in the
             * metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applifed before those
             * specified in the UrlMap that this ForwardingRule references. metadataFilters only applies to Loadbalancers that have their loadBalancingScheme set to INTERNAL_SELF_MANAGED.
             */
            metadataFilters?: MetadataFilter[];
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash. For Private Service Connect forwarding rules that forward traffic to Google APIs, the forwarding
             * rule name must be a 1-20 characters string with lowercase letters and numbers and must start with a letter.
             */
            name?: string;
            /**
             * This field is not used for external load balancing. For Internal TCP/UDP Load Balancing, this field identifies the network that the load balanced IP should belong to for this
             * Forwarding Rule. If this field is not specified, the default network will be used. For Private Service Connect forwarding rules that forward traffic to Google APIs, a network must
             * be provided.
             */
            network?: string;
            /**
             * This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values
             * are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value
             * must be equal to the networkTier of the Address.
             */
            networkTier?: string;
            /** This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field. */
            noAutomateDnsZone?: boolean;
            /**
             * This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By backend service-based network load balancers, target pool-based network load balancers, internal proxy
             * load balancers, external proxy load balancers, Traffic Director, external protocol forwarding, and Classic VPN. Some products have restrictions on what ports can be used. See port
             * specifications for details. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The ports, port_range, and
             * allPorts fields are mutually exclusive. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping
             * portRanges. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping
             * portRanges. @pattern: \\d+(?:-\\d+)?
             */
            portRange?: string;
            /**
             * This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP/UDP load balancers, backend service-based network load balancers, and internal protocol
             * forwarding. You can specify a list of up to five ports by number, separated by commas. The ports can be contiguous or discontiguous. Only packets addressed to these ports will be
             * forwarded to the backends configured with this forwarding rule. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and
             * cannot share any values defined in ports. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair,
             * and cannot share any values defined in ports. The ports, port_range, and allPorts fields are mutually exclusive. @pattern: \\d+(?:-\\d+)?
             */
            ports?: string[];
            /** [Output Only] The PSC connection id of the PSC Forwarding Rule. */
            pscConnectionId?: string;
            pscConnectionStatus?: string;
            /**
             * [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP
             * request URL. It is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource. */
            serviceDirectoryRegistrations?: ForwardingRuleServiceDirectoryRegistration[];
            /**
             * An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters
             * long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character
             * must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for
             * internal load balancing.
             */
            serviceLabel?: string;
            /** [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal load balancing. */
            serviceName?: string;
            /**
             * This field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule, used in internal load balancing and network load balancing with IPv6. If
             * the network specified is in auto subnet mode, this field is optional. However, a subnetwork must be specified if the network is in custom subnet mode or when creating external
             * forwarding rule with IPv6.
             */
            subnetwork?: string;
            /**
             * The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding
             * rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. - For load balancers, see the "Target" column
             * in [Port specifications](https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications). - For Private Service Connect forwarding rules that
             * forward traffic to Google APIs, provide the name of a supported Google API bundle: - vpc-sc - APIs that support VPC Service Controls. - all-apis - All supported Google APIs. - For
             * Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
             */
            target?: string;
        }
        interface ForwardingRuleAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ForwardingRulesScopedList resources. */
            items?: { [P in string]: ForwardingRulesScopedList };
            /** [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ForwardingRuleList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ForwardingRule resources. */
            items?: ForwardingRule[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ForwardingRuleReference {
            forwardingRule?: string;
        }
        interface ForwardingRuleServiceDirectoryRegistration {
            /** Service Directory namespace to register the forwarding rule under. */
            namespace?: string;
            /** Service Directory service to register the forwarding rule under. */
            service?: string;
            /**
             * [Optional] Service Directory region to register this global forwarding rule under. Default to "us-central1". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding
             * Rules on the same network should use the same Service Directory region.
             */
            serviceDirectoryRegion?: string;
        }
        interface ForwardingRulesScopedList {
            /** A list of forwarding rules contained in this scope. */
            forwardingRules?: ForwardingRule[];
            /** Informational warning which replaces the list of forwarding rules when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface GlobalNetworkEndpointGroupsAttachEndpointsRequest {
            /** The list of network endpoints to be attached. */
            networkEndpoints?: NetworkEndpoint[];
        }
        interface GlobalNetworkEndpointGroupsDetachEndpointsRequest {
            /** The list of network endpoints to be detached. */
            networkEndpoints?: NetworkEndpoint[];
        }
        interface GlobalOrganizationSetPolicyRequest {
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
            bindings?: Binding[];
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
            etag?: string;
            /**
             * REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain
             * services (like Projects) might reject them.
             */
            policy?: Policy;
        }
        interface GlobalSetLabelsRequest {
            /**
             * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request
             * to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet.
             * Make a get() request to the resource to get the latest fingerprint.
             */
            labelFingerprint?: string;
            /**
             * A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, "webserver-frontend": "images". A label value can also be empty
             * (e.g. "my-label": "").
             */
            labels?: { [P in string]: string };
        }
        interface GlobalSetPolicyRequest {
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
            bindings?: Binding[];
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
            etag?: string;
            /**
             * REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain
             * services (like Projects) might reject them.
             */
            policy?: Policy;
        }
        interface GRPCHealthCheck {
            /**
             * The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall
             * status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be
             * ASCII.
             */
            grpcServiceName?: string;
            /** The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all
             * backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and
             * instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only
             * supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that
             * can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the
             * port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend
             * service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
        }
        interface GuestAttributes {
            /** [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry. */
            kind?: string;
            /** The path to be queried. This can be the default namespace ('') or a nested namespace ('\/') or a specified key ('\/\'). */
            queryPath?: string;
            /** [Output Only] The value of the requested queried path. */
            queryValue?: GuestAttributesValue;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** The key to search for. */
            variableKey?: string;
            /** [Output Only] The value found for the requested key. */
            variableValue?: string;
        }
        interface GuestAttributesEntry {
            /** Key for the guest attribute entry. */
            key?: string;
            /** Namespace for the guest attribute entry. */
            namespace?: string;
            /** Value for the guest attribute entry. */
            value?: string;
        }
        interface GuestAttributesValue {
            items?: GuestAttributesEntry[];
        }
        interface GuestOsFeature {
            /**
             * The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO_SCSI_MULTIQUEUE - WINDOWS -
             * MULTI_IP_SUBNET - UEFI_COMPATIBLE - GVNIC - SEV_CAPABLE - SUSPEND_RESUME_COMPATIBLE - SEV_SNP_CAPABLE For more information, see Enabling guest operating system features.
             */
            type?: string;
        }
        interface HealthCheck {
            /** How often (in seconds) to send a health check. The default value is 5 seconds. */
            checkIntervalSec?: number;
            /** [Output Only] Creation timestamp in 3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            grpcHealthCheck?: GRPCHealthCheck;
            /** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
            healthyThreshold?: number;
            http2HealthCheck?: HTTP2HealthCheck;
            httpHealthCheck?: HTTPHealthCheck;
            httpsHealthCheck?: HTTPSHealthCheck;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** Type of the resource. */
            kind?: string;
            /** Configure logging on this health check. */
            logConfig?: HealthCheckLogConfig;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63
             * characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character
             * is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash.
             */
            name?: string;
            /** [Output Only] Region where the health check resides. Not applicable to global health checks. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            sslHealthCheck?: SSLHealthCheck;
            tcpHealthCheck?: TCPHealthCheck;
            /** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec. */
            timeoutSec?: number;
            /**
             * Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type
             * field.
             */
            type?: string;
            /** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
            unhealthyThreshold?: number;
        }
        interface HealthCheckList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of HealthCheck resources. */
            items?: HealthCheck[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface HealthCheckLogConfig {
            /** Indicates whether or not to export logs. This is false by default, which means no health check logging will be done. */
            enable?: boolean;
        }
        interface HealthCheckReference {
            healthCheck?: string;
        }
        interface HealthChecksAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of HealthChecksScopedList resources. */
            items?: { [P in string]: HealthChecksScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface HealthCheckService {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService.
             * An up-to-date fingerprint must be provided in order to patch/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest
             * fingerprint, make a get() request to retrieve the HealthCheckService.
             */
            fingerprint?: string;
            /**
             * A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10 for regional HealthCheckService, and not more than 1 for global
             * HealthCheckService. HealthCheck resources must have portSpecification=USE_SERVING_PORT or portSpecification=USE_FIXED_PORT. For regional HealthCheckService, the HealthCheck must be
             * regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks
             * must belong to the same region. Regional HealthChecks must belong to the same region as zones of NetworkEndpointGroups. For global HealthCheckService using global INTERNET_IP_PORT
             * NetworkEndpointGroups, the global HealthChecks must specify sourceRegions, and HealthChecks that specify sourceRegions can only be used with global INTERNET_IP_PORT
             * NetworkEndpointGroups.
             */
            healthChecks?: string[];
            /**
             * Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO_AGGREGATION if unspecified. - NO_AGGREGATION. An EndpointHealth
             * message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all
             * health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService.
             */
            healthStatusAggregationPolicy?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output only] Type of the resource. Always compute#healthCheckServicefor health check services. */
            kind?: string;
            /**
             * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            name?: string;
            /**
             * A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService.
             * For global HealthCheckServices, the NetworkEndpointGroups must be global INTERNET_IP_PORT.
             */
            networkEndpointGroups?: string[];
            /**
             * A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional
             * HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
             */
            notificationEndpoints?: string[];
            /**
             * [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP
             * request URL. It is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface HealthCheckServiceReference {
            healthCheckService?: string;
        }
        interface HealthCheckServicesList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of HealthCheckService resources. */
            items?: HealthCheckService[];
            /** [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface HealthChecksScopedList {
            /** A list of HealthChecks contained in this scope. */
            healthChecks?: HealthCheck[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface HealthStatus {
            /** Metadata defined as annotations for network endpoint. */
            annotations?: { [P in string]: string };
            /** URL of the forwarding rule associated with the health status of the instance. */
            forwardingRule?: string;
            /** A forwarding rule IP address assigned to this instance. */
            forwardingRuleIp?: string;
            /** Health state of the instance. */
            healthState?: string;
            /** URL of the instance resource. */
            instance?: string;
            /**
             * For target pool based Network Load Balancing, it indicates the forwarding rule's IP address assigned to this instance. For other types of load balancing, the field indicates VM
             * internal ip.
             */
            ipAddress?: string;
            /** The named port of the instance group, not necessarily the port that is health-checked. */
            port?: number;
            weight?: string;
            weightError?: string;
        }
        interface HealthStatusForNetworkEndpoint {
            /** URL of the backend service associated with the health state of the network endpoint. */
            backendService?: BackendServiceReference;
            /** URL of the forwarding rule associated with the health state of the network endpoint. */
            forwardingRule?: ForwardingRuleReference;
            /** URL of the health check associated with the health state of the network endpoint. */
            healthCheck?: HealthCheckReference;
            /** URL of the health check service associated with the health state of the network endpoint. */
            healthCheckService?: HealthCheckServiceReference;
            /** Health state of the network endpoint determined based on the health checks configured. */
            healthState?: string;
        }
        interface Help {
            /** URL(s) pointing to additional information on handling the current error. */
            links?: HelpLink[];
        }
        interface HelpLink {
            /** Describes what the link offers. */
            description?: string;
            /** The URL of the link. */
            url?: string;
        }
        interface HostRule {
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]*). In that case, * must be
             * the first character, and if followed by anything, the immediate following character must be either - or .. * based matching is not supported when the URL map is bound to a target
             * gRPC proxy that has the validateForProxyless field set to true.
             */
            hosts?: string[];
            /** The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL's host portion. */
            pathMatcher?: string;
        }
        interface HTTP2HealthCheck {
            /**
             * The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets
             * are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
             */
            host?: string;
            /** The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all
             * backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and
             * instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only
             * supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that
             * can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the
             * port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend
             * service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** The request path of the HTTP/2 health check request. The default value is /. */
            requestPath?: string;
            /**
             * Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this
             * specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see:
             * https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
             */
            response?: string;
        }
        interface HttpFaultAbort {
            /**
             * The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this
             * mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
             */
            httpStatus?: number;
            /** The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive. */
            percentage?: number;
        }
        interface HttpFaultDelay {
            /** Specifies the value of the fixed delay interval. */
            fixedDelay?: Duration;
            /** The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive. */
            percentage?: number;
        }
        interface HttpFaultInjection {
            /** The specification for how client requests are aborted as part of fault injection. */
            abort?: HttpFaultAbort;
            /** The specification for how client requests are delayed as part of fault injection, before being sent to a backend service. */
            delay?: HttpFaultDelay;
        }
        interface HttpHeaderAction {
            /** Headers to add to a matching request before forwarding the request to the backendService. */
            requestHeadersToAdd?: HttpHeaderOption[];
            /** A list of header names for headers that need to be removed from the request before forwarding the request to the backendService. */
            requestHeadersToRemove?: string[];
            /** Headers to add the response before sending the response back to the client. */
            responseHeadersToAdd?: HttpHeaderOption[];
            /** A list of header names for headers that need to be removed from the response before sending the response back to the client. */
            responseHeadersToRemove?: string[];
        }
        interface HttpHeaderMatch {
            /** The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
            exactMatch?: string;
            /**
             * The name of the HTTP header to match. For matching against the HTTP request's authority, use a headerMatch with the header name ":authority". For matching a request's method, use
             * the headerName ":method". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and
             * the `content-type` header are supported. The following transport-level headers cannot be used in header matching rules: `:authority`, `:method`, `:path`, `:scheme`, `user-agent`,
             * `accept-encoding`, `content-encoding`, `grpc-accept-encoding`, `grpc-encoding`, `grpc-previous-rpc-attempts`, `grpc-tags-bin`, `grpc-timeout` and `grpc-trace-bin`.
             */
            headerName?: string;
            /**
             * If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria
             * are NOT met. The default setting is false.
             */
            invertMatch?: boolean;
            /** The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
            prefixMatch?: string;
            /**
             * A header with the contents of headerName must exist. The match takes place whether or not the request's header has a value. Only one of exactMatch, prefixMatch, suffixMatch,
             * regexMatch, presentMatch or rangeMatch must be set.
             */
            presentMatch?: boolean;
            /**
             * The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For
             * example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch,
             * presentMatch or rangeMatch must be set. rangeMatch is not supported for load balancers that have loadBalancingScheme set to EXTERNAL.
             */
            rangeMatch?: Int64RangeMatch;
            /**
             * The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port
             * specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header's port specifier. Only one of
             * exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to
             * INTERNAL_SELF_MANAGED.
             */
            regexMatch?: string;
            /** The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. */
            suffixMatch?: string;
        }
        interface HttpHeaderOption {
            /** The name of the header. */
            headerName?: string;
            /** The value of the header to add. */
            headerValue?: string;
            /**
             * If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header.
             * The default value is false.
             */
            replace?: boolean;
        }
        interface HttpHealthCheck {
            /** How often (in seconds) to send a health check. The default value is 5 seconds. */
            checkIntervalSec?: number;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
            healthyThreshold?: number;
            /** The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
            host?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The TCP port number for the HTTP health check request. The default value is 80. */
            port?: number;
            /** The request path of the HTTP health check request. The default value is /. This field does not support query parameters. */
            requestPath?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec. */
            timeoutSec?: number;
            /** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
            unhealthyThreshold?: number;
        }
        interface HTTPHealthCheck {
            /**
             * The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are
             * sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
             */
            host?: string;
            /** The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The
             * health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT
             * network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring
             * to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load
             * balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint
             * group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number
             * determined by looking up the backend service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** The request path of the HTTP health check request. The default value is /. */
            requestPath?: string;
            /**
             * Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this
             * specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see:
             * https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
             */
            response?: string;
        }
        interface HttpHealthCheckList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of HttpHealthCheck resources. */
            items?: HttpHealthCheck[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface HttpQueryParameterMatch {
            /** The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set. */
            exactMatch?: string;
            /** The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails. */
            name?: string;
            /**
             * Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch,
             * exactMatch, or regexMatch must be set.
             */
            presentMatch?: boolean;
            /**
             * The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see
             * Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
             */
            regexMatch?: string;
        }
        interface HttpRedirectAction {
            /** The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters. */
            hostRedirect?: string;
            /**
             * If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This
             * must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
             */
            httpsRedirect?: boolean;
            /**
             * The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or
             * neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
             */
            pathRedirect?: string;
            /**
             * The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be
             * supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024
             * characters.
             */
            prefixRedirect?: string;
            /**
             * The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED_PERMANENTLY_DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds
             * to 302. - SEE_OTHER which corresponds to 303. - TEMPORARY_REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds
             * to 308. In this case, the request method is retained.
             */
            redirectResponseCode?: string;
            /**
             * If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The
             * default is set to false.
             */
            stripQuery?: boolean;
        }
        interface HttpRetryPolicy {
            /** Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1. */
            numRetries?: number;
            /**
             * Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in the HttpRouteAction field. If timeout in the HttpRouteAction field is not set, this
             * field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless
             * field set to true.
             */
            perTryTimeout?: Duration;
            /**
             * Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: retry is attempted if the instance or endpoint responds with any 5xx response code, or if
             * the instance or endpoint does not respond at all. For example, disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only
             * applies to response codes 502, 503 or 504. - connect-failure: a retry is attempted on failures connecting to the instance or endpoint. For example, connection timeouts. -
             * retriable-4xx: a retry is attempted if the instance or endpoint responds with a 4xx response code. The only error that you can retry is error code 409. - refused-stream: a retry is
             * attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: a retry is attempted if
             * the gRPC status code in the response header is set to cancelled. - deadline-exceeded: a retry is attempted if the gRPC status code in the response header is set to
             * deadline-exceeded. - internal: a retry is attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: a retry is attempted if the gRPC status
             * code in the response header is set to resource-exhausted. - unavailable: a retry is attempted if the gRPC status code in the response header is set to unavailable. Only the
             * following codes are supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true. - cancelled - deadline-exceeded - internal -
             * resource-exhausted - unavailable
             */
            retryConditions?: string[];
        }
        interface HttpRouteAction {
            /**
             * The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living
             * Standard. Not supported when the URL map is bound to a target gRPC proxy.
             */
            corsPolicy?: CorsPolicy;
            /**
             * The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to
             * a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can
             * be aborted by the load balancer for a percentage of requests. timeout and retry_policy is ignored by clients that are configured with a fault_injection_policy if: 1. The traffic is
             * generated by fault injection AND 2. The fault injection is not a delay fault injection. Fault injection is not supported with the global external HTTP(S) load balancer (classic). To
             * see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
             */
            faultInjectionPolicy?: HttpFaultInjection;
            /**
             * Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully
             * processed (known as *end-of-stream*), the duration in this field is computed from the beginning of the stream until the response has been processed, including all retries. A stream
             * that does not complete in this duration is closed. If not specified, this field uses the maximum maxStreamDuration value among all backend services associated with the route. This
             * field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL_SELF_MANAGED.
             */
            maxStreamDuration?: Duration;
            /**
             * Specifies the policy on how requests intended for the route's backends are shadowed to a separate mirrored backend service. The load balancer does not wait for responses from the
             * shadow service. Before sending traffic to the shadow service, the host / authority header is suffixed with -shadow. Not supported when the URL map is bound to a target gRPC proxy
             * that has the validateForProxyless field set to true.
             */
            requestMirrorPolicy?: RequestMirrorPolicy;
            /** Specifies the retry policy associated with this route. */
            retryPolicy?: HttpRetryPolicy;
            /**
             * Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as *end-of-stream*) up until the response has been
             * processed. Timeout includes all retries. If not specified, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map
             * is bound to a target gRPC proxy that has validateForProxyless field set to true.
             */
            timeout?: Duration;
            /**
             * The spec to modify the URL of the request, before forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load
             * balancers. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
             */
            urlRewrite?: UrlRewrite;
            /**
             * A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If
             * all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before
             * forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in
             * this HttpRouteAction.
             */
            weightedBackendServices?: WeightedBackendService[];
        }
        interface HttpRouteRule {
            /** The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters. */
            description?: string;
            /**
             * Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction value specified here is applied before the matching
             * pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction HeaderAction is not supported for load
             * balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
             */
            headerAction?: HttpHeaderAction;
            /**
             * The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied.
             * However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
             */
            matchRules?: HttpRouteRuleMatch[];
            /**
             * For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the
             * lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or
             * more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or
             * remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered
             * from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
             */
            priority?: number;
            /**
             * In response to a matching matchRule, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the
             * selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any
             * weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. URL maps for Classic external HTTP(S) load balancers only support the
             * urlRewrite action within a route rule's routeAction.
             */
            routeAction?: HttpRouteAction;
            /**
             * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL
             * rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction
             * specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
             */
            service?: string;
            /**
             * When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the
             * URL map is bound to a target gRPC proxy.
             */
            urlRedirect?: HttpRedirectAction;
        }
        interface HttpRouteRuleMatch {
            /**
             * For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be
             * part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
             */
            fullPathMatch?: string;
            /** Specifies a list of header match criteria, all of which must match corresponding headers in the request. */
            headerMatches?: HttpHeaderMatch[];
            /**
             * Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is
             * bound to a target gRPC proxy.
             */
            ignoreCase?: boolean;
            /**
             * Opaque filter criteria used by the load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to the load balancer, xDS clients
             * present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria
             * is set to MATCH_ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH_ALL, then all of its
             * filterLabels must match with corresponding labels provided in the metadata. If multiple metadata filters are specified, all of them need to be satisfied in order to be considered a
             * match. metadataFilters specified here is applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies
             * to load balancers that have loadBalancingScheme set to INTERNAL_SELF_MANAGED. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set
             * to true.
             */
            metadataFilters?: MetadataFilter[];
            /**
             * For satisfying the matchRule condition, the request's path must begin with the specified prefixMatch. prefixMatch must begin with a /. The value must be from 1 to 1024 characters.
             * Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
             */
            prefixMatch?: string;
            /**
             * Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to a target gRPC
             * proxy.
             */
            queryParameterMatches?: HttpQueryParameterMatch[];
            /**
             * For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied
             * with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions
             * can only be used when the loadBalancingScheme is set to INTERNAL_SELF_MANAGED.
             */
            regexMatch?: string;
        }
        interface HttpsHealthCheck {
            /** How often (in seconds) to send a health check. The default value is 5 seconds. */
            checkIntervalSec?: number;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2. */
            healthyThreshold?: number;
            /** The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used. */
            host?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** Type of the resource. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The TCP port number for the HTTPS health check request. The default value is 443. */
            port?: number;
            /** The request path of the HTTPS health check request. The default value is "/". */
            requestPath?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec. */
            timeoutSec?: number;
            /** A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2. */
            unhealthyThreshold?: number;
        }
        interface HTTPSHealthCheck {
            /**
             * The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are
             * sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest
             */
            host?: string;
            /** The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all
             * backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and
             * instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only
             * supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that
             * can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the
             * port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend
             * service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** The request path of the HTTPS health check request. The default value is /. */
            requestPath?: string;
            /**
             * Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this
             * specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see:
             * https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http
             */
            response?: string;
        }
        interface HttpsHealthCheckList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of HttpsHealthCheck resources. */
            items?: HttpsHealthCheck[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface Image {
            /** The architecture of the image. Valid values are ARM64 or X86_64. */
            architecture?: string;
            /** Size of the image tar.gz archive stored in Google Cloud Storage (in bytes). */
            archiveSizeBytes?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** The deprecation status associated with this image. */
            deprecated?: DeprecationStatus;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Size of the image when restored onto a persistent disk (in GB). */
            diskSizeGb?: string;
            /**
             * The name of the image family to which this image belongs. You can create disks by specifying an image family instead of a specific image name. The image family always returns its
             * latest image that is not deprecated. The name of the image family must comply with RFC1035.
             */
            family?: string;
            /** A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter. */
            guestOsFeatures?: GuestOsFeature[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * Encrypts the image using a customer-supplied encryption key. After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g.
             * to create a disk from the image). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the image,
             * then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
             */
            imageEncryptionKey?: CustomerEncryptionKey;
            /** [Output Only] Type of the resource. Always compute#image for images. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request
             * will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an image.
             */
            labelFingerprint?: string;
            /** Labels to apply to this image. These can be later modified by the setLabels method. */
            labels?: { [P in string]: string };
            /** Integer license codes indicating which licenses are attached to this image. */
            licenseCodes?: string[];
            /** Any applicable license URI. */
            licenses?: string[];
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The parameters of the raw disk image. */
            rawDisk?: {
                /**
                 * The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client
                 * when the disk image is created.
                 */
                containerType?: string;
                /** [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created. */
                sha1Checksum?: string;
                /**
                 * The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: -
                 * https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must
                 * provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
                 */
                source?: string;
            };
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Set the secure boot keys of shielded instance. */
            shieldedInstanceInitialState?: InitialStateConfig;
            /**
             * URL of the source disk used to create this image. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk -
             * projects/project/zones/zone/disks/disk - zones/zone/disks/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source
             * URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
             */
            sourceDisk?: string;
            /** The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key. */
            sourceDiskEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given
             * disk name.
             */
            sourceDiskId?: string;
            /**
             * URL of the source image used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/ images/image_name
             * - projects/project_id/global/images/image_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The
             * sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
             */
            sourceImage?: string;
            /** The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. */
            sourceImageEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given
             * image name.
             */
            sourceImageId?: string;
            /**
             * URL of the source snapshot used to create this image. The following are valid formats for the URL: - https://www.googleapis.com/compute/v1/projects/project_id/global/
             * snapshots/snapshot_name - projects/project_id/global/snapshots/snapshot_name In order to create an image, you must provide the full or partial URL of one of the following: - The
             * rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
             */
            sourceSnapshot?: string;
            /** The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key. */
            sourceSnapshotEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a
             * given snapshot name.
             */
            sourceSnapshotId?: string;
            /** The type of the image used to create this disk. The default and only valid value is RAW. */
            sourceType?: string;
            /**
             * [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to
             * READY. Possible values are FAILED, PENDING, or READY.
             */
            status?: string;
            /** Cloud Storage bucket storage location of the image (regional or multi-regional). */
            storageLocations?: string[];
        }
        interface ImageFamilyView {
            /** The latest image that is part of the specified image family in the requested location, and that is not deprecated. */
            image?: Image;
        }
        interface ImageList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Image resources. */
            items?: Image[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InitialStateConfig {
            /** The Key Database (db). */
            dbs?: FileContentBuffer[];
            /** The forbidden key database (dbx). */
            dbxs?: FileContentBuffer[];
            /** The Key Exchange Key (KEK). */
            keks?: FileContentBuffer[];
            /** The Platform Key (PK). */
            pk?: FileContentBuffer;
        }
        interface Instance {
            /** Controls for advanced machine-related behavior features. */
            advancedMachineFeatures?: AdvancedMachineFeatures;
            /**
             * Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more
             * information, see Enabling IP Forwarding .
             */
            canIpForward?: boolean;
            confidentialInstanceConfig?: ConfidentialInstanceConfig;
            /** [Output Only] The CPU platform used by this instance. */
            cpuPlatform?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** Whether the resource should be protected against deletion. */
            deletionProtection?: boolean;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Array of disks associated with this instance. Persistent disks must be created before you can assign them. */
            disks?: AttachedDisk[];
            /** Enables display device for the instance. */
            displayDevice?: DisplayDevice;
            /**
             * Specifies a fingerprint for this resource, which is essentially a hash of the instance's contents and used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance. To see the latest
             * fingerprint, make get() request to the instance.
             */
            fingerprint?: string;
            /** A list of the type and count of accelerator cards attached to the instance. */
            guestAccelerators?: AcceleratorConfig[];
            /**
             * Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is
             * [INSTANCE_NAME].c.[PROJECT_ID].internal when using the global DNS, and [INSTANCE_NAME].[ZONE].c.[PROJECT_ID].internal when using zonal DNS.
             */
            hostname?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
            keyRevocationActionType?: string;
            /** [Output Only] Type of the resource. Always compute#instance for instances. */
            kind?: string;
            /**
             * A fingerprint for this request, which is essentially a hash of the label's contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and
             * changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint,
             * make get() request to the instance.
             */
            labelFingerprint?: string;
            /** Labels to apply to this instance. These can be later modified by the setLabels method. */
            labels?: { [P in string]: string };
            /** [Output Only] Last start timestamp in RFC3339 text format. */
            lastStartTimestamp?: string;
            /** [Output Only] Last stop timestamp in RFC3339 text format. */
            lastStopTimestamp?: string;
            /** [Output Only] Last suspended timestamp in RFC3339 text format. */
            lastSuspendedTimestamp?: string;
            /**
             * Full or partial URL of the machine type resource to use for this instance, in the format: zones/zone/machineTypes/machine-type. This is provided by the client when the instance is
             * created. For example, the following is a valid partial url to a predefined machine type: zones/us-central1-f/machineTypes/n1-standard-1 To create a custom machine type, provide a
             * URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a
             * multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones/zone/machineTypes/custom-CPUS-MEMORY For example:
             * zones/us-central1-f/machineTypes/custom-4-5120 For a full list of restrictions, read the Specifications for custom machine types.
             */
            machineType?: string;
            /** The metadata key/value pairs assigned to this instance. This includes custom metadata and predefined keys. */
            metadata?: Metadata;
            /**
             * Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel
             * Sandy Bridge".
             */
            minCpuPlatform?: string;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the
             * name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following
             * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet.
             * Multiple interfaces are supported per instance.
             */
            networkInterfaces?: NetworkInterface[];
            networkPerformanceConfig?: NetworkPerformanceConfig;
            /** Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload. */
            params?: InstanceParams;
            /** The private IPv6 google access type for the VM. If not specified, use INHERIT_FROM_SUBNETWORK as default. */
            privateIpv6GoogleAccess?: string;
            /** Specifies the reservations that this instance can consume from. */
            reservationAffinity?: ReservationAffinity;
            /** Resource policies applied to this instance. */
            resourcePolicies?: string[];
            /** [Output Only] Specifies values set for instance attributes as compared to the values requested by user in the corresponding input only field. */
            resourceStatus?: ResourceStatus;
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** Sets the scheduling options for this instance. */
            scheduling?: Scheduling;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /**
             * A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported. Service accounts generate access tokens
             * that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.
             */
            serviceAccounts?: ServiceAccount[];
            shieldedInstanceConfig?: ShieldedInstanceConfig;
            shieldedInstanceIntegrityPolicy?: ShieldedInstanceIntegrityPolicy;
            /** Source machine image */
            sourceMachineImage?: string;
            /** Source machine image encryption key when creating an instance from a machine image. */
            sourceMachineImageEncryptionKey?: CustomerEncryptionKey;
            /** [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity. */
            startRestricted?: boolean;
            /**
             * [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more
             * information about the status of the instance, see Instance life cycle.
             */
            status?: string;
            /** [Output Only] An optional, human-readable explanation of the status. */
            statusMessage?: string;
            /**
             * Tags to apply to this instance. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during instance creation. The tags can be
             * later modified by the setTags method. Each tag within the list must comply with RFC1035. Multiple tags can be specified via the 'tags.items' field.
             */
            tags?: Tags;
            /** [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            zone?: string;
        }
        interface InstanceAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** An object that contains a list of instances scoped by zone. */
            items?: { [P in string]: InstancesScopedList };
            /** [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceConsumptionData {
            /** Resources consumed by the instance. */
            consumptionInfo?: InstanceConsumptionInfo;
            /** Server-defined URL for the instance. */
            instance?: string;
        }
        interface InstanceConsumptionInfo {
            /** The number of virtual CPUs that are available to the instance. */
            guestCpus?: number;
            /** The amount of local SSD storage available to the instance, defined in GiB. */
            localSsdGb?: number;
            /** The amount of physical memory available to the instance, defined in MiB. */
            memoryMb?: number;
            /** The minimal guaranteed number of virtual CPUs that are reserved. */
            minNodeCpus?: number;
        }
        interface InstanceGroup {
            /** [Output Only] The creation timestamp for this instance group in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently. */
            fingerprint?: string;
            /** [Output Only] A unique identifier for this instance group, generated by the server. */
            id?: string;
            /** [Output Only] The resource type, which is always compute#instanceGroup for instance groups. */
            kind?: string;
            /** The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035. */
            name?: string;
            /**
             * Assigns a name to a port number. For example: {name: "http", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also
             * contain multiple ports. For example: [{name: "app1", port: 8080}, {name: "app1", port: 8081}, {name: "app2", port: 8082}] Named ports apply to all instances in this instance group.
             */
            namedPorts?: NamedPort[];
            /**
             * [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields
             * only refer to the network and subnet used by your primary interface (nic0).
             */
            network?: string;
            /** [Output Only] The URL of the region where the instance group is located (for regional resources). */
            region?: string;
            /** [Output Only] The URL for this instance group. The server generates this URL. */
            selfLink?: string;
            /** [Output Only] The total number of instances in the instance group. */
            size?: number;
            /**
             * [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields
             * only refer to the network and subnet used by your primary interface (nic0).
             */
            subnetwork?: string;
            /** [Output Only] The URL of the zone where the instance group is located (for zonal resources). */
            zone?: string;
        }
        interface InstanceGroupAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroupsScopedList resources. */
            items?: { [P in string]: InstanceGroupsScopedList };
            /** [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroup resources. */
            items?: InstanceGroup[];
            /** [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupManager {
            /** The autohealing policy for this managed instance group. You can specify only one value. */
            autoHealingPolicies?: InstanceGroupManagerAutoHealingPolicy[];
            /**
             * The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to
             * the base instance name. The base instance name must comply with RFC1035.
             */
            baseInstanceName?: string;
            /** [Output Only] The creation timestamp for this managed instance group in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions. */
            currentActions?: InstanceGroupManagerActionsSummary;
            /** An optional description of this resource. */
            description?: string;
            /** Policy specifying the intended distribution of managed instances across zones in a regional managed instance group. */
            distributionPolicy?: DistributionPolicy;
            /**
             * Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in
             * order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an
             * InstanceGroupManager.
             */
            fingerprint?: string;
            /** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
            id?: string;
            /** [Output Only] The URL of the Instance Group resource. */
            instanceGroup?: string;
            /**
             * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The
             * templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
             */
            instanceTemplate?: string;
            /** [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups. */
            kind?: string;
            /** Pagination behavior of the listManagedInstances API method for this managed instance group. */
            listManagedInstancesResults?: string;
            /** The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035. */
            name?: string;
            /** Named ports configured for the Instance Groups complementary to this Instance Group Manager. */
            namedPorts?: NamedPort[];
            /** [Output Only] The URL of the region where the managed instance group resides (for regional resources). */
            region?: string;
            /** [Output Only] The URL for this managed instance group. The server defines this URL. */
            selfLink?: string;
            /** Stateful configuration for this Instanced Group Manager */
            statefulPolicy?: StatefulPolicy;
            /** [Output Only] The status of this managed instance group. */
            status?: InstanceGroupManagerStatus;
            /**
             * The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance
             * group.
             */
            targetPools?: string[];
            /**
             * The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods.
             * Resizing the group also changes this number.
             */
            targetSize?: number;
            /** The update policy for this managed instance group. */
            updatePolicy?: InstanceGroupManagerUpdatePolicy;
            /**
             * Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most
             * once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the
             * targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
             */
            versions?: InstanceGroupManagerVersion[];
            /** [Output Only] The URL of a zone where the managed instance group is located (for zonal resources). */
            zone?: string;
        }
        interface InstanceGroupManagerActionsSummary {
            /**
             * [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group
             * without deleting it.
             */
            abandoning?: number;
            /**
             * [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these
             * instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries
             * field will be populated.
             */
            creating?: number;
            /**
             * [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any
             * of these instances, it decreases the group's targetSize value accordingly.
             */
            creatingWithoutRetries?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted. */
            deleting?: number;
            /** [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions. */
            none?: number;
            /**
             * [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the
             * existing root persistent disk and creates a new disk from the image that is defined in the instance template.
             */
            recreating?: number;
            /**
             * [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example,
             * setting or removing target pools for the instance.
             */
            refreshing?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted. */
            restarting?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed. */
            resuming?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be started or are currently being started. */
            starting?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped. */
            stopping?: number;
            /** [Output Only] The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended. */
            suspending?: number;
            /**
             * [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method
             * documentation.
             */
            verifying?: number;
        }
        interface InstanceGroupManagerAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroupManagersScopedList resources. */
            items?: { [P in string]: InstanceGroupManagersScopedList };
            /** [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupManagerAutoHealingPolicy {
            /** The URL for the health check that signals autohealing. */
            healthCheck?: string;
            /**
             * The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows
             * instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its
             * instances prematurely. This value must be from range [0, 3600].
             */
            initialDelaySec?: number;
        }
        interface InstanceGroupManagerList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroupManager resources. */
            items?: InstanceGroupManager[];
            /** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupManagersAbandonInstancesRequest {
            /** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
        }
        interface InstanceGroupManagersApplyUpdatesRequest {
            /** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
            allInstances?: boolean;
            /** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
            /**
             * The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and
             * start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive
             * action than you set with this flag, the necessary action is performed to execute the update.
             */
            minimalAction?: string;
            /**
             * The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it
             * again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more
             * disruptive action than you set with this flag, the update request will fail.
             */
            mostDisruptiveAllowedAction?: string;
        }
        interface InstanceGroupManagersCreateInstancesRequest {
            /** [Required] List of specifications of per-instance configs. */
            instances?: PerInstanceConfig[];
        }
        interface InstanceGroupManagersDeleteInstancesRequest {
            /** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
            /**
             * Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned.
             * If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or
             * a reference to an instance that exists in a zone or region other than the group's zone or region.
             */
            skipInstancesOnValidationError?: boolean;
        }
        interface InstanceGroupManagersDeletePerInstanceConfigsReq {
            /** The list of instance names for which we want to delete per-instance configs on this managed instance group. */
            names?: string[];
        }
        interface InstanceGroupManagersListErrorsResponse {
            /** [Output Only] The list of errors of the managed instance group. */
            items?: InstanceManagedByIgmError[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
        }
        interface InstanceGroupManagersListManagedInstancesResponse {
            /** [Output Only] The list of instances in the managed instance group. */
            managedInstances?: ManagedInstance[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
        }
        interface InstanceGroupManagersListPerInstanceConfigsResp {
            /** [Output Only] The list of PerInstanceConfig. */
            items?: PerInstanceConfig[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupManagersPatchPerInstanceConfigsReq {
            /** The list of per-instance configurations to insert or patch on this managed instance group. */
            perInstanceConfigs?: PerInstanceConfig[];
        }
        interface InstanceGroupManagersRecreateInstancesRequest {
            /** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
        }
        interface InstanceGroupManagersScopedList {
            /** [Output Only] The list of managed instance groups that are contained in the specified project and zone. */
            instanceGroupManagers?: InstanceGroupManager[];
            /** [Output Only] The warning that replaces the list of managed instance groups when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupManagersSetInstanceTemplateRequest {
            /**
             * The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The
             * templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
             */
            instanceTemplate?: string;
        }
        interface InstanceGroupManagersSetTargetPoolsRequest {
            /**
             * The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the
             * fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another
             * concurrent request.
             */
            fingerprint?: string;
            /**
             * The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group.
             * Existing instances and new instances in the group all receive these target pool settings.
             */
            targetPools?: string[];
        }
        interface InstanceGroupManagerStatus {
            /** [Output Only] The URL of the Autoscaler that targets this instance group manager. */
            autoscaler?: string;
            /**
             * [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently
             * undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance
             * group itself is not being modified.
             */
            isStable?: boolean;
            /** [Output Only] Stateful status of the given Instance Group Manager. */
            stateful?: InstanceGroupManagerStatusStateful;
            /** [Output Only] A status of consistency of Instances' versions with their target version specified by version field on Instance Group Manager. */
            versionTarget?: InstanceGroupManagerStatusVersionTarget;
        }
        interface InstanceGroupManagerStatusStateful {
            /**
             * [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance
             * configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs
             * but not yet applied those deletions.
             */
            hasStatefulConfig?: boolean;
            /** [Output Only] Status of per-instance configurations on the instance. */
            perInstanceConfigs?: InstanceGroupManagerStatusStatefulPerInstanceConfigs;
        }
        interface InstanceGroupManagerStatusStatefulPerInstanceConfigs {
            /**
             * A bit indicating if all of the group's per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no
             * per-instance-configs.
             */
            allEffective?: boolean;
        }
        interface InstanceGroupManagerStatusVersionTarget {
            /**
             * [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances' target version are
             * specified by version field on Instance Group Manager.
             */
            isReached?: boolean;
        }
        interface InstanceGroupManagersUpdatePerInstanceConfigsReq {
            /** The list of per-instance configurations to insert or patch on this managed instance group. */
            perInstanceConfigs?: PerInstanceConfig[];
        }
        interface InstanceGroupManagerUpdatePolicy {
            /**
             * The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances
             * across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
             */
            instanceRedistributionType?: string;
            /**
             * The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more
             * instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in
             * which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
             */
            maxSurge?: FixedOrPercent;
            /**
             * The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The
             * instance's status is RUNNING. - If there is a health check on the instance group, the instance's health check status must be HEALTHY at least once. If there is no health check on
             * the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a
             * percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the
             * managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
             */
            maxUnavailable?: FixedOrPercent;
            /**
             * Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption
             * as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To
             * apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its
             * metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes.
             */
            minimalAction?: string;
            /**
             * Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart,
             * RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is
             * more disruptive than most disruptive allowed action you specify it will not perform the update at all.
             */
            mostDisruptiveAllowedAction?: string;
            /** What action should be used to replace instances. See minimal_action.REPLACE */
            replacementMethod?: string;
            /**
             * The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or
             * OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
             */
            type?: string;
        }
        interface InstanceGroupManagerVersion {
            /**
             * The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the
             * `targetSize` for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the
             * group's updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the `targetSize` for this version is reached.
             */
            instanceTemplate?: string;
            /** Name of the version. Unique among all versions in the scope of this managed instance group. */
            name?: string;
            /**
             * Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a
             * fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent/100 *
             * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read
             * Starting a canary update for more information.
             */
            targetSize?: FixedOrPercent;
        }
        interface InstanceGroupsAddInstancesRequest {
            /** The list of instances to add to the instance group. */
            instances?: InstanceReference[];
        }
        interface InstanceGroupsListInstances {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceWithNamedPorts resources. */
            items?: InstanceWithNamedPorts[];
            /** [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupsListInstancesRequest {
            /**
             * A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of
             * their state.
             */
            instanceState?: string;
        }
        interface InstanceGroupsRemoveInstancesRequest {
            /** The list of instances to remove from the instance group. */
            instances?: InstanceReference[];
        }
        interface InstanceGroupsScopedList {
            /** [Output Only] The list of instance groups that are contained in this scope. */
            instanceGroups?: InstanceGroup[];
            /** [Output Only] An informational warning that replaces the list of instance groups when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceGroupsSetNamedPortsRequest {
            /**
             * The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings
             * concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied
             * from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet.
             */
            fingerprint?: string;
            /** The list of named ports to set for this instance group. */
            namedPorts?: NamedPort[];
        }
        interface InstanceList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Instance resources. */
            items?: Instance[];
            /** [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceListReferrers {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Reference resources. */
            items?: Reference[];
            /** [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceManagedByIgmError {
            /** [Output Only] Contents of the error. */
            error?: InstanceManagedByIgmErrorManagedInstanceError;
            /** [Output Only] Details of the instance action that triggered this error. May be null, if the error was not caused by an action on an instance. This field is optional. */
            instanceActionDetails?: InstanceManagedByIgmErrorInstanceActionDetails;
            /** [Output Only] The time that this error occurred. This value is in RFC3339 text format. */
            timestamp?: string;
        }
        interface InstanceManagedByIgmErrorInstanceActionDetails {
            /** [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values: */
            action?: string;
            /** [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created. */
            instance?: string;
            /**
             * [Output Only] Version this instance was created from, or was being created from, but the creation failed. Corresponds to one of the versions that were set on the Instance Group
             * Manager resource at the time this instance was being created.
             */
            version?: ManagedInstanceVersion;
        }
        interface InstanceManagedByIgmErrorManagedInstanceError {
            /** [Output Only] Error code. */
            code?: string;
            /** [Output Only] Error message. */
            message?: string;
        }
        interface InstanceMoveRequest {
            /**
             * The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone - projects/project/zones/zone - zones/zone
             */
            destinationZone?: string;
            /**
             * The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance - zones/zone/instances/instance
             */
            targetInstance?: string;
        }
        interface InstanceParams {
            /**
             * Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and
             * values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
             */
            resourceManagerTags?: { [P in string]: string };
        }
        interface InstanceProperties {
            /** Controls for advanced machine-related behavior features. Note that for MachineImage, this is not supported yet. */
            advancedMachineFeatures?: AdvancedMachineFeatures;
            /**
             * Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their
             * own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP
             * forwarding documentation for more information.
             */
            canIpForward?: boolean;
            /** Specifies the Confidential Instance options. Note that for MachineImage, this is not supported yet. */
            confidentialInstanceConfig?: ConfidentialInstanceConfig;
            /** An optional text description for the instances that are created from these properties. */
            description?: string;
            /** An array of disks that are associated with the instances that are created from these properties. */
            disks?: AttachedDisk[];
            /** A list of guest accelerator cards' type and count to use for instances created from these properties. */
            guestAccelerators?: AcceleratorConfig[];
            /** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
            keyRevocationActionType?: string;
            /** Labels to apply to instances that are created from these properties. */
            labels?: { [P in string]: string };
            /** The machine type to use for instances that are created from these properties. */
            machineType?: string;
            /**
             * The metadata key/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance
             * metadata for more information.
             */
            metadata?: Metadata;
            /**
             * Minimum cpu/platform to be used by instances. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the friendly names of CPU platforms, such
             * as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
             */
            minCpuPlatform?: string;
            /** An array of network access configurations for this interface. */
            networkInterfaces?: NetworkInterface[];
            /** Note that for MachineImage, this is not supported yet. */
            networkPerformanceConfig?: NetworkPerformanceConfig;
            /** The private IPv6 google access type for VMs. If not specified, use INHERIT_FROM_SUBNETWORK as default. Note that for MachineImage, this is not supported yet. */
            privateIpv6GoogleAccess?: string;
            /** Specifies the reservations that instances can consume from. Note that for MachineImage, this is not supported yet. */
            reservationAffinity?: ReservationAffinity;
            /**
             * Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format `tagKeys/{tag_key_id}`, and
             * values are in the format `tagValues/456`. The field is ignored (both PUT & PATCH) when empty.
             */
            resourceManagerTags?: { [P in string]: string };
            /** Resource policies (names, not URLs) applied to instances created from these properties. Note that for MachineImage, this is not supported yet. */
            resourcePolicies?: string[];
            /** Specifies the scheduling options for the instances that are created from these properties. */
            scheduling?: Scheduling;
            /**
             * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata
             * queries to obtain the access tokens for these instances.
             */
            serviceAccounts?: ServiceAccount[];
            /** Note that for MachineImage, this is not supported yet. */
            shieldedInstanceConfig?: ShieldedInstanceConfig;
            /**
             * A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this
             * list of tags. Each tag within the list must comply with RFC1035.
             */
            tags?: Tags;
        }
        interface InstanceReference {
            /** The URL for a specific instance. @required compute.instancegroups.addInstances/removeInstances */
            instance?: string;
        }
        interface InstancesAddResourcePoliciesRequest {
            /** Resource policies to be added to this instance. */
            resourcePolicies?: string[];
        }
        interface InstancesGetEffectiveFirewallsResponse {
            /** Effective firewalls from firewall policies. */
            firewallPolicys?: InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy[];
            /** Effective firewalls on the instance. */
            firewalls?: Firewall[];
        }
        interface InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
            /** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
            displayName?: string;
            /** [Output Only] The name of the firewall policy. */
            name?: string;
            /** The rules that apply to the network. */
            rules?: FirewallPolicyRule[];
            /** [Output Only] The short name of the firewall policy. */
            shortName?: string;
            /** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
            type?: string;
        }
        interface InstancesRemoveResourcePoliciesRequest {
            /** Resource policies to be removed from this instance. */
            resourcePolicies?: string[];
        }
        interface InstancesScopedList {
            /** [Output Only] A list of instances contained in this scope. */
            instances?: Instance[];
            /** [Output Only] Informational warning which replaces the list of instances when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstancesSetLabelsRequest {
            /** Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels. */
            labelFingerprint?: string;
            labels?: { [P in string]: string };
        }
        interface InstancesSetMachineResourcesRequest {
            /** A list of the type and count of accelerator cards attached to the instance. */
            guestAccelerators?: AcceleratorConfig[];
        }
        interface InstancesSetMachineTypeRequest {
            /** Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones/us-central1-f/machineTypes/n1-standard-1 */
            machineType?: string;
        }
        interface InstancesSetMinCpuPlatformRequest {
            /** Minimum cpu/platform this instance should be started at. */
            minCpuPlatform?: string;
        }
        interface InstancesSetServiceAccountRequest {
            /** Email address of the service account. */
            email?: string;
            /** The list of scopes to be made available for this service account. */
            scopes?: string[];
        }
        interface InstancesStartWithEncryptionKeyRequest {
            /**
             * Array of disks associated with this instance that are protected with a customer-supplied encryption key. In order to start the instance, the disk url and its corresponding key must
             * be provided. If the disk is not protected with a customer-supplied encryption key it should not be specified.
             */
            disks?: CustomerEncryptionKeyProtectedDisk[];
        }
        interface InstanceTemplate {
            /** [Output Only] The creation timestamp for this instance template in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] A unique identifier for this instance template. The server defines this identifier. */
            id?: string;
            /** [Output Only] The resource type, which is always compute#instanceTemplate for instance templates. */
            kind?: string;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The instance properties for this instance template. */
            properties?: InstanceProperties;
            /** [Output Only] The URL for this instance template. The server defines this URL. */
            selfLink?: string;
            /**
             * The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance
             */
            sourceInstance?: string;
            /** The source instance params to use to create this instance template. */
            sourceInstanceParams?: SourceInstanceParams;
        }
        interface InstanceTemplateList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceTemplate resources. */
            items?: InstanceTemplate[];
            /** [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InstanceWithNamedPorts {
            /** [Output Only] The URL of the instance. */
            instance?: string;
            /** [Output Only] The named ports that belong to this instance group. */
            namedPorts?: NamedPort[];
            /** [Output Only] The status of the instance. */
            status?: string;
        }
        interface Int64RangeMatch {
            /** The end of the range (exclusive) in signed long integer format. */
            rangeEnd?: string;
            /** The start of the range (inclusive) in signed long integer format. */
            rangeStart?: string;
        }
        interface Interconnect {
            /**
             * Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the
             * interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
             */
            adminEnabled?: boolean;
            /** [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG. */
            circuitInfos?: InterconnectCircuitInfo[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect. */
            customerName?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] A list of outages expected for this Interconnect. */
            expectedOutages?: InterconnectOutageNotification[];
            /** [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests. */
            googleIpAddress?: string;
            /** [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. */
            googleReferenceId?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect. */
            interconnectAttachments?: string[];
            /**
             * Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated
             * physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
             */
            interconnectType?: string;
            /** [Output Only] Type of the resource. Always compute#interconnect for interconnects. */
            kind?: string;
            /**
             * Type of link requested, which can take one of the following values: - LINK_TYPE_ETHERNET_10G_LR: A 10G Ethernet with LR optics - LINK_TYPE_ETHERNET_100G_LR: A 100G Ethernet with LR
             * optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
             */
            linkType?: string;
            /** URL of the InterconnectLocation object that represents where this connection is to be provisioned. */
            location?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to
             * all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce
             * identity federation.
             */
            nocContactEmail?: string;
            /**
             * [Output Only] The current status of this Interconnect's functionality, which can take one of the following values: - OS_ACTIVE: A valid Interconnect, which is turned up and is ready
             * to use. Attachments may be provisioned on this Interconnect. - OS_UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this
             * Interconnect. - OS_UNDER_MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
             */
            operationalStatus?: string;
            /**
             * [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can
             * be used only for ping tests.
             */
            peerIpAddress?: string;
            /** [Output Only] Number of links actually provisioned in this interconnect. */
            provisionedLinkCount?: number;
            /** Target number of physical links in the link bundle, as requested by the customer. */
            requestedLinkCount?: number;
            /** [Output Only] Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use.
             * Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. -
             * UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
             */
            state?: string;
        }
        interface InterconnectAttachment {
            /** Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER. */
            adminEnabled?: boolean;
            /**
             * Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google
             * Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER_PROVIDER and DEDICATED, and can take one of the following
             * values: - BPS_50M: 50 Mbit/s - BPS_100M: 100 Mbit/s - BPS_200M: 200 Mbit/s - BPS_300M: 300 Mbit/s - BPS_400M: 400 Mbit/s - BPS_500M: 500 Mbit/s - BPS_1G: 1 Gbit/s - BPS_2G: 2 Gbit/s
             * - BPS_5G: 5 Gbit/s - BPS_10G: 10 Gbit/s - BPS_20G: 20 Gbit/s - BPS_50G: 50 Gbit/s
             */
            bandwidth?: string;
            /** This field is not available. */
            candidateIpv6Subnets?: string[];
            /**
             * Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within
             * link-local address space (169.254.0.0/16) and must be /29 or shorter (/28, /27, etc). Google will attempt to select an unused /29 from the supplied candidate prefix(es). The request
             * will fail if all possible /29s are in use on Google's edge. If not supplied, Google will randomly select an unused /29 from all of link-local space.
             */
            candidateSubnets?: string[];
            /** [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
            cloudRouterIpAddress?: string;
            /** [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment. */
            cloudRouterIpv6Address?: string;
            /** This field is not available. */
            cloudRouterIpv6InterfaceId?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
            customerRouterIpAddress?: string;
            /** [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment. */
            customerRouterIpv6Address?: string;
            /** This field is not available. */
            customerRouterIpv6InterfaceId?: string;
            /**
             * [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates
             * that the Dataplane is version 1.
             */
            dataplaneVersion?: number;
            /** An optional description of this resource. */
            description?: string;
            /**
             * Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY_DOMAIN_ANY -
             * AVAILABILITY_DOMAIN_1 - AVAILABILITY_DOMAIN_2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability
             * domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to
             * AVAILABILITY_DOMAIN_ANY.
             */
            edgeAvailabilityDomain?: string;
            /**
             * Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments.
             * Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from,
             * such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs
             * cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use *HA VPN over Cloud Interconnect*, the VLAN attachment must be created with this option.
             */
            encryption?: string;
            /** [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used. */
            googleReferenceId?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** URL of the underlying Interconnect object that this attachment's traffic will traverse through. */
            interconnect?: string;
            /**
             * A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be
             * regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN
             * gateway's IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway's interface 0 is paired to this VLAN attachment, then a regional
             * internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN
             * attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway's IP address is allocated from the regional external IP address pool. Not
             * currently available publicly.
             */
            ipsecInternalAddresses?: string[];
            /** [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments. */
            kind?: string;
            /** Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440. */
            mtu?: number;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS_ACTIVE: The attachment has been
             * turned up and is ready to use. - OS_UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
             */
            operationalStatus?: string;
            /**
             * [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a
             * selected partner. Of the form "XXXXX/region/domain"
             */
            pairingKey?: string;
            /**
             * Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not
             * available for DEDICATED.
             */
            partnerAsn?: string;
            /** Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED. */
            partnerMetadata?: InterconnectAttachmentPartnerMetadata;
            /** [Output Only] Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED. */
            privateInterconnectInfo?: InterconnectAttachmentPrivateInfo;
            /**
             * [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the
             * request body.
             */
            region?: string;
            /**
             * URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect
             * the Interconnect to the network & region within which the Cloud Router is configured.
             */
            router?: string;
            /** [Output Only] Set to true if the resource satisfies the zone separation organization policy constraints and false otherwise. Defaults to false if the field is not present. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at
             * interconnect attachments creation and update interconnect attachment operations.
             */
            stackType?: string;
            /**
             * [Output Only] The current state of this attachment's functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED/PRIVATE, PARTNER, and PARTNER_PROVIDER interconnect
             * attachments, while enum values PENDING_PARTNER, PARTNER_REQUEST_RECEIVED, and PENDING_CUSTOMER are used for only PARTNER and PARTNER_PROVIDER interconnect attachments. This state
             * can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not
             * complete. - PENDING_PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER_REQUEST_RECEIVED: A PARTNER attachment is in the
             * process of provisioning after a PARTNER_PROVIDER attachment was created that references it. - PENDING_CUSTOMER: A PARTNER or PARTNER_PROVIDER attachment that is waiting for a
             * customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the associated Interconnect was removed, or because the
             * other side of a Partner attachment was deleted.
             */
            state?: string;
            /**
             * The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a
             * Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
             */
            type?: string;
            /** The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4094. Only specified at creation time. */
            vlanTag8021q?: number;
        }
        interface InterconnectAttachmentAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InterconnectAttachmentsScopedList resources. */
            items?: { [P in string]: InterconnectAttachmentsScopedList };
            /** [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InterconnectAttachmentList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InterconnectAttachment resources. */
            items?: InterconnectAttachment[];
            /** [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InterconnectAttachmentPartnerMetadata {
            /**
             * Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner's portal. For instance "Chicago 1". This value may be validated to match approved
             * Partner values.
             */
            interconnectName?: string;
            /** Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values. */
            partnerName?: string;
            /**
             * URL of the Partner's portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match
             * approved Partner values.
             */
            portalUrl?: string;
        }
        interface InterconnectAttachmentPrivateInfo {
            /** [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region. */
            tag8021q?: number;
        }
        interface InterconnectAttachmentsScopedList {
            /** A list of interconnect attachments contained in this scope. */
            interconnectAttachments?: InterconnectAttachment[];
            /** Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InterconnectCircuitInfo {
            /** Customer-side demarc ID for this circuit. */
            customerDemarcId?: string;
            /** Google-assigned unique ID for this circuit. Assigned at circuit turn-up. */
            googleCircuitId?: string;
            /** Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA. */
            googleDemarcId?: string;
        }
        interface InterconnectDiagnostics {
            /**
             * A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty
             * when the Interconnect is not bundled.
             */
            arpCaches?: InterconnectDiagnosticsARPEntry[];
            /** The aggregation type of the bundle interface. */
            bundleAggregationType?: string;
            /** The operational status of the bundle interface. */
            bundleOperationalStatus?: string;
            /** A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect. */
            links?: InterconnectDiagnosticsLinkStatus[];
            /** The MAC address of the Interconnect's bundle interface. */
            macAddress?: string;
        }
        interface InterconnectDiagnosticsARPEntry {
            /** The IP address of this ARP neighbor. */
            ipAddress?: string;
            /** The MAC address of this ARP neighbor. */
            macAddress?: string;
        }
        interface InterconnectDiagnosticsLinkLACPStatus {
            /** System ID of the port on Google's side of the LACP exchange. */
            googleSystemId?: string;
            /** System ID of the port on the neighbor's side of the LACP exchange. */
            neighborSystemId?: string;
            /**
             * The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within
             * the bundle. This means that the rest of the object should be empty.
             */
            state?: string;
        }
        interface InterconnectDiagnosticsLinkOpticalPower {
            /**
             * The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed
             * a warning threshold. - LOW_WARNING: The value has crossed below the low warning threshold. - HIGH_WARNING: The value has crossed above the high warning threshold. - LOW_ALARM: The
             * value has crossed below the low alarm threshold. - HIGH_ALARM: The value has crossed above the high alarm threshold.
             */
            state?: string;
            /**
             * Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In
             * general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
             */
            value?: number;
        }
        interface InterconnectDiagnosticsLinkStatus {
            /** A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled */
            arpCaches?: InterconnectDiagnosticsARPEntry[];
            /** The unique ID for this link assigned during turn up by Google. */
            circuitId?: string;
            /** The Demarc address assigned by Google and provided in the LoA. */
            googleDemarc?: string;
            lacpStatus?: InterconnectDiagnosticsLinkLACPStatus;
            /** The operational status of the link. */
            operationalStatus?: string;
            /** An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level. */
            receivingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower;
            /** An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level. */
            transmittingOpticalPower?: InterconnectDiagnosticsLinkOpticalPower;
        }
        interface InterconnectList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Interconnect resources. */
            items?: Interconnect[];
            /** [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InterconnectLocation {
            /** [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character. */
            address?: string;
            /**
             * [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability
             * zone. Example: "zone1" or "zone2".
             */
            availabilityZone?: string;
            /** [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: "Chicago, IL", "Amsterdam, Netherlands". */
            city?: string;
            /** [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA_PAC - EUROPE - NORTH_AMERICA - SOUTH_AMERICA */
            continent?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] An optional description of the resource. */
            description?: string;
            /** [Output Only] The name of the provider for this facility (e.g., EQUINIX). */
            facilityProvider?: string;
            /** [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1). */
            facilityProviderFacilityId?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations. */
            kind?: string;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb). */
            peeringdbFacilityId?: string;
            /**
             * [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud
             * regions.
             */
            regionInfos?: InterconnectLocationRegionInfo[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning
             * new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects.
             */
            status?: string;
            /** [Output Only] Set to true for locations that support physical zone separation. Defaults to false if the field is not present. */
            supportsPzs?: boolean;
        }
        interface InterconnectLocationList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InterconnectLocation resources. */
            items?: InterconnectLocation[];
            /** [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface InterconnectLocationRegionInfo {
            /** Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region. */
            expectedRttMs?: string;
            /** Identifies the network presence of this location. */
            locationPresence?: string;
            /** URL for the region of this location. */
            region?: string;
        }
        interface InterconnectOutageNotification {
            /** If issue_type is IT_PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected. */
            affectedCircuits?: string[];
            /** A description about the purpose of the outage. */
            description?: string;
            /** Scheduled end time for the outage (milliseconds since Unix epoch). */
            endTime?: string;
            /**
             * Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified
             * window. - PARTIAL_OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with "IT_"
             * have been deprecated in favor of the unprefixed values.
             */
            issueType?: string;
            /** Unique identifier for this outage notification. */
            name?: string;
            /**
             * The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been
             * deprecated in favor of GOOGLE.
             */
            source?: string;
            /** Scheduled start time for the outage (milliseconds since Unix epoch). */
            startTime?: string;
            /**
             * State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See
             * start_time and end_time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage
             * associated with this notification is complete. Note that the versions of this enum prefixed with "NS_" have been deprecated in favor of the unprefixed values.
             */
            state?: string;
        }
        interface InterconnectsGetDiagnosticsResponse {
            result?: InterconnectDiagnostics;
        }
        interface License {
            /** [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee. */
            chargesUseFee?: boolean;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional textual description of the resource; provided by the client when the resource is created. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#license for licenses. */
            kind?: string;
            /** [Output Only] The unique code used to attach this license to images, snapshots, and disks. */
            licenseCode?: string;
            /** Name of the resource. The name must be 1-63 characters long and comply with RFC1035. */
            name?: string;
            resourceRequirements?: LicenseResourceRequirements;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk. */
            transferable?: boolean;
        }
        interface LicenseCode {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] Description of this License Code. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#licenseCode for licenses. */
            kind?: string;
            /** [Output Only] URL and description aliases of Licenses with the same License Code. */
            licenseAlias?: LicenseCodeLicenseAlias[];
            /** [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer. */
            name?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Current state of this License Code. */
            state?: string;
            /** [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred. */
            transferable?: boolean;
        }
        interface LicenseCodeLicenseAlias {
            /** [Output Only] Description of this License Code. */
            description?: string;
            /** [Output Only] URL of license corresponding to this License Code. */
            selfLink?: string;
        }
        interface LicenseResourceCommitment {
            /** The number of licenses purchased. */
            amount?: string;
            /** Specifies the core range of the instance for which this license applies. */
            coresPerLicense?: string;
            /** Any applicable license URI. */
            license?: string;
        }
        interface LicenseResourceRequirements {
            /** Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start. */
            minGuestCpuCount?: number;
            /** Minimum memory required to use the Instance. Enforced at Instance creation and Instance start. */
            minMemoryMb?: number;
        }
        interface LicensesListResponse {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of License resources. */
            items?: License[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface LocalDisk {
            /** Specifies the number of such disks. */
            diskCount?: number;
            /** Specifies the size of the disk in base-2 GB. */
            diskSizeGb?: number;
            /**
             * Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and
             * not its URL.
             */
            diskType?: string;
        }
        interface LocalizedMessage {
            /** The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX" */
            locale?: string;
            /** The localized error message in the above locale. */
            message?: string;
        }
        interface LocationPolicy {
            /** Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones/us-central1-a. */
            locations?: { [P in string]: LocationPolicyLocation };
            /** Strategy for distributing VMs across zones in a region. */
            targetShape?: string;
        }
        interface LocationPolicyLocation {
            /** Constraints that the caller requires on the result distribution in this zone. */
            constraints?: LocationPolicyLocationConstraints;
            /** Preference for a given location. Set to either ALLOW or DENY. */
            preference?: string;
        }
        interface LocationPolicyLocationConstraints {
            /** Maximum number of items that are allowed to be placed in this zone. The value must be non-negative. */
            maxCount?: number;
        }
        interface LogConfig {
            /** This is deprecated and has no effect. Do not use. */
            cloudAudit?: LogConfigCloudAuditOptions;
            /** This is deprecated and has no effect. Do not use. */
            counter?: LogConfigCounterOptions;
            /** This is deprecated and has no effect. Do not use. */
            dataAccess?: LogConfigDataAccessOptions;
        }
        interface LogConfigCloudAuditOptions {
            /** This is deprecated and has no effect. Do not use. */
            authorizationLoggingOptions?: AuthorizationLoggingOptions;
            /** This is deprecated and has no effect. Do not use. */
            logName?: string;
        }
        interface LogConfigCounterOptions {
            /** This is deprecated and has no effect. Do not use. */
            customFields?: LogConfigCounterOptionsCustomField[];
            /** This is deprecated and has no effect. Do not use. */
            field?: string;
            /** This is deprecated and has no effect. Do not use. */
            metric?: string;
        }
        interface LogConfigCounterOptionsCustomField {
            /** This is deprecated and has no effect. Do not use. */
            name?: string;
            /** This is deprecated and has no effect. Do not use. */
            value?: string;
        }
        interface LogConfigDataAccessOptions {
            /** This is deprecated and has no effect. Do not use. */
            logMode?: string;
        }
        interface MachineImage {
            /** [Output Only] The creation timestamp for this machine image in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process. */
            guestFlush?: boolean;
            /** [Output Only] A unique identifier for this machine image. The server defines this identifier. */
            id?: string;
            /** [Output Only] Properties of source instance */
            instanceProperties?: InstanceProperties;
            /** [Output Only] The resource type, which is always compute#machineImage for machine image. */
            kind?: string;
            /**
             * Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image using a customer-supplied key, you must provide the same key if you use the
             * machine image later. For example, you must provide the encryption key when you create an instance from the encrypted machine image in a future request. Customer-supplied encryption
             * keys do not protect access to metadata of the machine image. If you do not provide an encryption key when creating the machine image, then the machine image will be encrypted using
             * an automatically generated key and you do not need to provide a key to use the machine image later.
             */
            machineImageEncryptionKey?: CustomerEncryptionKey;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** An array of Machine Image specific properties for disks attached to the source instance */
            savedDisks?: SavedDisk[];
            /** [Output Only] The URL for this machine image. The server defines this URL. */
            selfLink?: string;
            /** [Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key. */
            sourceDiskEncryptionKeys?: SourceDiskEncryptionKey[];
            /**
             * The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance - projects/project/zones/zone/instances/instance
             */
            sourceInstance?: string;
            /** [Output Only] DEPRECATED: Please use instance_properties instead for source instance related properties. New properties will not be added to this field. */
            sourceInstanceProperties?: SourceInstanceProperties;
            /** [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING. */
            status?: string;
            /** The regional or multi-regional Cloud Storage bucket location where the machine image is stored. */
            storageLocations?: string[];
            /** [Output Only] Total size of the storage used by the machine image. */
            totalStorageBytes?: string;
        }
        interface MachineImageList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of MachineImage resources. */
            items?: MachineImage[];
            /** [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface MachineType {
            /** [Output Only] A list of accelerator configurations assigned to this machine type. */
            accelerators?: Array<{
                /** Number of accelerator cards exposed to the guest. */
                guestAcceleratorCount?: number;
                /** The accelerator type resource name, not a full URL, e.g. 'nvidia-tesla-k80'. */
                guestAcceleratorType?: string;
            }>;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The deprecation status associated with this machine type. Only applicable if the machine type is unavailable. */
            deprecated?: DeprecationStatus;
            /** [Output Only] An optional textual description of the resource. */
            description?: string;
            /** [Output Only] The number of virtual CPUs that are available to the instance. */
            guestCpus?: number;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Deprecated] This property is deprecated and will never be populated with any relevant values. */
            imageSpaceGb?: number;
            /** [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information. */
            isSharedCpu?: boolean;
            /** [Output Only] The type of the resource. Always compute#machineType for machine types. */
            kind?: string;
            /** [Output Only] Maximum persistent disks allowed. */
            maximumPersistentDisks?: number;
            /** [Output Only] Maximum total persistent disks size (GB) allowed. */
            maximumPersistentDisksSizeGb?: string;
            /** [Output Only] The amount of physical memory available to the instance, defined in MB. */
            memoryMb?: number;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] A list of extended scratch disks assigned to the instance. */
            scratchDisks?: Array<{
                /** Size of the scratch disk, defined in GB. */
                diskGb?: number;
            }>;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] The name of the zone where the machine type resides, such as us-central1-a. */
            zone?: string;
        }
        interface MachineTypeAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of MachineTypesScopedList resources. */
            items?: { [P in string]: MachineTypesScopedList };
            /** [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface MachineTypeList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of MachineType resources. */
            items?: MachineType[];
            /** [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface MachineTypesScopedList {
            /** [Output Only] A list of machine types contained in this scope. */
            machineTypes?: MachineType[];
            /** [Output Only] An informational warning that appears when the machine types list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ManagedInstance {
            /**
             * [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does
             * not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again
             * until it is successful. - CREATING_WITHOUT_RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does
             * not try again and the group's targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is
             * permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target
             * pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The managed instance group is applying configuration
             * changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance
             * group has created the instance and it is in the process of being verified.
             */
            currentAction?: string;
            /** [Output only] The unique identifier for this resource. This field is empty when instance does not exist. */
            id?: string;
            /** [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created. */
            instance?: string;
            /** [Output Only] Health state of the instance per health-check. */
            instanceHealth?: ManagedInstanceInstanceHealth[];
            /** [Output Only] The status of the instance. This field is empty when the instance does not exist. */
            instanceStatus?: string;
            /** [Output Only] Information about the last attempt to create or delete the instance. */
            lastAttempt?: ManagedInstanceLastAttempt;
            /** [Output Only] Preserved state applied from per-instance config for this instance. */
            preservedStateFromConfig?: PreservedState;
            /** [Output Only] Preserved state generated based on stateful policy for this instance. */
            preservedStateFromPolicy?: PreservedState;
            /** [Output Only] Intended version of this instance. */
            version?: ManagedInstanceVersion;
        }
        interface ManagedInstanceInstanceHealth {
            /** [Output Only] The current detailed instance health state. */
            detailedHealthState?: string;
            /** [Output Only] The URL for the health check that verifies whether the instance is healthy. */
            healthCheck?: string;
        }
        interface ManagedInstanceLastAttempt {
            /** [Output Only] Encountered errors during the last attempt to create or delete the instance. */
            errors?: {
                /** [Output Only] The array of errors encountered while processing this operation. */
                errors?: Array<{
                    /** [Output Only] The error type identifier for this error. */
                    code?: string;
                    /**
                     * [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the
                     * error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
                     */
                    errorDetails?: Array<{
                        errorInfo?: ErrorInfo;
                        help?: Help;
                        localizedMessage?: LocalizedMessage;
                        quotaInfo?: QuotaExceededInfo;
                    }>;
                    /** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
                    location?: string;
                    /** [Output Only] An optional, human-readable error message. */
                    message?: string;
                }>;
            };
        }
        interface ManagedInstanceVersion {
            /** [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }. */
            instanceTemplate?: string;
            /** [Output Only] Name of the version. */
            name?: string;
        }
        interface Metadata {
            /**
             * Specifies a fingerprint for this request, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
             */
            fingerprint?: string;
            /** Array of key/value pairs. The total size of all keys and values must be less than 512 KB. */
            items?: Array<{
                /**
                 * Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata
                 * server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
                 */
                key?: string;
                /**
                 * Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is
                 * that their size must be less than or equal to 262144 bytes (256 KiB).
                 */
                value?: string;
            }>;
            /** [Output Only] Type of the resource. Always compute#metadata for metadata. */
            kind?: string;
        }
        interface MetadataFilter {
            /** The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries. */
            filterLabels?: MetadataFilterLabelMatch[];
            /**
             * Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH_ANY: at least
             * one of the filterLabels must have a matching label in the provided metadata. - MATCH_ALL: all filterLabels must have matching labels in the provided metadata.
             */
            filterMatchCriteria?: string;
        }
        interface MetadataFilterLabelMatch {
            /** Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long. */
            name?: string;
            /** The value of the label must match the specified value. value can have a maximum length of 1024 characters. */
            value?: string;
        }
        interface NamedPort {
            /** The name for this named port. The name must be 1-63 characters long, and comply with RFC1035. */
            name?: string;
            /** The port number, which can be a value between 1 and 65535. */
            port?: number;
        }
        interface Network {
            /**
             * Must be set to create a VPC network. If not set, a legacy network is created. When set to true, the VPC network is created in auto mode. When set to false, the VPC network is
             * created in custom mode. An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges. For custom
             * mode VPC networks, you can add subnets using the subnetworks insert method.
             */
            autoCreateSubnetworks?: boolean;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this field when you create the resource. */
            description?: string;
            /** Enable ULA internal ipv6 on this network. Enabling this feature will assign a /48 from google defined ULA prefix fd20::/20. . */
            enableUlaInternalIpv6?: boolean;
            /** [Output Only] URL of the firewall policy the network is associated with. */
            firewallPolicy?: string;
            /** [Output Only] The gateway address for default routing out of the network, selected by GCP. */
            gatewayIPv4?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * When enabling ula internal ipv6, caller optionally can specify the /48 range they want from the google defined ULA prefix fd20::/20. The input must be a valid /48 ULA IPv6 address
             * and must be within the fd20::/20. Operation will fail if the speficied /48 is already in used by another resource. If the field is not speficied, then a /48 range will be randomly
             * allocated from fd20::/20 and returned via this field. .
             */
            internalIpv6Range?: string;
            /**
             * Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0/16.
             * Provided by the client when the network is created.
             */
            IPv4Range?: string;
            /** [Output Only] Type of the resource. Always compute#network for networks. */
            kind?: string;
            /**
             * Maximum Transmission Unit in bytes. The minimum value for this field is 1300 and the maximum value is 8896. The suggested value is 1500, which is the default MTU used on the
             * Internet, or 8896 if you want to use Jumbo frames. If unspecified, the value defaults to 1460.
             */
            mtu?: number;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last
             * character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
             */
            name?: string;
            /** The network firewall policy enforcement order. Can be either AFTER_CLASSIC_FIREWALL or BEFORE_CLASSIC_FIREWALL. Defaults to AFTER_CLASSIC_FIREWALL if the field is not specified. */
            networkFirewallPolicyEnforcementOrder?: string;
            /** [Output Only] A list of network peerings for the resource. */
            peerings?: NetworkPeering[];
            /** The network-level routing configuration for this network. Used by Cloud Router to determine what type of network-wide routing behavior to enforce. */
            routingConfig?: NetworkRoutingConfig;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Server-defined URL for this resource with the resource id. */
            selfLinkWithId?: string;
            /** [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network. */
            subnetworks?: string[];
        }
        interface NetworkAttachment {
            /** [Output Only] An array of connections for all the producers connected to this network attachment. */
            connectionEndpoints?: NetworkAttachmentConnectedEndpoint[];
            connectionPreference?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * [Output Only] Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in
             * order to patch.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
            id?: string;
            /** [Output Only] Type of the resource. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] The URL of the network which the Network Attachment belongs to. */
            network?: string;
            /** Projects that are allowed to connect to this network attachment. The project can be specified using its id or number. */
            producerAcceptLists?: string[];
            /** Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number. */
            producerRejectLists?: string[];
            /**
             * [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It
             * is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Server-defined URL for this resource's resource id. */
            selfLinkWithId?: string;
            /** An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment. */
            subnetworks?: string[];
        }
        interface NetworkAttachmentAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkAttachmentsScopedList resources. */
            items?: { [P in string]: NetworkAttachmentsScopedList };
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkAttachmentConnectedEndpoint {
            /** The IP address assigned to the producer instance network interface. This value will be a range in case of Serverless. */
            ipAddress?: string;
            /** The project id or number of the interface to which the IP was assigned. */
            projectIdOrNum?: string;
            /** Alias IP ranges from the same subnetwork */
            secondaryIpCidrRanges?: string[];
            /** The status of a connected endpoint to this network attachment. */
            status?: string;
            /** The subnetwork used to assign the IP to the producer instance network interface. */
            subnetwork?: string;
        }
        interface NetworkAttachmentList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkAttachment resources. */
            items?: NetworkAttachment[];
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkAttachmentsScopedList {
            /** A list of NetworkAttachments contained in this scope. */
            networkAttachments?: NetworkAttachment[];
            /** Informational warning which replaces the list of network attachments when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEdgeSecurityService {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a
             * NetworkEdgeSecurityService. An up-to-date fingerprint must be provided in order to update the NetworkEdgeSecurityService, otherwise the request will fail with error 412
             * conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a NetworkEdgeSecurityService.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output only] Type of the resource. Always compute#networkEdgeSecurityService for NetworkEdgeSecurityServices */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] URL of the region where the resource resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            region?: string;
            /** The resource URL for the network edge security service associated with this network edge security service. */
            securityPolicy?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Server-defined URL for this resource with the resource id. */
            selfLinkWithId?: string;
        }
        interface NetworkEdgeSecurityServiceAggregatedList {
            etag?: string;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkEdgeSecurityServicesScopedList resources. */
            items?: { [P in string]: NetworkEdgeSecurityServicesScopedList };
            /** [Output Only] Type of resource. Always compute#networkEdgeSecurityServiceAggregatedList for lists of Network Edge Security Services. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEdgeSecurityServicesScopedList {
            /** A list of NetworkEdgeSecurityServices contained in this scope. */
            networkEdgeSecurityServices?: NetworkEdgeSecurityService[];
            /** Informational warning which replaces the list of security policies when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEndpoint {
            /** Metadata defined as annotations on the network endpoint. */
            annotations?: { [P in string]: string };
            /** Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network_endpoint_type is NON_GCP_FQDN_PORT. */
            fqdn?: string;
            /**
             * The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE_VM_IP_PORT. The instance must be in the same zone of network
             * endpoint group. The name must be 1-63 characters long, and comply with RFC1035.
             */
            instance?: string;
            /**
             * Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not
             * specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used.
             */
            ipAddress?: string;
            /** Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used. */
            port?: number;
        }
        interface NetworkEndpointGroup {
            /** Metadata defined as annotations on the network endpoint group. */
            annotations?: { [P in string]: string };
            /** Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set. */
            appEngine?: NetworkEndpointGroupAppEngine;
            /** Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set. */
            cloudFunction?: NetworkEndpointGroupCloudFunction;
            /** Only valid when networkEndpointType is "SERVERLESS". Only one of cloudRun, appEngine or cloudFunction may be set. */
            cloudRun?: NetworkEndpointGroupCloudRun;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** The default port used if the port number is not specified in the network endpoint. */
            defaultPort?: number;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group. */
            kind?: string;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The URL of the network to which all network endpoints in the NEG belong. Uses "default" project network if unspecified. */
            network?: string;
            /**
             * Type of network endpoints in this network endpoint group. Can be one of GCE_VM_IP, GCE_VM_IP_PORT, NON_GCP_PRIVATE_IP_PORT, INTERNET_FQDN_PORT, INTERNET_IP_PORT, SERVERLESS,
             * PRIVATE_SERVICE_CONNECT.
             */
            networkEndpointType?: string;
            pscData?: NetworkEndpointGroupPscData;
            /** The target service url used to set up private service connection to a Google API or a PSC Producer Service Attachment. An example value is: "asia-northeast3-cloudkms.googleapis.com" */
            pscTargetService?: string;
            /** [Output Only] The URL of the region where the network endpoint group is located. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output only] Number of network endpoints in the network endpoint group. */
            size?: number;
            /** Optional URL of the subnetwork to which all network endpoints in the NEG belong. */
            subnetwork?: string;
            /** [Output Only] The URL of the zone where the network endpoint group is located. */
            zone?: string;
        }
        interface NetworkEndpointGroupAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkEndpointGroupsScopedList resources. */
            items?: { [P in string]: NetworkEndpointGroupsScopedList };
            /** [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEndpointGroupAppEngine {
            /** Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: "default", "my-service". */
            service?: string;
            /**
             * A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint
             * Groups and backend services. For example, the request URLs "foo1-dot-appname.appspot.com/v1" and "foo1-dot-appname.appspot.com/v2" can be backed by the same Serverless NEG with URL
             * mask "<service>-dot-appname.appspot.com/<version>". The URL mask will parse them to { service = "foo1", version = "v1" } and { service = "foo1", version = "v2" } respectively.
             */
            urlMask?: string;
            /** Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: "v1", "v2". */
            version?: string;
        }
        interface NetworkEndpointGroupCloudFunction {
            /** A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: "func1". */
            function?: string;
            /**
             * A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend
             * services. For example, request URLs " mydomain.com/function1" and "mydomain.com/function2" can be backed by the same Serverless NEG with URL mask "/<function>". The URL mask will
             * parse them to { function = "function1" } and { function = "function2" } respectively.
             */
            urlMask?: string;
        }
        interface NetworkEndpointGroupCloudRun {
            /** Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: "run-service". */
            service?: string;
            /**
             * Optional Cloud Run tag represents the "named-revision" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035.
             * Example value: "revision-0010".
             */
            tag?: string;
            /**
             * A template to parse <service> and <tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and
             * backend services. For example, request URLs "foo1.domain.com/bar1" and "foo1.domain.com/bar2" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask
             * "<tag>.domain.com/<service>". The URL mask will parse them to { service="bar1", tag="foo1" } and { service="bar2", tag="foo2" } respectively.
             */
            urlMask?: string;
        }
        interface NetworkEndpointGroupList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkEndpointGroup resources. */
            items?: NetworkEndpointGroup[];
            /** [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEndpointGroupPscData {
            /** [Output Only] Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB. */
            consumerPscAddress?: string;
            /** [Output Only] The PSC connection id of the PSC Network Endpoint Group Consumer. */
            pscConnectionId?: string;
            /** [Output Only] The connection status of the PSC Forwarding Rule. */
            pscConnectionStatus?: string;
        }
        interface NetworkEndpointGroupsAttachEndpointsRequest {
            /** The list of network endpoints to be attached. */
            networkEndpoints?: NetworkEndpoint[];
        }
        interface NetworkEndpointGroupsDetachEndpointsRequest {
            /** The list of network endpoints to be detached. */
            networkEndpoints?: NetworkEndpoint[];
        }
        interface NetworkEndpointGroupsListEndpointsRequest {
            /**
             * Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don't specify this parameter, the health status of network
             * endpoints will not be provided.
             */
            healthStatus?: string;
        }
        interface NetworkEndpointGroupsListNetworkEndpoints {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NetworkEndpointWithHealthStatus resources. */
            items?: NetworkEndpointWithHealthStatus[];
            /** [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEndpointGroupsScopedList {
            /** [Output Only] The list of network endpoint groups that are contained in this scope. */
            networkEndpointGroups?: NetworkEndpointGroup[];
            /** [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkEndpointWithHealthStatus {
            /** [Output only] The health status of network endpoint; */
            healths?: HealthStatusForNetworkEndpoint[];
            /** [Output only] The network endpoint; */
            networkEndpoint?: NetworkEndpoint;
        }
        interface NetworkInterface {
            /**
             * An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have
             * no external internet access.
             */
            accessConfigs?: AccessConfig[];
            /** An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks. */
            aliasIpRanges?: AliasIpRange[];
            /**
             * Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be
             * provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint
             * is out of date.
             */
            fingerprint?: string;
            /** The prefix length of the primary internal IPv6 range. */
            internalIpv6PrefixLength?: number;
            /**
             * An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this
             * instance will have no external IPv6 Internet access.
             */
            ipv6AccessConfigs?: AccessConfig[];
            /**
             * [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is
             * IPV4_IPV6.
             */
            ipv6AccessType?: string;
            /** An IPv6 internal network address for this network interface. */
            ipv6Address?: string;
            /** [Output Only] Type of the resource. Always compute#networkInterface for network interfaces. */
            kind?: string;
            /**
             * [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7.
             * The default interface value is nic0.
             */
            name?: string;
            /**
             * URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is
             * used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is
             * inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: -
             * https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
             */
            network?: string;
            /**
             * The URL of the network attachment that this interface should connect to in the following format:
             * projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}.
             */
            networkAttachment?: string;
            /** An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system. */
            networkIP?: string;
            /** The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet. */
            nicType?: string;
            /** The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users. */
            queueCount?: number;
            /**
             * The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at instance
             * creation and update network interface operations.
             */
            stackType?: string;
            /**
             * The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the
             * subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or
             * partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork -
             * regions/region/subnetworks/subnetwork
             */
            subnetwork?: string;
        }
        interface NetworkList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Network resources. */
            items?: Network[];
            /** [Output Only] Type of resource. Always compute#networkList for lists of networks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NetworkPeering {
            /**
             * This field will be deprecated soon. Use the exchange_subnet_routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered
             * networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is
             * ACTIVE.
             */
            autoCreateRoutes?: boolean;
            /**
             * Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will
             * automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
             */
            exchangeSubnetRoutes?: boolean;
            /** Whether to export the custom routes to peer network. The default value is false. */
            exportCustomRoutes?: boolean;
            /**
             * Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not
             * controlled by this field.
             */
            exportSubnetRoutesWithPublicIp?: boolean;
            /** Whether to import the custom routes from peer network. The default value is false. */
            importCustomRoutes?: boolean;
            /** Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field. */
            importSubnetRoutesWithPublicIp?: boolean;
            /**
             * Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular
             * expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            name?: string;
            /**
             * The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed
             * that the peer network is in the same project as the current network.
             */
            network?: string;
            /** Maximum Transmission Unit in bytes. */
            peerMtu?: number;
            /** Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY. */
            stackType?: string;
            /** [Output Only] State for the peering, either `ACTIVE` or `INACTIVE`. The peering is `ACTIVE` when there's a matching configuration in the peer network. */
            state?: string;
            /** [Output Only] Details about the current state of the peering. */
            stateDetails?: string;
        }
        interface NetworkPerformanceConfig {
            totalEgressBandwidthTier?: string;
        }
        interface NetworkRoutingConfig {
            /**
             * The network-wide routing mode to use. If set to REGIONAL, this network's Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If
             * set to GLOBAL, this network's Cloud Routers will advertise routes with all subnets of this network, across regions.
             */
            routingMode?: string;
        }
        interface NetworksAddPeeringRequest {
            /**
             * This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between
             * peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering
             * state is ACTIVE.
             */
            autoCreateRoutes?: boolean;
            /** Name of the peering, which should conform to RFC1035. */
            name?: string;
            /**
             * Network peering parameters. In order to specify route policies for peering using import and export custom routes, you must specify all peering related parameters (name, peer
             * network, exchange_subnet_routes) in the network_peering field. The corresponding fields in NetworksAddPeeringRequest will be deprecated soon.
             */
            networkPeering?: NetworkPeering;
            /**
             * URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed
             * that the peer network is in the same project as the current network.
             */
            peerNetwork?: string;
        }
        interface NetworksGetEffectiveFirewallsResponse {
            /** Effective firewalls from firewall policy. */
            firewallPolicys?: NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy[];
            /** Effective firewalls on the network. */
            firewalls?: Firewall[];
        }
        interface NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
            /** [Output Only] Deprecated, please use short name instead. The display name of the firewall policy. */
            displayName?: string;
            /** [Output Only] The name of the firewall policy. */
            name?: string;
            /** The rules that apply to the network. */
            rules?: FirewallPolicyRule[];
            /** [Output Only] The short name of the firewall policy. */
            shortName?: string;
            /** [Output Only] The type of the firewall policy. */
            type?: string;
        }
        interface NetworksRemovePeeringRequest {
            /** Name of the peering, which should conform to RFC1035. */
            name?: string;
        }
        interface NetworksUpdatePeeringRequest {
            networkPeering?: NetworkPeering;
        }
        interface NodeGroup {
            /** Specifies how autoscaling should behave. */
            autoscalingPolicy?: NodeGroupAutoscalingPolicy;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The type of the resource. Always compute#nodeGroup for node group. */
            kind?: string;
            /**
             * An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup
             * overrides any location_hint present in the NodeTemplate.
             */
            locationHint?: string;
            /**
             * Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is
             * DEFAULT. For more information, see Maintenance policies.
             */
            maintenancePolicy?: string;
            maintenanceWindow?: NodeGroupMaintenanceWindow;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the
             * name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following
             * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** URL of the node template to create the node group from. */
            nodeTemplate?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Share-settings for the node group */
            shareSettings?: ShareSettings;
            /** [Output Only] The total number of nodes in the node group. */
            size?: number;
            status?: string;
            /** [Output Only] The name of the zone where the node group resides, such as us-central1-a. */
            zone?: string;
        }
        interface NodeGroupAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeGroupsScopedList resources. */
            items?: { [P in string]: NodeGroupsScopedList };
            /** [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeGroupAutoscalingPolicy {
            /** The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100. */
            maxNodes?: number;
            /** The minimum number of nodes that the group should have. */
            minNodes?: number;
            /** The autoscaling mode. Set to one of: ON, OFF, or ONLY_SCALE_OUT. For more information, see Autoscaler modes. */
            mode?: string;
        }
        interface NodeGroupList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeGroup resources. */
            items?: NodeGroup[];
            /** [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeGroupMaintenanceWindow {
            /** [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario. */
            maintenanceDuration?: Duration;
            /** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
            startTime?: string;
        }
        interface NodeGroupNode {
            /** Accelerators for this node. */
            accelerators?: AcceleratorConfig[];
            /** Node resources that are reserved by all instances. */
            consumedResources?: InstanceConsumptionInfo;
            /** CPU overcommit. */
            cpuOvercommitType?: string;
            /** Local disk configurations. */
            disks?: LocalDisk[];
            /** Instance data that shows consumed resources on the node. */
            instanceConsumptionData?: InstanceConsumptionData[];
            /** Instances scheduled on this node. */
            instances?: string[];
            /** The name of the node. */
            name?: string;
            /** The type of this node. */
            nodeType?: string;
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** Binding properties for the physical server. */
            serverBinding?: ServerBinding;
            /** Server ID associated with this node. */
            serverId?: string;
            status?: string;
            /** Total amount of available resources on the node. */
            totalResources?: InstanceConsumptionInfo;
        }
        interface NodeGroupsAddNodesRequest {
            /** Count of additional nodes to be added to the node group. */
            additionalNodeCount?: number;
        }
        interface NodeGroupsDeleteNodesRequest {
            /** Names of the nodes to delete. */
            nodes?: string[];
        }
        interface NodeGroupsListNodes {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Node resources. */
            items?: NodeGroupNode[];
            /** [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeGroupsScopedList {
            /** [Output Only] A list of node groups contained in this scope. */
            nodeGroups?: NodeGroup[];
            /** [Output Only] An informational warning that appears when the nodeGroup list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeGroupsSetNodeTemplateRequest {
            /** Full or partial URL of the node template resource to be updated for this node group. */
            nodeTemplate?: string;
        }
        interface NodeTemplate {
            accelerators?: AcceleratorConfig[];
            /** CPU overcommit. */
            cpuOvercommitType?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            disks?: LocalDisk[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The type of the resource. Always compute#nodeTemplate for node templates. */
            kind?: string;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the
             * name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following
             * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** Labels to use for node affinity, which will be used in instance scheduling. */
            nodeAffinityLabels?: { [P in string]: string };
            /** The node type to use for nodes group that are created from this template. */
            nodeType?: string;
            /**
             * The flexible properties of the desired node type. Node groups that use this node template will create nodes of a type that matches these properties. This field is mutually exclusive
             * with the node_type property; you can only define one or the other, but not both.
             */
            nodeTypeFlexibility?: NodeTemplateNodeTypeFlexibility;
            /** [Output Only] The name of the region where the node template resides, such as us-central1. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * Sets the binding properties for the physical server. Valid values include: - *[Default]* RESTART_NODE_ON_ANY_SERVER: Restarts VMs on any available physical server -
             * RESTART_NODE_ON_MINIMAL_SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
             */
            serverBinding?: ServerBinding;
            /** [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING. */
            status?: string;
            /** [Output Only] An optional, human-readable explanation of the status. */
            statusMessage?: string;
        }
        interface NodeTemplateAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeTemplatesScopedList resources. */
            items?: { [P in string]: NodeTemplatesScopedList };
            /** [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeTemplateList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeTemplate resources. */
            items?: NodeTemplate[];
            /** [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeTemplateNodeTypeFlexibility {
            cpus?: string;
            localSsd?: string;
            memory?: string;
        }
        interface NodeTemplatesScopedList {
            /** [Output Only] A list of node templates contained in this scope. */
            nodeTemplates?: NodeTemplate[];
            /** [Output Only] An informational warning that appears when the node templates list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeType {
            /** [Output Only] The CPU platform used by this node type. */
            cpuPlatform?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The deprecation status associated with this node type. */
            deprecated?: DeprecationStatus;
            /** [Output Only] An optional textual description of the resource. */
            description?: string;
            /** [Output Only] The number of virtual CPUs that are available to the node type. */
            guestCpus?: number;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The type of the resource. Always compute#nodeType for node types. */
            kind?: string;
            /** [Output Only] Local SSD available to the node type, defined in GB. */
            localSsdGb?: number;
            /** [Output Only] The amount of physical memory available to the node type, defined in MB. */
            memoryMb?: number;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] The name of the zone where the node type resides, such as us-central1-a. */
            zone?: string;
        }
        interface NodeTypeAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeTypesScopedList resources. */
            items?: { [P in string]: NodeTypesScopedList };
            /** [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeTypeList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NodeType resources. */
            items?: NodeType[];
            /** [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NodeTypesScopedList {
            /** [Output Only] A list of node types contained in this scope. */
            nodeTypes?: NodeType[];
            /** [Output Only] An informational warning that appears when the node types list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface NotificationEndpoint {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Settings of the gRPC notification endpoint including the endpoint URL and the retry duration. */
            grpcSettings?: NotificationEndpointGrpcSettings;
            /** [Output Only] A unique identifier for this resource type. The server generates this identifier. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request
             * URL. It is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface NotificationEndpointGrpcSettings {
            /** Optional. If specified, this field is used to set the authority header by the sender of notifications. See https://tools.ietf.org/html/rfc7540#section-8.1.2.3 */
            authority?: string;
            /** Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name. */
            endpoint?: string;
            /** Optional. If specified, this field is used to populate the "name" field in gRPC requests. */
            payloadName?: string;
            /**
             * Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range
             * between 600 seconds to 3600 seconds. Nanos are disallowed. Can only be set for regional notification endpoints.
             */
            resendInterval?: Duration;
            /** How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number. */
            retryDurationSec?: number;
        }
        interface NotificationEndpointList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of NotificationEndpoint resources. */
            items?: NotificationEndpoint[];
            /** [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface Operation {
            /** [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise. */
            clientOperationId?: string;
            /** [Deprecated] This field is deprecated. */
            creationTimestamp?: string;
            /** [Output Only] A textual description of the operation, which is set when the operation is created. */
            description?: string;
            /** [Output Only] The time that this operation was completed. This value is in RFC3339 text format. */
            endTime?: string;
            /** [Output Only] If errors are generated during processing of the operation, this field will be populated. */
            error?: {
                /** [Output Only] The array of errors encountered while processing this operation. */
                errors?: Array<{
                    /** [Output Only] The error type identifier for this error. */
                    code?: string;
                    /**
                     * [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the
                     * error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
                     */
                    errorDetails?: Array<{
                        errorInfo?: ErrorInfo;
                        help?: Help;
                        localizedMessage?: LocalizedMessage;
                        quotaInfo?: QuotaExceededInfo;
                    }>;
                    /** [Output Only] Indicates the field in the request that caused the error. This property is optional. */
                    location?: string;
                    /** [Output Only] An optional, human-readable error message. */
                    message?: string;
                }>;
            };
            /** [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`. */
            httpErrorMessage?: string;
            /** [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found. */
            httpErrorStatusCode?: number;
            /** [Output Only] The unique identifier for the operation. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The time that this operation was requested. This value is in RFC3339 text format. */
            insertTime?: string;
            /** [Output Only] Type of the resource. Always `compute#operation` for Operation resources. */
            kind?: string;
            /** [Output Only] Name of the operation. */
            name?: string;
            /** [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request. */
            operationGroupId?: string;
            /** [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on. */
            operationType?: string;
            /**
             * [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used
             * to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
             */
            progress?: number;
            /** [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format. */
            startTime?: string;
            /** [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`. */
            status?: string;
            /** [Output Only] An optional textual description of the current status of the operation. */
            statusMessage?: string;
            /** [Output Only] The unique target ID, which identifies a specific incarnation of the target resource. */
            targetId?: string;
            /**
             * [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created
             * from.
             */
            targetLink?: string;
            /** [Output Only] User who requested the operation, for example: `user@example.com`. */
            user?: string;
            /** [Output Only] If warning messages are generated during processing of the operation, this field will be populated. */
            warnings?: Array<{
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            }>;
            /** [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations. */
            zone?: string;
        }
        interface OperationAggregatedList {
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] A map of scoped operation lists. */
            items?: { [P in string]: OperationsScopedList };
            /** [Output Only] Type of resource. Always `compute#operationAggregatedList` for aggregated lists of operations. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for
             * the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface OperationList {
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] A list of Operation resources. */
            items?: Operation[];
            /** [Output Only] Type of resource. Always `compute#operations` for Operations resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than `maxResults`, use the `nextPageToken` as a value for
             * the query parameter `pageToken` in the next list request. Subsequent list requests will have their own `nextPageToken` to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface OperationsScopedList {
            /** [Output Only] A list of operations contained in this scope. */
            operations?: Operation[];
            /** [Output Only] Informational warning which replaces the list of operations when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface OutlierDetection {
            /**
             * The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms
             * or 30s.
             */
            baseEjectionTime?: Duration;
            /**
             * Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. Not
             * supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            consecutiveErrors?: number;
            /**
             * The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection
             * occurs. Defaults to 3. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            consecutiveGatewayFailure?: number;
            /**
             * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up
             * slowly. Defaults to 0. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
             */
            enforcingConsecutiveErrors?: number;
            /**
             * The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or
             * to ramp it up slowly. Defaults to 100. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set
             * to true.
             */
            enforcingConsecutiveGatewayFailure?: number;
            /**
             * The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to
             * ramp it up slowly. Defaults to 100.
             */
            enforcingSuccessRate?: number;
            /** Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second. */
            interval?: Duration;
            /** Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%. */
            maxEjectionPercent?: number;
            /**
             * The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via
             * success rate statistics is not performed for any host in the cluster. Defaults to 5.
             */
            successRateMinimumHosts?: number;
            /**
             * The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection.
             * If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
             */
            successRateRequestVolume?: number;
            /**
             * This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of
             * this factor and the standard deviation of the mean success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided by a thousand to get a double. That is, if the
             * desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
             */
            successRateStdevFactor?: number;
        }
        interface PacketIntervals {
            /** Average observed inter-packet interval in milliseconds. */
            avgMs?: string;
            /** From how long ago in the past these intervals were observed. */
            duration?: string;
            /** Maximum observed inter-packet interval in milliseconds. */
            maxMs?: string;
            /** Minimum observed inter-packet interval in milliseconds. */
            minMs?: string;
            /** Number of inter-packet intervals from which these statistics were derived. */
            numIntervals?: string;
            /** The type of packets for which inter-packet intervals were computed. */
            type?: string;
        }
        interface PacketMirroring {
            /**
             * The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector
             * set to true.
             */
            collectorIlb?: PacketMirroringForwardingRuleInfo;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE. */
            enable?: string;
            /** Filter for mirrored traffic. If unspecified, all traffic is mirrored. */
            filter?: PacketMirroringFilter;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings. */
            kind?: string;
            /**
             * PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and/or tags for which traffic from/to all VM instances will be
             * mirrored.
             */
            mirroredResources?: PacketMirroringMirroredResourceInfo;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to
             * the given network.
             */
            network?: PacketMirroringNetworkInfo;
            /**
             * The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given
             * Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
             */
            priority?: number;
            /** [Output Only] URI of the region where the packetMirroring resides. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface PacketMirroringAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of PacketMirroring resources. */
            items?: { [P in string]: PacketMirroringsScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PacketMirroringFilter {
            /**
             * IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches
             * the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
             */
            cidrRanges?: string[];
            /** Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH. */
            direction?: string;
            /**
             * Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor
             * IPProtocols is specified, all traffic is mirrored.
             */
            IPProtocols?: string[];
        }
        interface PacketMirroringForwardingRuleInfo {
            /** [Output Only] Unique identifier for the forwarding rule; defined by the server. */
            canonicalUrl?: string;
            /** Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic. */
            url?: string;
        }
        interface PacketMirroringList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of PacketMirroring resources. */
            items?: PacketMirroring[];
            /** [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PacketMirroringMirroredResourceInfo {
            /**
             * A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to
             * those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
             */
            instances?: PacketMirroringMirroredResourceInfoInstanceInfo[];
            /**
             * A set of subnetworks for which traffic from/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5
             * subnetworks.
             */
            subnetworks?: PacketMirroringMirroredResourceInfoSubnetInfo[];
            /** A set of mirrored tags. Traffic from/to all VM instances that have one or more of these tags will be mirrored. */
            tags?: string[];
        }
        interface PacketMirroringMirroredResourceInfoInstanceInfo {
            /** [Output Only] Unique identifier for the instance; defined by the server. */
            canonicalUrl?: string;
            /** Resource URL to the virtual machine instance which is being mirrored. */
            url?: string;
        }
        interface PacketMirroringMirroredResourceInfoSubnetInfo {
            /** [Output Only] Unique identifier for the subnetwork; defined by the server. */
            canonicalUrl?: string;
            /** Resource URL to the subnetwork for which traffic from/to all VM instances will be mirrored. */
            url?: string;
        }
        interface PacketMirroringNetworkInfo {
            /** [Output Only] Unique identifier for the network; defined by the server. */
            canonicalUrl?: string;
            /** URL of the network resource. */
            url?: string;
        }
        interface PacketMirroringsScopedList {
            /** A list of packetMirrorings contained in this scope. */
            packetMirrorings?: PacketMirroring[];
            /** Informational warning which replaces the list of packetMirrorings when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PathMatcher {
            /**
             * defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations,
             * before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is
             * set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load
             * balancers only support the urlRewrite action within a path matcher's defaultRouteAction.
             */
            defaultRouteAction?: HttpRouteAction;
            /**
             * The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following
             * are all valid URLs to a BackendService resource: - https://www.googleapis.com/compute/v1/projects/project /global/backendServices/backendService -
             * compute/v1/projects/project/global/backendServices/backendService - global/backendServices/backendService If defaultRouteAction is also specified, advanced routing actions, such as
             * URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices.
             * Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or
             * defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource default_service: -
             * compute.backendBuckets.use - compute.backendServices.use
             */
            defaultService?: string;
            /**
             * When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
             * defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
             */
            defaultUrlRedirect?: HttpRedirectAction;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Specifies changes to request and response headers that need to take effect for the selected backend service. HeaderAction specified here are applied after the matching HttpRouteRule
             * HeaderAction and before the HeaderAction in the UrlMap HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the
             * URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
             */
            headerAction?: HttpHeaderAction;
            /** The name to which this PathMatcher is referred by the HostRule. */
            name?: string;
            /**
             * The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that's required. The order by which path rules are specified does not
             * matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path /a/b/c/* will match before /a/b/* irrespective of the order in which those paths
             * appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
             */
            pathRules?: PathRule[];
            /**
             * The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from
             * the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
             */
            routeRules?: HttpRouteRule[];
        }
        interface PathRule {
            /**
             * The list of path patterns to match. Each must start with / and the only place a * is allowed is at the end following a /. The string fed to the path matcher does not include any
             * text after the first ? or #, and those chars are not allowed here.
             */
            paths?: string[];
            /**
             * In response to a matching path, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected
             * backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only
             * one of routeAction or urlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path rule's routeAction.
             */
            routeAction?: HttpRouteAction;
            /**
             * The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL
             * rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction
             * specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
             */
            service?: string;
            /**
             * When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when
             * the URL map is bound to a target gRPC proxy.
             */
            urlRedirect?: HttpRedirectAction;
        }
        interface PerInstanceConfig {
            /**
             * Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided
             * in order to update an existing per-instance configuration or the field needs to be unset.
             */
            fingerprint?: string;
            /**
             * The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration
             * with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance
             * configconfiguration for a VM instance that either doesn't exist or is not part of the group will result in an error.
             */
            name?: string;
            /** The intended preserved state for the given instance. Does not contain preserved state generated from a stateful policy. */
            preservedState?: PreservedState;
            /** The status of applying this per-instance configuration on the corresponding managed instance. */
            status?: string;
        }
        interface Policy {
            /** Specifies cloud audit logging configuration for this policy. */
            auditConfigs?: AuditConfig[];
            /**
             * Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings`
             * must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a
             * principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another
             * 1,450 principals to the `bindings` in the `Policy`.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make
             * use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems
             * are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM
             * Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /** This is deprecated and has no effect. Do not use. */
            rules?: Rule[];
            /**
             * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings
             * must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a
             * policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use
             * IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave
             * the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            version?: number;
        }
        interface PreconfiguredWafSet {
            /** List of entities that are currently supported for WAF rules. */
            expressionSets?: WafExpressionSet[];
        }
        interface PreservedState {
            /** Preserved disks defined for this instance. This map is keyed with the device names of the disks. */
            disks?: { [P in string]: PreservedStatePreservedDisk };
            /** Preserved metadata defined for this instance. */
            metadata?: { [P in string]: string };
        }
        interface PreservedStatePreservedDisk {
            /**
             * These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no
             * longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
             */
            autoDelete?: string;
            /** The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If not specified, the default is to attach the disk in READ_WRITE mode. */
            mode?: string;
            /** The URL of the disk resource that is stateful and should be attached to the VM instance. */
            source?: string;
        }
        interface Project {
            /** Metadata key/value pairs available to all instances contained in this project. See Custom metadata for more information. */
            commonInstanceMetadata?: Metadata;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /**
             * This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier
             * is PREMIUM.
             */
            defaultNetworkTier?: string;
            /** [Output Only] Default service account used by VMs running in this project. */
            defaultServiceAccount?: string;
            /** An optional textual description of the resource. */
            description?: string;
            /** Restricted features enabled for use on this project. */
            enabledFeatures?: string[];
            /**
             * [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is *not* the project ID, and is just a unique ID used by Compute Engine to
             * identify resources.
             */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#project for projects. */
            kind?: string;
            /** The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine. */
            name?: string;
            /** [Output Only] Quotas assigned to this project. */
            quotas?: Quota[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** The naming prefix for daily usage reports and the Google Cloud Storage bucket where they are stored. */
            usageExportLocation?: UsageExportLocation;
            /** [Output Only] Default internal DNS setting used by VMs running in this project. */
            vmDnsSetting?: string;
            /** [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated. */
            xpnProjectStatus?: string;
        }
        interface ProjectsDisableXpnResourceRequest {
            /** Service resource (a.k.a service project) ID. */
            xpnResource?: XpnResourceId;
        }
        interface ProjectsEnableXpnResourceRequest {
            /** Service resource (a.k.a service project) ID. */
            xpnResource?: XpnResourceId;
        }
        interface ProjectsGetXpnResources {
            /** [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects) */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** Service resources (a.k.a service projects) attached to this project as their shared VPC host. */
            resources?: XpnResourceId[];
        }
        interface ProjectsListXpnHostsRequest {
            /** Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project. */
            organization?: string;
        }
        interface ProjectsSetDefaultNetworkTierRequest {
            /** Default network tier to be set. */
            networkTier?: string;
        }
        interface PublicAdvertisedPrefix {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** The IPv4 address to be used for reverse DNS verification. */
            dnsVerificationIp?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new
             * PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To
             * see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
            id?: string;
            /** The IPv4 address range, in CIDR format, represented by this public advertised prefix. */
            ipCidrRange?: string;
            /** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] The list of public delegated prefixes that exist for this public advertised prefix. */
            publicDelegatedPrefixs?: PublicAdvertisedPrefixPublicDelegatedPrefix[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] The shared secret to be used for reverse DNS verification. */
            sharedSecret?: string;
            /**
             * The status of the public advertised prefix. Possible values include: - `INITIAL`: RPKI validation is complete. - `PTR_CONFIGURED`: User has configured the PTR. - `VALIDATED`:
             * Reverse DNS lookup is successful. - `REVERSE_DNS_LOOKUP_FAILED`: Reverse DNS lookup failed. - `PREFIX_CONFIGURATION_IN_PROGRESS`: The prefix is being configured. -
             * `PREFIX_CONFIGURATION_COMPLETE`: The prefix is fully configured. - `PREFIX_REMOVAL_IN_PROGRESS`: The prefix is being removed.
             */
            status?: string;
        }
        interface PublicAdvertisedPrefixList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of PublicAdvertisedPrefix resources. */
            items?: PublicAdvertisedPrefix[];
            /** [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PublicAdvertisedPrefixPublicDelegatedPrefix {
            /** The IP address range of the public delegated prefix */
            ipRange?: string;
            /** The name of the public delegated prefix */
            name?: string;
            /** The project number of the public delegated prefix */
            project?: string;
            /** The region of the public delegated prefix if it is regional. If absent, the prefix is global. */
            region?: string;
            /**
             * The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The
             * public delegated prefix is active.
             */
            status?: string;
        }
        interface PublicDelegatedPrefix {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new
             * PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet. To
             * see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
            id?: string;
            /** The IPv4 address range, in CIDR format, represented by this public delegated prefix. */
            ipCidrRange?: string;
            /** If true, the prefix will be live migrated. */
            isLiveMigration?: boolean;
            /** [Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix. */
            parentPrefix?: string;
            /** The list of sub public delegated prefixes that exist for this public delegated prefix. */
            publicDelegatedSubPrefixs?: PublicDelegatedPrefixPublicDelegatedSubPrefix[];
            /**
             * [Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request
             * URL. It is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * [Output Only] The status of the public delegated prefix, which can be one of following values: - `INITIALIZING` The public delegated prefix is being initialized and addresses cannot
             * be created yet. - `READY_TO_ANNOUNCE` The public delegated prefix is a live migration prefix and is active. - `ANNOUNCED` The public delegated prefix is active. - `DELETING` The
             * public delegated prefix is being deprovsioned.
             */
            status?: string;
        }
        interface PublicDelegatedPrefixAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of PublicDelegatedPrefixesScopedList resources. */
            items?: { [P in string]: PublicDelegatedPrefixesScopedList };
            /** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PublicDelegatedPrefixesScopedList {
            /** [Output Only] A list of PublicDelegatedPrefixes contained in this scope. */
            publicDelegatedPrefixes?: PublicDelegatedPrefix[];
            /** [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PublicDelegatedPrefixList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of PublicDelegatedPrefix resources. */
            items?: PublicDelegatedPrefix[];
            /** [Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface PublicDelegatedPrefixPublicDelegatedSubPrefix {
            /** Name of the project scoping this PublicDelegatedSubPrefix. */
            delegateeProject?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** The IPv4 address range, in CIDR format, represented by this sub public delegated prefix. */
            ipCidrRange?: string;
            /** Whether the sub prefix is delegated to create Address resources in the delegatee project. */
            isAddress?: boolean;
            /** The name of the sub public delegated prefix. */
            name?: string;
            /** [Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global. */
            region?: string;
            /** [Output Only] The status of the sub public delegated prefix. */
            status?: string;
        }
        interface Quota {
            /** [Output Only] Quota limit for this metric. */
            limit?: number;
            /** [Output Only] Name of the quota metric. */
            metric?: string;
            /** [Output Only] Owning resource. This is the resource on which this quota is applied. */
            owner?: string;
            /** [Output Only] Current usage of this metric. */
            usage?: number;
        }
        interface QuotaExceededInfo {
            /** The map holding related quota dimensions. */
            dimensions?: { [P in string]: string };
            /** Current effective quota limit. The limit's unit depends on the quota type or metric. */
            limit?: number;
            /** The name of the quota limit. */
            limitName?: string;
            /** The Compute Engine quota metric name. */
            metricName?: string;
        }
        interface Reference {
            /** [Output Only] Type of the resource. Always compute#reference for references. */
            kind?: string;
            /** A description of the reference type with no implied semantics. Possible values include: 1. MEMBER_OF */
            referenceType?: string;
            /** URL of the resource which refers to the target. */
            referrer?: string;
            /** URL of the resource to which this reference points. */
            target?: string;
        }
        interface Region {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The deprecation status associated with this region. */
            deprecated?: DeprecationStatus;
            /** [Output Only] Textual description of the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#region for regions. */
            kind?: string;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] Quotas assigned to this region. */
            quotas?: Quota[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Status of the region, either UP or DOWN. */
            status?: string;
            /** [Output Only] Reserved for future use. */
            supportsPzs?: boolean;
            /** [Output Only] A list of zones available in this region, in the form of resource URLs. */
            zones?: string[];
        }
        interface RegionAutoscalerList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Autoscaler resources. */
            items?: Autoscaler[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionDisksAddResourcePoliciesRequest {
            /** Resource policies to be added to this disk. */
            resourcePolicies?: string[];
        }
        interface RegionDisksRemoveResourcePoliciesRequest {
            /** Resource policies to be removed from this disk. */
            resourcePolicies?: string[];
        }
        interface RegionDisksResizeRequest {
            /** The new size of the regional persistent disk, which is specified in GB. */
            sizeGb?: string;
        }
        interface RegionDiskTypeList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of DiskType resources. */
            items?: DiskType[];
            /** [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionInstanceGroupList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroup resources. */
            items?: InstanceGroup[];
            /** The resource type. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionInstanceGroupManagerDeleteInstanceConfigReq {
            /** The list of instance names for which we want to delete per-instance configs on this managed instance group. */
            names?: string[];
        }
        interface RegionInstanceGroupManagerList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceGroupManager resources. */
            items?: InstanceGroupManager[];
            /** [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionInstanceGroupManagerPatchInstanceConfigReq {
            /** The list of per-instance configurations to insert or patch on this managed instance group. */
            perInstanceConfigs?: PerInstanceConfig[];
        }
        interface RegionInstanceGroupManagersAbandonInstancesRequest {
            /** The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
        }
        interface RegionInstanceGroupManagersApplyUpdatesRequest {
            /** Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request. */
            allInstances?: boolean;
            /** The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
            /**
             * The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and
             * start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive
             * action than you set with this flag, the necessary action is performed to execute the update.
             */
            minimalAction?: string;
            /**
             * The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it
             * again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more
             * disruptive action than you set with this flag, the update request will fail.
             */
            mostDisruptiveAllowedAction?: string;
        }
        interface RegionInstanceGroupManagersCreateInstancesRequest {
            /** [Required] List of specifications of per-instance configs. */
            instances?: PerInstanceConfig[];
        }
        interface RegionInstanceGroupManagersDeleteInstancesRequest {
            /** The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
            /**
             * Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned.
             * If this field is set to `false` and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or
             * a reference to an instance that exists in a zone or region other than the group's zone or region.
             */
            skipInstancesOnValidationError?: boolean;
        }
        interface RegionInstanceGroupManagersListErrorsResponse {
            /** [Output Only] The list of errors of the managed instance group. */
            items?: InstanceManagedByIgmError[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
        }
        interface RegionInstanceGroupManagersListInstanceConfigsResp {
            /** [Output Only] The list of PerInstanceConfig. */
            items?: PerInstanceConfig[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionInstanceGroupManagersListInstancesResponse {
            /** A list of managed instances. */
            managedInstances?: ManagedInstance[];
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
        }
        interface RegionInstanceGroupManagersRecreateRequest {
            /** The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones/[ZONE]/instances/[INSTANCE_NAME]. */
            instances?: string[];
        }
        interface RegionInstanceGroupManagersSetTargetPoolsRequest {
            /**
             * Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is
             * optional.
             */
            fingerprint?: string;
            /**
             * The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance
             * group.
             */
            targetPools?: string[];
        }
        interface RegionInstanceGroupManagersSetTemplateRequest {
            /** URL of the InstanceTemplate resource from which all new instances will be created. */
            instanceTemplate?: string;
        }
        interface RegionInstanceGroupManagerUpdateInstanceConfigReq {
            /** The list of per-instance configurations to insert or patch on this managed instance group. */
            perInstanceConfigs?: PerInstanceConfig[];
        }
        interface RegionInstanceGroupsListInstances {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of InstanceWithNamedPorts resources. */
            items?: InstanceWithNamedPorts[];
            /** The resource type. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionInstanceGroupsListInstancesRequest {
            /** Instances in which state should be returned. Valid options are: 'ALL', 'RUNNING'. By default, it lists all instances. */
            instanceState?: string;
            /**
             * Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always
             * lists all instances.
             */
            portName?: string;
        }
        interface RegionInstanceGroupsSetNamedPortsRequest {
            /**
             * The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings
             * concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied
             * from another concurrent request.
             */
            fingerprint?: string;
            /** The list of named ports to set for this instance group. */
            namedPorts?: NamedPort[];
        }
        interface RegionList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Region resources. */
            items?: Region[];
            /** [Output Only] Type of resource. Always compute#regionList for lists of regions. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {
            /** Effective firewalls from firewall policy. */
            firewallPolicys?: RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy[];
            /** Effective firewalls on the network. */
            firewalls?: Firewall[];
        }
        interface RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
            /** [Output Only] The display name of the firewall policy. */
            displayName?: string;
            /** [Output Only] The name of the firewall policy. */
            name?: string;
            /** The rules that apply to the network. */
            rules?: FirewallPolicyRule[];
            /** [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL. */
            type?: string;
        }
        interface RegionSetLabelsRequest {
            /**
             * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request
             * to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest
             * fingerprint.
             */
            labelFingerprint?: string;
            /** The labels to set for this resource. */
            labels?: { [P in string]: string };
        }
        interface RegionSetPolicyRequest {
            /** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
            bindings?: Binding[];
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
            etag?: string;
            /**
             * REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain
             * services (like Projects) might reject them.
             */
            policy?: Policy;
        }
        interface RegionTargetHttpsProxiesSetSslCertificatesRequest {
            /** New set of SslCertificate resources to associate with this TargetHttpsProxy resource. */
            sslCertificates?: string[];
        }
        interface RegionUrlMapsValidateRequest {
            /** Content of the UrlMap to be validated. */
            resource?: UrlMap;
        }
        interface RequestMirrorPolicy {
            /**
             * The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as
             * the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service.
             */
            backendService?: string;
        }
        interface Reservation {
            /** [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment. */
            commitment?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#reservations for reservations. */
            kind?: string;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the
             * name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following
             * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] Status information for Reservation resource. */
            resourceStatus?: AllocationResourceStatus;
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined fully-qualified URL for this resource. */
            selfLink?: string;
            /**
             * Specify share-settings to create a shared reservation. This property is optional. For more information about the syntax and options for this field and its subfields, see the guide
             * for creating a shared reservation.
             */
            shareSettings?: ShareSettings;
            /** Reservation for instances with specific machine shapes. */
            specificReservation?: AllocationSpecificSKUReservation;
            /**
             * Indicates whether the reservation can be consumed by VMs with affinity for "any" reservation. If the field is set, then only VMs that target the reservation by name can consume from
             * this reservation.
             */
            specificReservationRequired?: boolean;
            /** [Output Only] The status of the reservation. */
            status?: string;
            /** Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment. */
            zone?: string;
        }
        interface ReservationAffinity {
            /**
             * Specifies the type of reservation from which this instance can consume resources: ANY_RESERVATION (default), SPECIFIC_RESERVATION, or NO_RESERVATION. See Consuming reserved
             * instances for examples.
             */
            consumeReservationType?: string;
            /**
             * Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com/reservation-name as the key and specify the name of your
             * reservation as its value.
             */
            key?: string;
            /**
             * Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or
             * "projects/different-project/reservations/some-reservation-name" to target a shared reservation in the same zone but in a different project.
             */
            values?: string[];
        }
        interface ReservationAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Allocation resources. */
            items?: { [P in string]: ReservationsScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ReservationList {
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] A list of Allocation resources. */
            items?: Reservation[];
            /** [Output Only] Type of resource.Always compute#reservationsList for listsof reservations */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ReservationsResizeRequest {
            /** Number of allocated resources can be resized with minimum = 1 and maximum = 1000. */
            specificSkuCount?: string;
        }
        interface ReservationsScopedList {
            /** A list of reservations contained in this scope. */
            reservations?: Reservation[];
            /** Informational warning which replaces the list of reservations when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ResourceCommitment {
            /** Name of the accelerator type resource. Applicable only when the type is ACCELERATOR. */
            acceleratorType?: string;
            /**
             * The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a
             * multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
             */
            amount?: string;
            /** Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR. */
            type?: string;
        }
        interface ResourceGroupReference {
            /** A URI referencing one of the instance groups or network endpoint groups listed in the backend service. */
            group?: string;
        }
        interface ResourcePoliciesScopedList {
            /** A list of resourcePolicies contained in this scope. */
            resourcePolicies?: ResourcePolicy[];
            /** Informational warning which replaces the list of resourcePolicies when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ResourcePolicy {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            description?: string;
            /** Resource policy for instances for placement configuration. */
            groupPlacementPolicy?: ResourcePolicyGroupPlacementPolicy;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** Resource policy for scheduling instance operations. */
            instanceSchedulePolicy?: ResourcePolicyInstanceSchedulePolicy;
            /** [Output Only] Type of the resource. Always compute#resource_policies for resource policies. */
            kind?: string;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the
             * name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following
             * characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            region?: string;
            /** [Output Only] The system status of the resource policy. */
            resourceStatus?: ResourcePolicyResourceStatus;
            /** [Output Only] Server-defined fully-qualified URL for this resource. */
            selfLink?: string;
            /** Resource policy for persistent disks for creating snapshots. */
            snapshotSchedulePolicy?: ResourcePolicySnapshotSchedulePolicy;
            /** [Output Only] The status of resource policy creation. */
            status?: string;
        }
        interface ResourcePolicyAggregatedList {
            etag?: string;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ResourcePolicy resources. */
            items?: { [P in string]: ResourcePoliciesScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ResourcePolicyDailyCycle {
            /** Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle. */
            daysInCycle?: number;
            /** [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario. */
            duration?: string;
            /** Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid. */
            startTime?: string;
        }
        interface ResourcePolicyGroupPlacementPolicy {
            /** The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network. */
            availabilityDomainCount?: number;
            /** Specifies network collocation */
            collocation?: string;
            /**
             * Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this
             * exact number of VMs.
             */
            vmCount?: number;
        }
        interface ResourcePolicyHourlyCycle {
            /** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
            duration?: string;
            /** Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle. */
            hoursInCycle?: number;
            /** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
            startTime?: string;
        }
        interface ResourcePolicyInstanceSchedulePolicy {
            /** The expiration time of the schedule. The timestamp is an RFC3339 string. */
            expirationTime?: string;
            /** The start time of the schedule. The timestamp is an RFC3339 string. */
            startTime?: string;
            /**
             * Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database:
             * http://en.wikipedia.org/wiki/Tz_database.
             */
            timeZone?: string;
            /** Specifies the schedule for starting instances. */
            vmStartSchedule?: ResourcePolicyInstanceSchedulePolicySchedule;
            /** Specifies the schedule for stopping instances. */
            vmStopSchedule?: ResourcePolicyInstanceSchedulePolicySchedule;
        }
        interface ResourcePolicyInstanceSchedulePolicySchedule {
            /** Specifies the frequency for the operation, using the unix-cron format. */
            schedule?: string;
        }
        interface ResourcePolicyList {
            etag?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] A list of ResourcePolicy resources. */
            items?: ResourcePolicy[];
            /** [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ResourcePolicyResourceStatus {
            /** [Output Only] Specifies a set of output values reffering to the instance_schedule_policy system status. This field should have the same name as corresponding policy field. */
            instanceSchedulePolicy?: ResourcePolicyResourceStatusInstanceSchedulePolicyStatus;
        }
        interface ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {
            /** [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string. */
            lastRunStartTime?: string;
            /** [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string. */
            nextRunStartTime?: string;
        }
        interface ResourcePolicySnapshotSchedulePolicy {
            /** Retention policy applied to snapshots created by this resource policy. */
            retentionPolicy?: ResourcePolicySnapshotSchedulePolicyRetentionPolicy;
            /** A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy. */
            schedule?: ResourcePolicySnapshotSchedulePolicySchedule;
            /** Properties with which snapshots are created such as labels, encryption keys. */
            snapshotProperties?: ResourcePolicySnapshotSchedulePolicySnapshotProperties;
        }
        interface ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
            /** Maximum age of the snapshot that is allowed to be kept. */
            maxRetentionDays?: number;
            /** Specifies the behavior to apply to scheduled snapshots when the source disk is deleted. */
            onSourceDiskDelete?: string;
        }
        interface ResourcePolicySnapshotSchedulePolicySchedule {
            dailySchedule?: ResourcePolicyDailyCycle;
            hourlySchedule?: ResourcePolicyHourlyCycle;
            weeklySchedule?: ResourcePolicyWeeklyCycle;
        }
        interface ResourcePolicySnapshotSchedulePolicySnapshotProperties {
            /** Chain name that the snapshot is created in. */
            chainName?: string;
            /** Indication to perform a 'guest aware' snapshot. */
            guestFlush?: boolean;
            /** Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty. */
            labels?: { [P in string]: string };
            /** Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional). */
            storageLocations?: string[];
        }
        interface ResourcePolicyWeeklyCycle {
            /** Up to 7 intervals/windows, one for each day of the week. */
            dayOfWeeks?: ResourcePolicyWeeklyCycleDayOfWeek[];
        }
        interface ResourcePolicyWeeklyCycleDayOfWeek {
            /**
             * Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY,
             * SUNDAY.
             */
            day?: string;
            /** [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. */
            duration?: string;
            /** Time within the window to start the operations. It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT. */
            startTime?: string;
        }
        interface ResourceStatus {
            /** [Output Only] An opaque ID of the host on which the VM is running. */
            physicalHost?: string;
        }
        interface Route {
            /** [Output Only] AS path. */
            asPaths?: RouteAsPath[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this field when you create the resource. */
            description?: string;
            /** The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported. */
            destRange?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of this resource. Always compute#routes for Route resources. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`. The first character must be a lowercase letter, and all following characters (except for the last
             * character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
             */
            name?: string;
            /** Fully-qualified URL of the network that this route applies to. */
            network?: string;
            /**
             * The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects/
             * project/global/gateways/default-internet-gateway
             */
            nextHopGateway?: string;
            /**
             * The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all
             * valid URLs: - 10.128.0.56 - https://www.googleapis.com/compute/v1/projects/project/regions/region /forwardingRules/forwardingRule - regions/region/forwardingRules/forwardingRule
             */
            nextHopIlb?: string;
            /**
             * The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example:
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone/instances/
             */
            nextHopInstance?: string;
            /** The network IP address of an instance that should handle matching packets. Only IPv4 is supported. */
            nextHopIp?: string;
            /** The URL of the local network if it should handle matching packets. */
            nextHopNetwork?: string;
            /** [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035. */
            nextHopPeering?: string;
            /** The URL to a VpnTunnel that should handle matching packets. */
            nextHopVpnTunnel?: string;
            /**
             * The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal
             * prefix length, the one with the lowest-numbered priority value wins. The default value is `1000`. The priority value must be from `0` to `65535`, inclusive.
             */
            priority?: number;
            /** [Output only] The status of the route. */
            routeStatus?: string;
            /**
             * [Output Only] The type of this route, which can be one of the following values: - 'TRANSIT' for a transit route that this router learned from another Cloud Router and will
             * readvertise to one of its BGP peers - 'SUBNET' for a route from a subnet of the VPC - 'BGP' for a route learned from a BGP peer of this router - 'STATIC' for a static route
             */
            routeType?: string;
            /** [Output Only] Server-defined fully-qualified URL for this resource. */
            selfLink?: string;
            /** A list of instance tags to which this route applies. */
            tags?: string[];
            /** [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages. */
            warnings?: Array<{
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            }>;
        }
        interface RouteAsPath {
            /** [Output Only] The AS numbers of the AS Path. */
            asLists?: number[];
            /**
             * [Output Only] The type of the AS Path, which can be one of the following values: - 'AS_SET': unordered set of autonomous systems that the route in has traversed - 'AS_SEQUENCE':
             * ordered set of autonomous systems that the route has traversed - 'AS_CONFED_SEQUENCE': ordered set of Member Autonomous Systems in the local confederation that the route has
             * traversed - 'AS_CONFED_SET': unordered set of Member Autonomous Systems in the local confederation that the route has traversed
             */
            pathSegmentType?: string;
        }
        interface RouteList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Route resources. */
            items?: Route[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface Router {
            /** BGP information specific to this router. */
            bgp?: RouterBgp;
            /**
             * BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or
             * peer IP address. Please refer to RFC4273.
             */
            bgpPeers?: RouterBgpPeer[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments). */
            encryptedInterconnectRouter?: boolean;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both. */
            interfaces?: RouterInterface[];
            /** [Output Only] Type of resource. Always compute#router for routers. */
            kind?: string;
            /** Keys used for MD5 authentication. */
            md5AuthenticationKeys?: RouterMd5AuthenticationKey[];
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** A list of NAT services created in this router. */
            nats?: RouterNat[];
            /** URI of the network to which this router belongs. */
            network?: string;
            /** [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
        }
        interface RouterAdvertisedIpRange {
            /** User-specified description for the IP range. */
            description?: string;
            /** The IP range to advertise. The value must be a CIDR-formatted string. */
            range?: string;
        }
        interface RouterAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Router resources. */
            items?: { [P in string]: RoutersScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RouterBgp {
            /**
             * User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These
             * groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
             */
            advertisedGroups?: string[];
            /**
             * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router.
             * These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
             */
            advertisedIpRanges?: RouterAdvertisedIpRange[];
            /** User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM. */
            advertiseMode?: string;
            /**
             * Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to
             * this router will have the same local ASN.
             */
            asn?: number;
            /**
             * The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is
             * the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or
             * the peer's hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
             */
            keepaliveInterval?: number;
        }
        interface RouterBgpPeer {
            /**
             * User-specified list of prefix groups to advertise in custom mode, which can take one of the following options: - ALL_SUBNETS: Advertises all available subnets, including peer VPC
             * subnets. - ALL_VPC_SUBNETS: Advertises the router's own VPC subnets. Note that this field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the
             * router (in the "bgp" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
             */
            advertisedGroups?: string[];
            /**
             * User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router
             * (in the "bgp" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
             */
            advertisedIpRanges?: RouterAdvertisedIpRange[];
            /** The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win. */
            advertisedRoutePriority?: number;
            /** User-specified flag to indicate which mode to use for advertisement. */
            advertiseMode?: string;
            /** BFD configuration for the BGP peering. */
            bfd?: RouterBgpPeerBfd;
            /**
             * The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer
             * connection can be established with routing information. The default is TRUE.
             */
            enable?: string;
            /** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
            enableIpv6?: boolean;
            /** Name of the interface the BGP peer is associated with. */
            interfaceName?: string;
            /** IP address of the interface inside Google Cloud Platform. Only IPv4 is supported. */
            ipAddress?: string;
            /** IPv6 address of the interface inside Google Cloud Platform. */
            ipv6NexthopAddress?: string;
            /**
             * [Output Only] The resource that configures and manages this BGP peer. - MANAGED_BY_USER is the default value and can be managed by you or other users - MANAGED_BY_ATTACHMENT is a
             * BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this
             * type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
             */
            managementType?: string;
            /** Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5_authentication_keys. The field must comply with RFC1035. */
            md5AuthenticationKeyName?: string;
            /**
             * Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            name?: string;
            /** Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value. */
            peerAsn?: number;
            /** IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported. */
            peerIpAddress?: string;
            /** IPv6 address of the BGP interface outside Google Cloud Platform. */
            peerIpv6NexthopAddress?: string;
            /**
             * URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones
             * contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session.
             */
            routerApplianceInstance?: string;
        }
        interface RouterBgpPeerBfd {
            /**
             * The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater
             * of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
             */
            minReceiveInterval?: number;
            /**
             * The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater
             * of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
             */
            minTransmitInterval?: number;
            /** The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5. */
            multiplier?: number;
            /**
             * The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will
             * wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
             */
            sessionInitializationMode?: string;
        }
        interface RouterInterface {
            /**
             * IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1/30. NOTE:
             * Do not truncate the address as it represents the IP address of the interface.
             */
            ipRange?: string;
            /**
             * URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect
             * attachment, or a virtual machine instance.
             */
            linkedInterconnectAttachment?: string;
            /**
             * URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or
             * a virtual machine instance.
             */
            linkedVpnTunnel?: string;
            /**
             * [Output Only] The resource that configures and manages this interface. - MANAGED_BY_USER is the default value and can be managed directly by users. - MANAGED_BY_ATTACHMENT is an
             * interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this
             * type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
             */
            managementType?: string;
            /**
             * Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            name?: string;
            /**
             * The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual
             * Router, or an SD-WAN VM.
             */
            privateIpAddress?: string;
            /**
             * Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To
             * establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other.
             * The redundant_interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant_interface must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            redundantInterface?: string;
            /**
             * The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this
             * interface, the VM instance must belong to the same subnetwork as the subnetwork specified here.
             */
            subnetwork?: string;
        }
        interface RouterList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Router resources. */
            items?: Router[];
            /** [Output Only] Type of resource. Always compute#router for routers. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RouterMd5AuthenticationKey {
            /**
             * [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed
             * before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters.
             */
            key?: string;
            /** Name used to identify the key. Must be unique within a router. Must be referenced by at least one bgpPeer. Must comply with RFC1035. */
            name?: string;
        }
        interface RouterNat {
            /**
             * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a
             * NAT only.
             */
            drainNatIps?: string[];
            /**
             * Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. -
             * enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a
             * minimum of 32 ports will be allocated to a VM from this NAT config.
             */
            enableDynamicPortAllocation?: boolean;
            enableEndpointIndependentMapping?: boolean;
            /** List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT_TYPE_VM */
            endpointTypes?: string[];
            /** Timeout (in seconds) for ICMP connections. Defaults to 30s if not set. */
            icmpIdleTimeoutSec?: number;
            /** Configure logging on this NAT. */
            logConfig?: RouterNatLogConfig;
            /**
             * Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If
             * Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation
             * is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
             */
            maxPortsPerVm?: number;
            /**
             * Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For
             * example, if the value of this field is 50, at least 64 ports are allocated to a VM.
             */
            minPortsPerVm?: number;
            /** Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035. */
            name?: string;
            /**
             * Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL_ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat
             * IPs, the Nat service fails for new VMs. - AUTO_ONLY: Nat IPs are allocated by Google Cloud Platform; customers can't specify any Nat IPs. When choosing AUTO_ONLY, then nat_ip should
             * be empty.
             */
            natIpAllocateOption?: string;
            /** A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project. */
            natIps?: string[];
            /** A list of rules associated with this NAT. */
            rules?: RouterNatRule[];
            /**
             * Specify the Nat option, which can take one of the following values: - ALL_SUBNETWORKS_ALL_IP_RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. -
             * ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST_OF_SUBNETWORKS: A list of Subnetworks are allowed to Nat
             * (specified in the field subnetwork below) The default is SUBNETWORK_IP_RANGE_TO_NAT_OPTION_UNSPECIFIED. Note that if this field contains ALL_SUBNETWORKS_ALL_IP_RANGES or
             * ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
             */
            sourceSubnetworkIpRangesToNat?: string;
            /** A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST_OF_SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above. */
            subnetworks?: RouterNatSubnetworkToNat[];
            /** Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set. */
            tcpEstablishedIdleTimeoutSec?: number;
            /** Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set. */
            tcpTimeWaitTimeoutSec?: number;
            /** Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set. */
            tcpTransitoryIdleTimeoutSec?: number;
            /** Timeout (in seconds) for UDP connections. Defaults to 30s if not set. */
            udpIdleTimeoutSec?: number;
        }
        interface RouterNatLogConfig {
            /** Indicates whether or not to export logs. This is false by default. */
            enable?: boolean;
            /**
             * Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: -
             * ERRORS_ONLY: Export logs only for connection failures. - TRANSLATIONS_ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and
             * unsuccessful.
             */
            filter?: string;
        }
        interface RouterNatRule {
            /** The action to be enforced for traffic that matches this rule. */
            action?: RouterNatRuleAction;
            /** An optional description of this rule. */
            description?: string;
            /**
             * CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding `action` is enforced. The following
             * examples are valid match expressions for public NAT: "inIpRange(destination.ip, '1.1.0.0/16') || inIpRange(destination.ip, '2.2.0.0/16')" "destination.ip == '1.1.0.1' ||
             * destination.ip == '8.8.8.8'" The following example is a valid match expression for private NAT: "nexthop.hub ==
             * 'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1'"
             */
            match?: string;
            /** An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT. */
            ruleNumber?: number;
        }
        interface RouterNatRuleAction {
            /** A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT. */
            sourceNatActiveIps?: string[];
            /**
             * A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating/patching a
             * NAT rule only. This field is used for public NAT.
             */
            sourceNatDrainIps?: string[];
        }
        interface RouterNatSubnetworkToNat {
            /** URL for the subnetwork resource that will use NAT. */
            name?: string;
            /**
             * A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if "LIST_OF_SECONDARY_IP_RANGES" is one of the values in
             * source_ip_ranges_to_nat.
             */
            secondaryIpRangeNames?: string[];
            /**
             * Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT_IP_RANGE_OPTION_UNSPECIFIED. The only valid option with multiple values is:
             * ["PRIMARY_IP_RANGE", "LIST_OF_SECONDARY_IP_RANGES"] Default: [ALL_IP_RANGES]
             */
            sourceIpRangesToNat?: string[];
        }
        interface RoutersPreviewResponse {
            /** Preview of given router. */
            resource?: Router;
        }
        interface RoutersScopedList {
            /** A list of routers contained in this scope. */
            routers?: Router[];
            /** Informational warning which replaces the list of routers when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface RouterStatus {
            /** Best routes for this router's network. */
            bestRoutes?: Route[];
            /** Best routes learned by this router. */
            bestRoutesForRouter?: Route[];
            bgpPeerStatus?: RouterStatusBgpPeerStatus[];
            natStatus?: RouterStatusNatStatus[];
            /** URI of the network to which this router belongs. */
            network?: string;
        }
        interface RouterStatusBgpPeerStatus {
            /** Routes that were advertised to the remote BGP peer */
            advertisedRoutes?: Route[];
            bfdStatus?: BfdStatus;
            /** Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default. */
            enableIpv6?: boolean;
            /** IP address of the local BGP interface. */
            ipAddress?: string;
            /** IPv6 address of the local BGP interface. */
            ipv6NexthopAddress?: string;
            /** URL of the VPN tunnel that this BGP peer controls. */
            linkedVpnTunnel?: string;
            /** Informs whether MD5 authentication is enabled on this BGP peer. */
            md5AuthEnabled?: boolean;
            /** Name of this BGP peer. Unique within the Routers resource. */
            name?: string;
            /** Number of routes learned from the remote BGP Peer. */
            numLearnedRoutes?: number;
            /** IP address of the remote BGP interface. */
            peerIpAddress?: string;
            /** IPv6 address of the remote BGP interface. */
            peerIpv6NexthopAddress?: string;
            /**
             * [Output only] URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance is the peer
             * side of the BGP session.
             */
            routerApplianceInstance?: string;
            /** The state of the BGP session. For a list of possible values for this field, see BGP session states. */
            state?: string;
            /** Status of the BGP peer: {UP, DOWN} */
            status?: string;
            /** Indicates why particular status was returned. */
            statusReason?: string;
            /** Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds */
            uptime?: string;
            /** Time this session has been up, in seconds. Format: 145 */
            uptimeSeconds?: string;
        }
        interface RouterStatusNatStatus {
            /** A list of IPs auto-allocated for NAT. Example: ["1.1.1.1", "129.2.16.89"] */
            autoAllocatedNatIps?: string[];
            /** A list of IPs auto-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
            drainAutoAllocatedNatIps?: string[];
            /** A list of IPs user-allocated for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
            drainUserAllocatedNatIps?: string[];
            /**
             * The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when
             * auto-allocation of NAT IPs is *not* used.
             */
            minExtraNatIpsNeeded?: number;
            /** Unique name of this NAT. */
            name?: string;
            /** Number of VM endpoints (i.e., Nics) that can use NAT. */
            numVmEndpointsWithNatMappings?: number;
            /** Status of rules in this NAT. */
            ruleStatus?: RouterStatusNatStatusNatRuleStatus[];
            /** A list of fully qualified URLs of reserved IP address resources. */
            userAllocatedNatIpResources?: string[];
            /** A list of IPs user-allocated for NAT. They will be raw IP strings like "179.12.26.133". */
            userAllocatedNatIps?: string[];
        }
        interface RouterStatusNatStatusNatRuleStatus {
            /** A list of active IPs for NAT. Example: ["1.1.1.1", "179.12.26.133"]. */
            activeNatIps?: string[];
            /** A list of IPs for NAT that are in drain mode. Example: ["1.1.1.1", "179.12.26.133"]. */
            drainNatIps?: string[];
            /** The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT. */
            minExtraIpsNeeded?: number;
            /** Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule. */
            numVmEndpointsWithNatMappings?: number;
            /** Rule number of the rule. */
            ruleNumber?: number;
        }
        interface RouterStatusResponse {
            /** Type of resource. */
            kind?: string;
            result?: RouterStatus;
        }
        interface Rule {
            /** This is deprecated and has no effect. Do not use. */
            action?: string;
            /** This is deprecated and has no effect. Do not use. */
            conditions?: Condition[];
            /** This is deprecated and has no effect. Do not use. */
            description?: string;
            /** This is deprecated and has no effect. Do not use. */
            ins?: string[];
            /** This is deprecated and has no effect. Do not use. */
            logConfigs?: LogConfig[];
            /** This is deprecated and has no effect. Do not use. */
            notIns?: string[];
            /** This is deprecated and has no effect. Do not use. */
            permissions?: string[];
        }
        interface SavedAttachedDisk {
            /** Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance). */
            autoDelete?: boolean;
            /** Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem. */
            boot?: boolean;
            /** Specifies the name of the disk attached to the source instance. */
            deviceName?: string;
            /** The encryption key for the disk. */
            diskEncryptionKey?: CustomerEncryptionKey;
            /** The size of the disk in base-2 GB. */
            diskSizeGb?: string;
            /** [Output Only] URL of the disk type resource. For example: projects/project /zones/zone/diskTypes/pd-standard or pd-ssd */
            diskType?: string;
            /** A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options. */
            guestOsFeatures?: GuestOsFeature[];
            /** Specifies zero-based index of the disk that is attached to the source instance. */
            index?: number;
            /** Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. */
            interface?: string;
            /** [Output Only] Type of the resource. Always compute#attachedDisk for attached disks. */
            kind?: string;
            /** [Output Only] Any valid publicly visible licenses. */
            licenses?: string[];
            /** The mode in which this disk is attached to the source instance, either READ_WRITE or READ_ONLY. */
            mode?: string;
            /** Specifies a URL of the disk attached to the source instance. */
            source?: string;
            /** [Output Only] A size of the storage used by the disk's snapshot by this machine image. */
            storageBytes?: string;
            /**
             * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning
             * the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
             */
            storageBytesStatus?: string;
            /** Specifies the type of the attached disk, either SCRATCH or PERSISTENT. */
            type?: string;
        }
        interface SavedDisk {
            /** [Output Only] The architecture of the attached disk. */
            architecture?: string;
            /** [Output Only] Type of the resource. Always compute#savedDisk for attached disks. */
            kind?: string;
            /** Specifies a URL of the disk attached to the source instance. */
            sourceDisk?: string;
            /** [Output Only] Size of the individual disk snapshot used by this machine image. */
            storageBytes?: string;
            /**
             * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning
             * the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
             */
            storageBytesStatus?: string;
        }
        interface ScalingScheduleStatus {
            /**
             * [Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is
             * in RFC3339 text format.
             */
            lastStartTime?: string;
            /**
             * [Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different.
             * The timestamp is in RFC3339 text format.
             */
            nextStartTime?: string;
            /** [Output Only] The current state of a scaling schedule. */
            state?: string;
        }
        interface Scheduling {
            /**
             * Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for
             * standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute
             * Engine.
             */
            automaticRestart?: boolean;
            /** Specifies the termination action for the instance. */
            instanceTerminationAction?: string;
            /** An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API. */
            locationHint?: string;
            /** The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. */
            minNodeCpus?: number;
            /** A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity. */
            nodeAffinities?: SchedulingNodeAffinity[];
            /**
             * Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is
             * TERMINATE. For more information, see Set VM host maintenance policy.
             */
            onHostMaintenance?: string;
            /**
             * Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a `TERMINATED` state. See Instance Life
             * Cycle for more information on the possible instance states.
             */
            preemptible?: boolean;
            /** Specifies the provisioning model of the instance. */
            provisioningModel?: string;
        }
        interface SchedulingNodeAffinity {
            /** Corresponds to the label key of Node resource. */
            key?: string;
            /** Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity. */
            operator?: string;
            /** Corresponds to the label values of Node resource. */
            values?: string[];
        }
        interface Screenshot {
            /** [Output Only] The Base64-encoded screenshot data. */
            contents?: string;
            /** [Output Only] Type of the resource. Always compute#screenshot for the screenshots. */
            kind?: string;
        }
        interface SecurityPoliciesAggregatedList {
            etag?: string;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SecurityPoliciesScopedList resources. */
            items?: { [P in string]: SecurityPoliciesScopedList };
            /** [Output Only] Type of resource. Always compute#securityPolicyAggregatedList for lists of Security Policies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SecurityPoliciesListPreconfiguredExpressionSetsResponse {
            preconfiguredExpressionSets?: SecurityPoliciesWafConfig;
        }
        interface SecurityPoliciesScopedList {
            /** A list of SecurityPolicies contained in this scope. */
            securityPolicies?: SecurityPolicy[];
            /** Informational warning which replaces the list of security policies when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SecurityPoliciesWafConfig {
            wafRules?: PreconfiguredWafSet;
        }
        interface SecurityPolicy {
            adaptiveProtectionConfig?: SecurityPolicyAdaptiveProtectionConfig;
            advancedOptionsConfig?: SecurityPolicyAdvancedOptionsConfig;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            ddosProtectionConfig?: SecurityPolicyDdosProtectionConfig;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Specifies a fingerprint for this resource, which is essentially a hash of the metadata's contents and used for optimistic locking. The fingerprint is initially generated by Compute
             * Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output only] Type of the resource. Always compute#securityPolicyfor security policies */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            recaptchaOptionsConfig?: SecurityPolicyRecaptchaOptionsConfig;
            /** [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies. */
            region?: string;
            /**
             * A list of rules that belong to this policy. There must always be a default rule which is a rule with priority 2147483647 and match all condition (for the match condition this means
             * match "*" for srcIpRanges and for the networkMatch condition every field must be either match "*" or not set). If no rules are provided when creating a security policy, a default
             * rule with action "allow" will be added.
             */
            rules?: SecurityPolicyRule[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * The type indicates the intended use of the security policy. - CLOUD_ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend
             * services. They filter requests before they hit the origin servers. - CLOUD_ARMOR_EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests
             * targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache. -
             * CLOUD_ARMOR_INTERNAL_SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They
             * filter requests before the request is served from the application. This field can be set only at resource creation time.
             */
            type?: string;
        }
        interface SecurityPolicyAdaptiveProtectionConfig {
            /** If set to true, enables Cloud Armor Machine Learning. */
            layer7DdosDefenseConfig?: SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig;
        }
        interface SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
            /** If set to true, enables CAAP for L7 DDoS detection. */
            enable?: boolean;
            /** Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules. */
            ruleVisibility?: string;
        }
        interface SecurityPolicyAdvancedOptionsConfig {
            /** Custom configuration to apply the JSON parsing. Only applicable when json_parsing is set to STANDARD. */
            jsonCustomConfig?: SecurityPolicyAdvancedOptionsConfigJsonCustomConfig;
            jsonParsing?: string;
            logLevel?: string;
        }
        interface SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {
            /**
             * A list of custom Content-Type header values to apply the JSON parsing. As per RFC 1341, a Content-Type header value has the following format: Content-Type := type "/" subtype *[";"
             * parameter] When configuring a custom Content-Type header value, only the type/subtype needs to be specified, and the parameters should be excluded.
             */
            contentTypes?: string[];
        }
        interface SecurityPolicyDdosProtectionConfig {
            ddosProtection?: string;
        }
        interface SecurityPolicyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SecurityPolicy resources. */
            items?: SecurityPolicy[];
            /** [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SecurityPolicyRecaptchaOptionsConfig {
            /**
             * An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified
             * site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used.
             */
            redirectSiteKey?: string;
        }
        interface SecurityPolicyReference {
            securityPolicy?: string;
        }
        interface SecurityPolicyRule {
            /**
             * The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(): deny access to target, returns the HTTP response code
             * specified (valid values are 403, 404, and 502). - rate_based_ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure
             * parameters for this action in RateLimitOptions. Requires rate_limit_options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect,
             * or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold.
             * Configure parameters for this action in rateLimitOptions. Requires rate_limit_options to be set for this.
             */
            action?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** Optional, additional actions that are performed on headers. */
            headerAction?: SecurityPolicyRuleHttpHeaderAction;
            /** [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules */
            kind?: string;
            /** A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding 'action' is enforced. */
            match?: SecurityPolicyRuleMatcher;
            /** If set to true, the specified action is not enforced. */
            preview?: boolean;
            /**
             * An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0
             * is the highest priority and 2147483647 is the lowest priority.
             */
            priority?: number;
            /** Must be specified if the action is "rate_based_ban" or "throttle". Cannot be specified for any other actions. */
            rateLimitOptions?: SecurityPolicyRuleRateLimitOptions;
            /** Parameters defining the redirect action. Cannot be specified for any other actions. */
            redirectOptions?: SecurityPolicyRuleRedirectOptions;
        }
        interface SecurityPolicyRuleHttpHeaderAction {
            /** The list of request headers to add or overwrite if they're already present. */
            requestHeadersToAdds?: SecurityPolicyRuleHttpHeaderActionHttpHeaderOption[];
        }
        interface SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {
            /** The name of the header to set. */
            headerName?: string;
            /** The value to set the named header to. */
            headerValue?: string;
        }
        interface SecurityPolicyRuleMatcher {
            /**
             * The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not
             * specified.
             */
            config?: SecurityPolicyRuleMatcherConfig;
            /** User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header. */
            expr?: Expr;
            /**
             * Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC_IPS_V1 -
             * must specify the corresponding src_ip_range field in config.
             */
            versionedExpr?: string;
        }
        interface SecurityPolicyRuleMatcherConfig {
            /** CIDR IP address range. Maximum number of src_ip_ranges allowed is 10. */
            srcIpRanges?: string[];
        }
        interface SecurityPolicyRuleRateLimitOptions {
            /**
             * Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after
             * the rate falls below the threshold.
             */
            banDurationSec?: number;
            /**
             * Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured 'ban_duration_sec' when the number of requests that
             * exceed the 'rate_limit_threshold' also exceed this 'ban_threshold'.
             */
            banThreshold?: SecurityPolicyRuleRateLimitOptionsThreshold;
            /** Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only. */
            conformAction?: string;
            /**
             * Determines the key to enforce the rate_limit_threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the
             * default value if "enforceOnKey" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP_HEADER: The value of the
             * HTTP header whose name is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request,
             * the key type defaults to ALL. - XFF_IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such
             * header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP_COOKIE: The value of the HTTP cookie whose name
             * is configured under "enforceOnKeyName". The key value is truncated to the first 128 bytes of the cookie value. If no such cookie is present in the request, the key type defaults to
             * ALL. - HTTP_PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key
             * value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country/region from which the request originates.
             */
            enforceOnKey?: string;
            /**
             * Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie
             * whose value is taken as the key value.
             */
            enforceOnKeyName?: string;
            /**
             * Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid
             * options are "deny(status)", where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceedRedirectOptions below.
             */
            exceedAction?: string;
            /** Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect. */
            exceedRedirectOptions?: SecurityPolicyRuleRedirectOptions;
            /** Threshold at which to begin ratelimiting. */
            rateLimitThreshold?: SecurityPolicyRuleRateLimitOptionsThreshold;
        }
        interface SecurityPolicyRuleRateLimitOptionsThreshold {
            /** Number of HTTP(S) requests for calculating the threshold. */
            count?: number;
            /** Interval over which the threshold is computed. */
            intervalSec?: number;
        }
        interface SecurityPolicyRuleRedirectOptions {
            /** Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA. */
            target?: string;
            /** Type of the redirect action. */
            type?: string;
        }
        interface SecuritySettings {
            /**
             * Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to
             * a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
             */
            clientTlsPolicy?: string;
            /**
             * Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents
             * its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues.
             * Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server
             * certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with
             * loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has
             * no impact.
             */
            subjectAltNames?: string[];
        }
        interface SerialPortOutput {
            /** [Output Only] The contents of the console output. */
            contents?: string;
            /** [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output. */
            kind?: string;
            /**
             * [Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the `contents` property. Use this value in the
             * next request as the start parameter.
             */
            next?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /**
             * The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer
             * (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the
             * `start` value that was specified in the request.
             */
            start?: string;
        }
        interface ServerBinding {
            type?: string;
        }
        interface ServiceAccount {
            /** Email address of the service account. */
            email?: string;
            /** The list of scopes to be made available for this service account. */
            scopes?: string[];
        }
        interface ServiceAttachment {
            /** [Output Only] An array of connections for all the consumers connected to this service attachment. */
            connectedEndpoints?: ServiceAttachmentConnectedEndpoint[];
            /**
             * The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from
             * consumer forwarding rules.
             */
            connectionPreference?: string;
            /** Projects that are allowed to connect to this service attachment. */
            consumerAcceptLists?: ServiceAttachmentConsumerProjectLimit[];
            /** Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number. */
            consumerRejectLists?: string[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name:
             * "p.mycompany.com.". Current max number of domain names supported is 1.
             */
            domainNames?: string[];
            /** If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers. */
            enableProxyProtocol?: boolean;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment.
             * An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest
             * fingerprint, make a get() request to retrieve the ServiceAttachment.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment. */
            natSubnets?: string[];
            /** The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment. */
            producerForwardingRule?: string;
            /** [Output Only] An 128-bit global unique ID of the PSC service attachment. */
            pscServiceAttachmentId?: Uint128;
            /**
             * [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It
             * is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** The URL of a service serving the endpoint identified by this service attachment. */
            targetService?: string;
        }
        interface ServiceAttachmentAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ServiceAttachmentsScopedList resources. */
            items?: { [P in string]: ServiceAttachmentsScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ServiceAttachmentConnectedEndpoint {
            /** The url of a connected endpoint. */
            endpoint?: string;
            /** The PSC connection id of the connected endpoint. */
            pscConnectionId?: string;
            /** The status of a connected endpoint to this service attachment. */
            status?: string;
        }
        interface ServiceAttachmentConsumerProjectLimit {
            /** The value of the limit to set. */
            connectionLimit?: number;
            /** The network URL for the network to set the limit for. */
            networkUrl?: string;
            /** The project id or number for the project to set the limit for. */
            projectIdOrNum?: string;
        }
        interface ServiceAttachmentList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of ServiceAttachment resources. */
            items?: ServiceAttachment[];
            /** [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ServiceAttachmentsScopedList {
            /** A list of ServiceAttachments contained in this scope. */
            serviceAttachments?: ServiceAttachment[];
            /** Informational warning which replaces the list of service attachments when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ShareSettings {
            /** A map of project id and project config. This is only valid when share_type's value is SPECIFIC_PROJECTS. */
            projectMap?: { [P in string]: ShareSettingsProjectConfig };
            /** Type of sharing for this shared-reservation */
            shareType?: string;
        }
        interface ShareSettingsProjectConfig {
            /** The project ID, should be same as the key of this project config in the parent map. */
            projectId?: string;
        }
        interface ShieldedInstanceConfig {
            /** Defines whether the instance has integrity monitoring enabled. Enabled by default. */
            enableIntegrityMonitoring?: boolean;
            /** Defines whether the instance has Secure Boot enabled. Disabled by default. */
            enableSecureBoot?: boolean;
            /** Defines whether the instance has the vTPM enabled. Enabled by default. */
            enableVtpm?: boolean;
        }
        interface ShieldedInstanceIdentity {
            /** An Endorsement Key (EK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM. */
            encryptionKey?: ShieldedInstanceIdentityEntry;
            /** [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry. */
            kind?: string;
            /** An Attestation Key (AK) made by the RSA 2048 algorithm issued to the Shielded Instance's vTPM. */
            signingKey?: ShieldedInstanceIdentityEntry;
        }
        interface ShieldedInstanceIdentityEntry {
            /** A PEM-encoded X.509 certificate. This field can be empty. */
            ekCert?: string;
            /** A PEM-encoded public key. */
            ekPub?: string;
        }
        interface ShieldedInstanceIntegrityPolicy {
            /** Updates the integrity policy baseline using the measurements from the VM instance's most recent boot. */
            updateAutoLearnPolicy?: boolean;
        }
        interface SignedUrlKey {
            /**
             * Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            keyName?: string;
            /** 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string. */
            keyValue?: string;
        }
        interface Snapshot {
            /** [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64. */
            architecture?: string;
            /** [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk. */
            autoCreated?: boolean;
            /**
             * Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only
             * for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only
             * if it has a non-empty value.
             */
            chainName?: string;
            /** [Output Only] Size in bytes of the snapshot at creation time. */
            creationSizeBytes?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] Size of the source disk, specified in GB. */
            diskSizeGb?: string;
            /** [Output Only] Number of bytes downloaded to restore a snapshot to a disk. */
            downloadBytes?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by
             * Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
             */
            labelFingerprint?: string;
            /** Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty. */
            labels?: { [P in string]: string };
            /** [Output Only] Integer license codes indicating which licenses are attached to this snapshot. */
            licenseCodes?: string[];
            /** [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image). */
            licenses?: string[];
            /** An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API. */
            locationHint?: string;
            /**
             * Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] Reserved for future use. */
            satisfiesPzs?: boolean;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot
             * later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect
             * access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and
             * you do not need to provide a key to use the snapshot later.
             */
            snapshotEncryptionKey?: CustomerEncryptionKey;
            /** Indicates the type of the snapshot. */
            snapshotType?: string;
            /** The source disk used to create this snapshot. */
            sourceDisk?: string;
            /** The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key. */
            sourceDiskEncryptionKey?: CustomerEncryptionKey;
            /**
             * [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a
             * given disk name.
             */
            sourceDiskId?: string;
            /** [Output Only] URL of the resource policy which created this scheduled snapshot. */
            sourceSnapshotSchedulePolicy?: string;
            /** [Output Only] ID of the resource policy which created this scheduled snapshot. */
            sourceSnapshotSchedulePolicyId?: string;
            /** [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING. */
            status?: string;
            /** [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion. */
            storageBytes?: string;
            /**
             * [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning
             * the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
             */
            storageBytesStatus?: string;
            /** Cloud Storage bucket storage location of the snapshot (regional or multi-regional). */
            storageLocations?: string[];
        }
        interface SnapshotList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Snapshot resources. */
            items?: Snapshot[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SourceDiskEncryptionKey {
            /** The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key. */
            diskEncryptionKey?: CustomerEncryptionKey;
            /**
             * URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: -
             * https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - projects/project/zones/zone/disks/disk - zones/zone/disks/disk
             */
            sourceDisk?: string;
        }
        interface SourceInstanceParams {
            /**
             * Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R/W disks, the source images for each disk will be used. For read-only disks, they
             * will be attached in read-only mode. Local SSD disks will be created as blank volumes.
             */
            diskConfigs?: DiskInstantiationConfig[];
        }
        interface SourceInstanceProperties {
            /**
             * Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than
             * their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable
             * IP forwarding documentation for more information.
             */
            canIpForward?: boolean;
            /** Whether the instance created from this machine image should be protected against deletion. */
            deletionProtection?: boolean;
            /** An optional text description for the instances that are created from this machine image. */
            description?: string;
            /** An array of disks that are associated with the instances that are created from this machine image. */
            disks?: SavedAttachedDisk[];
            /** A list of guest accelerator cards' type and count to use for instances created from this machine image. */
            guestAccelerators?: AcceleratorConfig[];
            /** KeyRevocationActionType of the instance. Supported options are "STOP" and "NONE". The default value is "NONE" if it is not specified. */
            keyRevocationActionType?: string;
            /** Labels to apply to instances that are created from this machine image. */
            labels?: { [P in string]: string };
            /** The machine type to use for instances that are created from this machine image. */
            machineType?: string;
            /**
             * The metadata key/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance
             * metadata for more information.
             */
            metadata?: Metadata;
            /**
             * Minimum cpu/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu/platform. Applicable values are the
             * friendly names of CPU platforms, such as minCpuPlatform: "Intel Haswell" or minCpuPlatform: "Intel Sandy Bridge". For more information, read Specifying a Minimum CPU Platform.
             */
            minCpuPlatform?: string;
            /** An array of network access configurations for this interface. */
            networkInterfaces?: NetworkInterface[];
            /** Specifies the scheduling options for the instances that are created from this machine image. */
            scheduling?: Scheduling;
            /**
             * A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata
             * queries to obtain the access tokens for these instances.
             */
            serviceAccounts?: ServiceAccount[];
            /**
             * A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify
             * this list of tags. Each tag within the list must comply with RFC1035.
             */
            tags?: Tags;
        }
        interface SslCertificate {
            /**
             * A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at
             * least one intermediate cert.
             */
            certificate?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] Expire time of the certificate. RFC3339 */
            expireTime?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates. */
            kind?: string;
            /** Configuration and status of a managed SSL certificate. */
            managed?: SslCertificateManagedSslCertificate;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field. */
            privateKey?: string;
            /** [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate. */
            region?: string;
            /** [Output only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Configuration and status of a self-managed SSL certificate. */
            selfManaged?: SslCertificateSelfManagedSslCertificate;
            /** [Output Only] Domains associated with the certificate via Subject Alternative Name. */
            subjectAlternativeNames?: string[];
            /**
             * (Optional) Specifies the type of SSL certificate, either "SELF_MANAGED" or "MANAGED". If not specified, the certificate is self-managed and the fields certificate and private_key
             * are used.
             */
            type?: string;
        }
        interface SslCertificateAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SslCertificatesScopedList resources. */
            items?: { [P in string]: SslCertificatesScopedList };
            /** [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SslCertificateList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SslCertificate resources. */
            items?: SslCertificate[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SslCertificateManagedSslCertificate {
            /**
             * The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the [maximum number of domains per Google-managed SSL
             * certificate](/load-balancing/docs/quotas#ssl_certificates).
             */
            domains?: string[];
            /** [Output only] Detailed statuses of the domains specified for managed certificate resource. */
            domainStatus?: { [P in string]: string };
            /** [Output only] Status of the managed certificate resource. */
            status?: string;
        }
        interface SslCertificateSelfManagedSslCertificate {
            /** A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert. */
            certificate?: string;
            /** A write-only private key in PEM format. Only insert requests will include this field. */
            privateKey?: string;
        }
        interface SslCertificatesScopedList {
            /** List of SslCertificates contained in this scope. */
            sslCertificates?: SslCertificate[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SSLHealthCheck {
            /** The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all
             * backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and
             * instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only
             * supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that
             * can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the
             * port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend
             * service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake. */
            request?: string;
            /**
             * Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends
             * this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
             */
            response?: string;
        }
        interface SslPoliciesAggregatedList {
            etag?: string;
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SslPoliciesScopedList resources. */
            items?: { [P in string]: SslPoliciesScopedList };
            /** [Output Only] Type of resource. Always compute#sslPolicyAggregatedList for lists of SSL Policies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SslPoliciesList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SslPolicy resources. */
            items?: SslPolicy[];
            /** [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SslPoliciesListAvailableFeaturesResponse {
            features?: string[];
        }
        interface SslPoliciesScopedList {
            /** A list of SslPolicies contained in this scope. */
            sslPolicies?: SslPolicy[];
            /** Informational warning which replaces the list of SSL policies when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SslPolicy {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /**
             * A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is
             * not CUSTOM.
             */
            customFeatures?: string[];
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The list of features enabled in the SSL policy. */
            enabledFeatures?: string[];
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An
             * up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get()
             * request to retrieve an SslPolicy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies. */
            kind?: string;
            /** The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2. */
            minTlsVersion?: string;
            /**
             * Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression
             * `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last
             * character, which cannot be a dash.
             */
            name?: string;
            /**
             * Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If
             * using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
             */
            profile?: string;
            /** [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages. */
            warnings?: Array<{
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            }>;
        }
        interface SslPolicyReference {
            /** URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource. */
            sslPolicy?: string;
        }
        interface StatefulPolicy {
            preservedState?: StatefulPolicyPreservedState;
        }
        interface StatefulPolicyPreservedState {
            /** Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks. */
            disks?: { [P in string]: StatefulPolicyPreservedStateDiskDevice };
        }
        interface StatefulPolicyPreservedStateDiskDevice {
            /**
             * These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no
             * longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
             */
            autoDelete?: string;
        }
        interface Subnetwork {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time. */
            description?: string;
            /**
             * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org
             * policy, if there is no org policy specified, then it will default to disabled. This field isn't supported with the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
             */
            enableFlowLogs?: boolean;
            /** The external IPv6 address range that is owned by this subnetwork. */
            externalIpv6Prefix?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An
             * up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a
             * get() request to retrieve a Subnetwork.
             */
            fingerprint?: string;
            /** [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork. */
            gatewayAddress?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
            internalIpv6Prefix?: string;
            /**
             * The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 100.64.0.0/10. Ranges must be
             * unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The
             * range can be expanded after creation using expandIpCidrRange.
             */
            ipCidrRange?: string;
            /** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
            ipv6AccessType?: string;
            /** [Output Only] This field is for internal use. */
            ipv6CidrRange?: string;
            /** [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources. */
            kind?: string;
            /** This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging. */
            logConfig?: SubnetworkLogConfig;
            /**
             * The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be
             * 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time. */
            network?: string;
            /**
             * Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using
             * setPrivateIpGoogleAccess.
             */
            privateIpGoogleAccess?: boolean;
            /** This field is for internal use. This field can be both set at resource creation time and updated using patch. */
            privateIpv6GoogleAccess?: string;
            /**
             * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a
             * user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with
             * the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
             */
            purpose?: string;
            /** URL of the region where the Subnetwork resides. This field can be set only at resource creation time. */
            region?: string;
            /**
             * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is
             * currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with
             * a patch request.
             */
            role?: string;
            /**
             * An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork.
             * The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
             */
            secondaryIpRanges?: SubnetworkSecondaryRange[];
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and
             * IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
             */
            stackType?: string;
            /**
             * [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have
             * the purpose set to INTERNAL_HTTPS_LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until
             * it reaches a status of READY
             */
            state?: string;
        }
        interface SubnetworkAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of SubnetworksScopedList resources. */
            items?: { [P in string]: SubnetworksScopedList };
            /** [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SubnetworkList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Subnetwork resources. */
            items?: Subnetwork[];
            /** [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SubnetworkLogConfig {
            /**
             * Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the
             * amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
             */
            aggregationInterval?: string;
            /**
             * Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org
             * policy, if there is no org policy specified, then it will default to disabled.
             */
            enable?: boolean;
            /** Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging. */
            filterExpr?: string;
            /**
             * Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork
             * where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected
             * logs are reported.
             */
            flowSampling?: number;
            /**
             * Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs.
             * Default is EXCLUDE_ALL_METADATA.
             */
            metadata?: string;
            /** Can only be specified if VPC flow logs for this subnetwork is enabled and "metadata" was set to CUSTOM_METADATA. */
            metadataFields?: string[];
        }
        interface SubnetworkSecondaryRange {
            /**
             * The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all
             * primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
             */
            ipCidrRange?: string;
            /**
             * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The
             * name must be unique within the subnetwork.
             */
            rangeName?: string;
        }
        interface SubnetworksExpandIpCidrRangeRequest {
            /**
             * The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can
             * only be larger than (i.e. a superset of) the range previously defined before the update.
             */
            ipCidrRange?: string;
        }
        interface SubnetworksScopedList {
            /** A list of subnetworks contained in this scope. */
            subnetworks?: Subnetwork[];
            /** An informational warning that appears when the list of addresses is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface SubnetworksSetPrivateIpGoogleAccessRequest {
            privateIpGoogleAccess?: boolean;
        }
        interface Subsetting {
            policy?: string;
        }
        interface Tags {
            /**
             * Specifies a fingerprint for this request, which is essentially a hash of the tags' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine
             * and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint,
             * make get() request to the instance.
             */
            fingerprint?: string;
            /** An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035. */
            items?: string[];
        }
        interface TargetGrpcProxy {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An
             * up-to-date fingerprint must be provided in order to patch/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint,
             * make a get() request to retrieve the TargetGrpcProxy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource type. The server generates this identifier. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Server-defined URL with id for the resource. */
            selfLinkWithId?: string;
            /** URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC. */
            urlMap?: string;
            /**
             * If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on
             * urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use "xds:///" scheme in the target URI of the service it is connecting to. If
             * false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use "xds:///"
             * scheme in the target URI of the service it is connecting to
             */
            validateForProxyless?: boolean;
        }
        interface TargetGrpcProxyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetGrpcProxy resources. */
            items?: TargetGrpcProxy[];
            /** [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetHttpProxiesScopedList {
            /** A list of TargetHttpProxies contained in this scope. */
            targetHttpProxies?: TargetHttpProxy[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetHttpProxy {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An
             * up-to-date fingerprint must be provided in order to patch/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint,
             * make a get() request to retrieve the TargetHttpProxy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy
             * proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure
             * Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is
             * false.
             */
            proxyBind?: boolean;
            /** [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** URL to the UrlMap resource that defines the mapping from URL to the BackendService. */
            urlMap?: string;
        }
        interface TargetHttpProxyAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetHttpProxiesScopedList resources. */
            items?: { [P in string]: TargetHttpProxiesScopedList };
            /** [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
        }
        interface TargetHttpProxyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetHttpProxy resources. */
            items?: TargetHttpProxy[];
            /** Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetHttpsProxiesScopedList {
            /** A list of TargetHttpsProxies contained in this scope. */
            targetHttpsProxies?: TargetHttpsProxy[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetHttpsProxiesSetCertificateMapRequest {
            /** URL of the Certificate Map to associate with this TargetHttpsProxy. */
            certificateMap?: string;
        }
        interface TargetHttpsProxiesSetQuicOverrideRequest {
            /** QUIC policy for the TargetHttpsProxy resource. */
            quicOverride?: string;
        }
        interface TargetHttpsProxiesSetSslCertificatesRequest {
            /**
             * New set of SslCertificate resources to associate with this TargetHttpsProxy resource. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL
             * certificates.
             */
            sslCertificates?: string[];
        }
        interface TargetHttpsProxy {
            /**
             * Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be
             * restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to
             * globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. Note: This field currently has no impact.
             */
            authorizationPolicy?: string;
            /**
             * URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will
             * be ignored.
             */
            certificateMap?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy.
             * An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint,
             * make a get() request to retrieve the TargetHttpsProxy.
             */
            fingerprint?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy
             * proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure
             * Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is
             * false.
             */
            proxyBind?: boolean;
            /**
             * Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify
             * NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible.
             * - When quic-override is set to DISABLE, the load balancer doesn't use QUIC. - If the quic-override flag is not specified, NONE is implied.
             */
            quicOverride?: string;
            /** [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global
             * TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted. Note: This field
             * currently has no impact.
             */
            serverTlsPolicy?: string;
            /**
             * URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may
             * specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
             */
            sslCertificates?: string[];
            /** URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured. */
            sslPolicy?: string;
            /**
             * A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a
             * URL map: - https://www.googleapis.compute/v1/projects/project/global/urlMaps/ url-map - projects/project/global/urlMaps/url-map - global/urlMaps/url-map
             */
            urlMap?: string;
        }
        interface TargetHttpsProxyAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetHttpsProxiesScopedList resources. */
            items?: { [P in string]: TargetHttpsProxiesScopedList };
            /** [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetHttpsProxyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetHttpsProxy resources. */
            items?: TargetHttpsProxy[];
            /** Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetInstance {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /**
             * A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL
             * to the desired virtual machine. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instances/instance -
             * projects/project/zones/zone/instances/instance - zones/zone/instances/instance
             */
            instance?: string;
            /** [Output Only] The type of the resource. Always compute#targetInstance for target instances. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance. */
            natPolicy?: string;
            /** The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to. */
            network?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            zone?: string;
        }
        interface TargetInstanceAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetInstance resources. */
            items?: { [P in string]: TargetInstancesScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetInstanceList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetInstance resources. */
            items?: TargetInstance[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetInstancesScopedList {
            /** A list of target instances contained in this scope. */
            targetInstances?: TargetInstance[];
            /** Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetPool {
            /**
             * The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field
             * is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in
             * the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set,
             * or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy
             * instances with the best effort, or to all instances when no instance is healthy.
             */
            backupPool?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of
             * the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the
             * primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in
             * the backup pool are unhealthy, the traffic will be directed back to the primary pool in the "force" mode, where traffic will be spread to the healthy instances with the best effort,
             * or to all instances when no instance is healthy.
             */
            failoverRatio?: number;
            /**
             * The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only
             * one health check may be specified.
             */
            healthChecks?: string[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool. */
            instances?: string[];
            /** [Output Only] Type of the resource. Always compute#targetPool for target pools. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** [Output Only] URL of the region where the target pool resides. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT_IP: Connections from the same
             * client IP will go to the same instance in the pool while that instance remains healthy. CLIENT_IP_PROTO: Connections from the same client IP with the same IP protocol will go to the
             * same instance in the pool while that instance remains healthy.
             */
            sessionAffinity?: string;
        }
        interface TargetPoolAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetPool resources. */
            items?: { [P in string]: TargetPoolsScopedList };
            /** [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetPoolInstanceHealth {
            healthStatus?: HealthStatus[];
            /** [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance. */
            kind?: string;
        }
        interface TargetPoolList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetPool resources. */
            items?: TargetPool[];
            /** [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetPoolsAddHealthCheckRequest {
            /** The HttpHealthCheck to add to the target pool. */
            healthChecks?: HealthCheckReference[];
        }
        interface TargetPoolsAddInstanceRequest {
            /**
             * A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs: -
             * https://www.googleapis.com/compute/v1/projects/project-id/zones/zone /instances/instance-name - projects/project-id/zones/zone/instances/instance-name -
             * zones/zone/instances/instance-name
             */
            instances?: InstanceReference[];
        }
        interface TargetPoolsRemoveHealthCheckRequest {
            /**
             * Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs: - https://www.googleapis.com/compute/beta/projects/project
             * /global/httpHealthChecks/health-check - projects/project/global/httpHealthChecks/health-check - global/httpHealthChecks/health-check
             */
            healthChecks?: HealthCheckReference[];
        }
        interface TargetPoolsRemoveInstanceRequest {
            /** URLs of the instances to be removed from target pool. */
            instances?: InstanceReference[];
        }
        interface TargetPoolsScopedList {
            /** A list of target pools contained in this scope. */
            targetPools?: TargetPool[];
            /** Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetReference {
            target?: string;
        }
        interface TargetSslProxiesSetBackendServiceRequest {
            /** The URL of the new BackendService resource for the targetSslProxy. */
            service?: string;
        }
        interface TargetSslProxiesSetCertificateMapRequest {
            /** URL of the Certificate Map to associate with this TargetSslProxy. */
            certificateMap?: string;
        }
        interface TargetSslProxiesSetProxyHeaderRequest {
            /** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
            proxyHeader?: string;
        }
        interface TargetSslProxiesSetSslCertificatesRequest {
            /**
             * New set of URLs to SslCertificate resources to associate with this TargetSslProxy. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL
             * certificates.
             */
            sslCertificates?: string[];
        }
        interface TargetSslProxy {
            /**
             * URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will
             * be ignored.
             */
            certificateMap?: string;
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** URL to the BackendService resource. */
            service?: string;
            /**
             * URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL
             * certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
             */
            sslCertificates?: string[];
            /** URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured. */
            sslPolicy?: string;
        }
        interface TargetSslProxyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetSslProxy resources. */
            items?: TargetSslProxy[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetTcpProxiesScopedList {
            /** A list of TargetTcpProxies contained in this scope. */
            targetTcpProxies?: TargetTcpProxy[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetTcpProxiesSetBackendServiceRequest {
            /** The URL of the new BackendService resource for the targetTcpProxy. */
            service?: string;
        }
        interface TargetTcpProxiesSetProxyHeaderRequest {
            /** The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed. */
            proxyHeader?: string;
        }
        interface TargetTcpProxy {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED. When this field is set to true, Envoy
             * proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure
             * Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is
             * false.
             */
            proxyBind?: boolean;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** [Output Only] URL of the region where the regional TCP proxy resides. This field is not applicable to global TCP proxy. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** URL to the BackendService resource. */
            service?: string;
        }
        interface TargetTcpProxyAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetTcpProxiesScopedList resources. */
            items?: { [P in string]: TargetTcpProxiesScopedList };
            /** [Output Only] Type of resource. Always compute#targetTcpProxyAggregatedList for lists of Target TCP Proxies. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetTcpProxyList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetTcpProxy resources. */
            items?: TargetTcpProxy[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetVpnGateway {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway. */
            forwardingRules?: string[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
            network?: string;
            /** [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING. */
            status?: string;
            /** [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway. */
            tunnels?: string[];
        }
        interface TargetVpnGatewayAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetVpnGateway resources. */
            items?: { [P in string]: TargetVpnGatewaysScopedList };
            /** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetVpnGatewayList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of TargetVpnGateway resources. */
            items?: TargetVpnGateway[];
            /** [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TargetVpnGatewaysScopedList {
            /** [Output Only] A list of target VPN gateways contained in this scope. */
            targetVpnGateways?: TargetVpnGateway[];
            /** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface TCPHealthCheck {
            /** The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535. */
            port?: number;
            /** Not supported. */
            portName?: string;
            /**
             * Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health
             * check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all
             * backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and
             * instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only
             * supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that
             * can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the
             * port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend
             * service's named port in the instance group's list of named ports.
             */
            portSpecification?: string;
            /** Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE. */
            proxyHeader?: string;
            /** Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection. */
            request?: string;
            /**
             * Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response
             * ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp
             */
            response?: string;
        }
        interface TestFailure {
            /** The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
            actualOutputUrl?: string;
            /** Actual HTTP status code for rule with `urlRedirect` calculated by load balancer */
            actualRedirectResponseCode?: number;
            /** BackendService or BackendBucket returned by load balancer. */
            actualService?: string;
            /** The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters. */
            expectedOutputUrl?: string;
            /** Expected HTTP status code for rule with `urlRedirect` calculated by load balancer */
            expectedRedirectResponseCode?: number;
            /** Expected BackendService or BackendBucket resource the given URL should be mapped to. */
            expectedService?: string;
            /** HTTP headers of the request. */
            headers?: UrlMapTestHeader[];
            /** Host portion of the URL. */
            host?: string;
            /** Path portion including query parameters in the URL. */
            path?: string;
        }
        interface TestPermissionsRequest {
            /** The set of permissions to check for the 'resource'. Permissions with wildcards (such as '*' or 'storage.*') are not allowed. */
            permissions?: string[];
        }
        interface TestPermissionsResponse {
            /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
            permissions?: string[];
        }
        interface Uint128 {
            high?: string;
            low?: string;
        }
        interface UrlMap {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /**
             * defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before
             * forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set,
             * defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers
             * only support the urlRewrite action within defaultRouteAction. defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless
             * field set to true.
             */
            defaultRouteAction?: HttpRouteAction;
            /**
             * The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing
             * actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any
             * weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or
             * defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to
             * true.
             */
            defaultService?: string;
            /**
             * When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or
             * defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
             */
            defaultUrlRedirect?: HttpRedirectAction;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /**
             * Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date
             * fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to
             * retrieve a UrlMap.
             */
            fingerprint?: string;
            /**
             * Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified
             * under pathMatcher. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC
             * proxy that has validateForProxyless field set to true.
             */
            headerAction?: HttpHeaderAction;
            /** The list of host rules to use against the URL. */
            hostRules?: HostRule[];
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#urlMaps for url maps. */
            kind?: string;
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** The list of named PathMatchers to use against the URL. */
            pathMatchers?: PathMatcher[];
            /**
             * [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It
             * is not settable as a field in the request body.
             */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /**
             * The list of expected URL mapping tests. Request to update the UrlMap succeeds only if all test cases pass. You can specify a maximum of 100 tests per UrlMap. Not supported when the
             * URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
             */
            tests?: UrlMapTest[];
        }
        interface UrlMapList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of UrlMap resources. */
            items?: UrlMap[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface UrlMapReference {
            urlMap?: string;
        }
        interface UrlMapsAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of UrlMapsScopedList resources. */
            items?: { [P in string]: UrlMapsScopedList };
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface UrlMapsScopedList {
            /** A list of UrlMaps contained in this scope. */
            urlMaps?: UrlMap[];
            /** Informational warning which replaces the list of backend services when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface UrlMapsValidateRequest {
            /**
             * Specifies the load balancer type(s) this validation request is for. Use EXTERNAL_MANAGED for HTTP/HTTPS External Global Load Balancer with Advanced Traffic Management. Use EXTERNAL
             * for Classic HTTP/HTTPS External Global Load Balancer. Other load balancer types are not supported. For more information, refer to Choosing a load balancer. If unspecified, the load
             * balancing scheme will be inferred from the backend service resources this URL map references. If that can not be inferred (for example, this URL map only references backend buckets,
             * or this Url map is for rewrites and redirects only and doesn't reference any backends), EXTERNAL will be used as the default type. If specified, the scheme(s) must not conflict with
             * the load balancing scheme of the backend service resources this Url map references.
             */
            loadBalancingSchemes?: string[];
            /** Content of the UrlMap to be validated. */
            resource?: UrlMap;
        }
        interface UrlMapsValidateResponse {
            result?: UrlMapValidationResult;
        }
        interface UrlMapTest {
            /** Description of this test case. */
            description?: string;
            /**
             * The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when
             * expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and
             * pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl
             * matches the URL in the load balancer's redirect response. If urlRedirect specifies https_redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If
             * urlRedirect specifies strip_query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
             */
            expectedOutputUrl?: string;
            /**
             * For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer's redirect response. expectedRedirectResponseCode
             * cannot be set when service is set.
             */
            expectedRedirectResponseCode?: number;
            /** HTTP headers for this request. If headers contains a host header, then host must also match the header value. */
            headers?: UrlMapTestHeader[];
            /** Host portion of the URL. If headers contains a host header, then host must also match the header value. */
            host?: string;
            /** Path portion of the URL. */
            path?: string;
            /** Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set. */
            service?: string;
        }
        interface UrlMapTestHeader {
            /** Header name. */
            name?: string;
            /** Header value. */
            value?: string;
        }
        interface UrlMapValidationResult {
            loadErrors?: string[];
            /** Whether the given UrlMap can be successfully loaded. If false, 'loadErrors' indicates the reasons. */
            loadSucceeded?: boolean;
            testFailures?: TestFailure[];
            /** If successfully loaded, this field indicates whether the test passed. If false, 'testFailures's indicate the reason of failure. */
            testPassed?: boolean;
        }
        interface UrlRewrite {
            /** Before forwarding the request to the selected service, the request's host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters. */
            hostRewrite?: string;
            /**
             * Before forwarding the request to the selected backend service, the matching portion of the request's path is replaced by pathPrefixRewrite. The value must be from 1 to 1024
             * characters.
             */
            pathPrefixRewrite?: string;
        }
        interface UsableSubnetwork {
            /** [Output Only] The external IPv6 address range that is assigned to this subnetwork. */
            externalIpv6Prefix?: string;
            /** [Output Only] The internal IPv6 address range that is assigned to this subnetwork. */
            internalIpv6Prefix?: string;
            /** The range of internal addresses that are owned by this subnetwork. */
            ipCidrRange?: string;
            /** The access type of IPv6 address this subnet holds. It's immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack. */
            ipv6AccessType?: string;
            /** Network URL. */
            network?: string;
            /**
             * The purpose of the resource. This field can be either PRIVATE_RFC_1918 or INTERNAL_HTTPS_LOAD_BALANCER. A subnetwork with purpose set to INTERNAL_HTTPS_LOAD_BALANCER is a
             * user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE_RFC_1918. The enableFlowLogs field isn't supported with
             * the purpose field set to INTERNAL_HTTPS_LOAD_BALANCER.
             */
            purpose?: string;
            /**
             * The role of subnetwork. Currently, this field is only used when purpose = INTERNAL_HTTPS_LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is
             * currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with
             * a patch request.
             */
            role?: string;
            /** Secondary IP ranges. */
            secondaryIpRanges?: UsableSubnetworkSecondaryRange[];
            /**
             * The stack type for the subnet. If set to IPV4_ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4_IPV6, new VMs in the subnet can be assigned both IPv4 and
             * IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
             */
            stackType?: string;
            /** Subnetwork URL. */
            subnetwork?: string;
        }
        interface UsableSubnetworksAggregatedList {
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output] A list of usable subnetwork URLs. */
            items?: UsableSubnetwork[];
            /** [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. In special cases listUsable
             * may return 0 subnetworks and nextPageToken which still should be used to get the next page of results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface UsableSubnetworkSecondaryRange {
            /** The range of IP addresses belonging to this subnetwork secondary range. */
            ipCidrRange?: string;
            /**
             * The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The
             * name must be unique within the subnetwork.
             */
            rangeName?: string;
        }
        interface UsageExportLocation {
            /**
             * The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the
             * bucket name by itself, such as example-bucket, or the bucket name with gs:// or https://storage.googleapis.com/ in front of it, such as gs://example-bucket.
             */
            bucketName?: string;
            /**
             * An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage_gce. The report is stored as a CSV file named
             * report_name_prefix_gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming
             * conventions.
             */
            reportNamePrefix?: string;
        }
        interface VmEndpointNatMappings {
            /** Name of the VM instance which the endpoint belongs to */
            instanceName?: string;
            interfaceNatMappings?: VmEndpointNatMappingsInterfaceNatMappings[];
        }
        interface VmEndpointNatMappingsInterfaceNatMappings {
            /**
             * List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example:
             * ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
             */
            drainNatIpPortRanges?: string[];
            /**
             * A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example:
             * ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
             */
            natIpPortRanges?: string[];
            /** Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain_nat_ip_port_ranges. */
            numTotalDrainNatPorts?: number;
            /** Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat_ip_port_ranges. */
            numTotalNatPorts?: number;
            /** Information about mappings provided by rules in this NAT. */
            ruleMappings?: VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings[];
            /** Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: "10.33.4.55/32", or "192.168.5.0/24". */
            sourceAliasIpRange?: string;
            /** Primary IP of the VM for this NIC. */
            sourceVirtualIp?: string;
        }
        interface VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {
            /**
             * List of all drain IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT.
             * Example: ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
             */
            drainNatIpPortRanges?: string[];
            /**
             * A list of all IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example:
             * ["2.2.2.2:12345-12355", "1.1.1.1:2234-2234"].
             */
            natIpPortRanges?: string[];
            /** Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain_nat_ip_port_ranges. */
            numTotalDrainNatPorts?: number;
            /** Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat_ip_port_ranges. */
            numTotalNatPorts?: number;
            /** Rule number of the NAT Rule. */
            ruleNumber?: number;
        }
        interface VmEndpointNatMappingsList {
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] A list of Nat mapping information of VM endpoints. */
            result?: VmEndpointNatMappings[];
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnGateway {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
            kind?: string;
            /**
             * A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by
             * Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the
             * request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an VpnGateway.
             */
            labelFingerprint?: string;
            /** Labels for this resource. These can only be added or modified by the setLabels method. Each label key/value pair must comply with RFC1035. Label values may be empty. */
            labels?: { [P in string]: string };
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /** URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created. */
            network?: string;
            /** [Output Only] URL of the region where the VPN gateway resides. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4_ONLY, IPV4_IPV6. If not specified, IPV4_ONLY will be used. */
            stackType?: string;
            /** The list of VPN interfaces associated with this VPN gateway. */
            vpnInterfaces?: VpnGatewayVpnGatewayInterface[];
        }
        interface VpnGatewayAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of VpnGateway resources. */
            items?: { [P in string]: VpnGatewaysScopedList };
            /** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnGatewayList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of VpnGateway resources. */
            items?: VpnGateway[];
            /** [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnGatewaysGetStatusResponse {
            result?: VpnGatewayStatus;
        }
        interface VpnGatewaysScopedList {
            /** [Output Only] A list of VPN gateways contained in this scope. */
            vpnGateways?: VpnGateway[];
            /** [Output Only] Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnGatewayStatus {
            /** List of VPN connection for this VpnGateway. */
            vpnConnections?: VpnGatewayStatusVpnConnection[];
        }
        interface VpnGatewayStatusHighAvailabilityRequirementState {
            /** Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION_REDUNDANCY_MET, CONNECTION_REDUNDANCY_NOT_MET. */
            state?: string;
            /** Indicates the reason why the VPN connection does not meet the high availability redundancy criteria/requirement. Valid values is INCOMPLETE_TUNNELS_COVERAGE. */
            unsatisfiedReason?: string;
        }
        interface VpnGatewayStatusTunnel {
            /** The VPN gateway interface this VPN tunnel is associated with. */
            localGatewayInterface?: number;
            /** The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway. */
            peerGatewayInterface?: number;
            /** URL reference to the VPN tunnel. */
            tunnelUrl?: string;
        }
        interface VpnGatewayStatusVpnConnection {
            /** URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
            peerExternalGateway?: string;
            /** URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway. */
            peerGcpGateway?: string;
            /** HighAvailabilityRequirementState for the VPN connection. */
            state?: VpnGatewayStatusHighAvailabilityRequirementState;
            /** List of VPN tunnels that are in this VPN connection. */
            tunnels?: VpnGatewayStatusTunnel[];
        }
        interface VpnGatewayVpnGatewayInterface {
            /** [Output Only] Numeric identifier for this VPN interface associated with the VPN gateway. */
            id?: number;
            /**
             * URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud
             * Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
             */
            interconnectAttachment?: string;
            /**
             * [Output Only] IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The
             * two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP
             * addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular
             * (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
             */
            ipAddress?: string;
        }
        interface VpnTunnel {
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** An optional description of this resource. Provide this property when you create the resource. */
            description?: string;
            /** [Output Only] Detailed status message for the VPN tunnel. */
            detailedStatus?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2. */
            ikeVersion?: number;
            /** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
            kind?: string;
            /**
             * Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges must
             * be disjoint. Only IPv4 is supported.
             */
            localTrafficSelector?: string[];
            /**
             * Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63
             * characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a
             * dash, lowercase letter, or digit, except the last character, which cannot be a dash.
             */
            name?: string;
            /**
             * URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field
             * peerGcpGateway.
             */
            peerExternalGateway?: string;
            /**
             * The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: `0`, `1`, `2`, `3`.
             * The number of IDs in use depends on the external VPN gateway redundancy type.
             */
            peerExternalGatewayInterface?: number;
            /**
             * URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly
             * available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same
             * vpnGatewayInterface ID in the peer GCP VPN gateway.
             */
            peerGcpGateway?: string;
            /** IP address of the peer VPN gateway. Only IPv4 is supported. */
            peerIp?: string;
            /** [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body. */
            region?: string;
            /**
             * Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0/16. The ranges
             * should be disjoint. Only IPv4 is supported.
             */
            remoteTrafficSelector?: string[];
            /** URL of the router resource to be used for dynamic routing. */
            router?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway. */
            sharedSecret?: string;
            /** Hash of the shared secret. */
            sharedSecretHash?: string;
            /**
             * [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING_FOR_FULL_CONFIG: Waiting to
             * receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST_HANDSHAKE:
             * Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK_ERROR: Deprecated, replaced by
             * NO_INCOMING_PACKETS - AUTHORIZATION_ERROR: Auth error (for example, bad shared secret). - NEGOTIATION_FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated
             * for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO_INCOMING_PACKETS: No incoming packets from peer. - REJECTED: Tunnel
             * configuration was rejected, can be result of being denied access. - ALLOCATING_RESOURCES: Cloud VPN is in the process of allocating all required resources. - STOPPED: Tunnel is
             * stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER_IDENTITY_MISMATCH: Peer identity does not match peer IP, probably
             * behind NAT. - TS_NARROWING_NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
             */
            status?: string;
            /** URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. */
            targetVpnGateway?: string;
            /**
             * URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target_vpn_gateway) if a High
             * Availability VPN gateway resource is created.
             */
            vpnGateway?: string;
            /** The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: `0`, `1`. */
            vpnGatewayInterface?: number;
        }
        interface VpnTunnelAggregatedList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of VpnTunnelsScopedList resources. */
            items?: { [P in string]: VpnTunnelsScopedList };
            /** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Unreachable resources. */
            unreachables?: string[];
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnTunnelList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of VpnTunnel resources. */
            items?: VpnTunnel[];
            /** [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface VpnTunnelsScopedList {
            /** A list of VPN tunnels contained in this scope. */
            vpnTunnels?: VpnTunnel[];
            /** Informational warning which replaces the list of addresses when the list is empty. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface WafExpressionSet {
            /**
             * A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like "stable" is particularly useful if a policy likes to avail newer set of expressions without
             * having to change the policy. A given alias name can't be used for more than one entity set.
             */
            aliases?: string[];
            /** List of available expressions. */
            expressions?: WafExpressionSetExpression[];
            /** Google specified expression set ID. The format should be: - E.g. XSS-20170329 required */
            id?: string;
        }
        interface WafExpressionSetExpression {
            /**
             * Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be
             * used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. required
             */
            id?: string;
        }
        interface WeightedBackendService {
            /**
             * The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as
             * part of this backendServiceWeight.
             */
            backendService?: string;
            /**
             * Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the
             * enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map
             * is bound to a target gRPC proxy that has validateForProxyless field set to true.
             */
            headerAction?: HttpHeaderAction;
            /**
             * Specifies the fraction of traffic sent to a backend service, computed as weight / (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is
             * determined only for new traffic. Once a user's request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend
             * service's session affinity policy. The value must be from 0 to 1000.
             */
            weight?: number;
        }
        interface XpnHostList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** [Output Only] A list of shared VPC host project URLs. */
            items?: Project[];
            /** [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface XpnResourceId {
            /** The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678). */
            id?: string;
            /** The type of the service resource. */
            type?: string;
        }
        interface Zone {
            /** [Output Only] Available cpu/platform selections for the zone. */
            availableCpuPlatforms?: string[];
            /** [Output Only] Creation timestamp in RFC3339 text format. */
            creationTimestamp?: string;
            /** [Output Only] The deprecation status associated with this zone. */
            deprecated?: DeprecationStatus;
            /** [Output Only] Textual description of the resource. */
            description?: string;
            /** [Output Only] The unique identifier for the resource. This identifier is defined by the server. */
            id?: string;
            /** [Output Only] Type of the resource. Always compute#zone for zones. */
            kind?: string;
            /** [Output Only] Name of the resource. */
            name?: string;
            /** [Output Only] Full URL reference to the region which hosts the zone. */
            region?: string;
            /** [Output Only] Server-defined URL for the resource. */
            selfLink?: string;
            /** [Output Only] Status of the zone, either UP or DOWN. */
            status?: string;
            /** [Output Only] Reserved for future use. */
            supportsPzs?: boolean;
        }
        interface ZoneList {
            /** [Output Only] Unique identifier for the resource; defined by the server. */
            id?: string;
            /** A list of Zone resources. */
            items?: Zone[];
            /** Type of resource. */
            kind?: string;
            /**
             * [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the
             * query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
             */
            nextPageToken?: string;
            /** [Output Only] Server-defined URL for this resource. */
            selfLink?: string;
            /** [Output Only] Informational warning message. */
            warning?: {
                /** [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response. */
                code?: string;
                /** [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" } */
                data?: Array<{
                    /**
                     * [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone,
                     * this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning
                     * about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
                     */
                    key?: string;
                    /** [Output Only] A warning data value corresponding to the key. */
                    value?: string;
                }>;
                /** [Output Only] A human-readable description of the warning code. */
                message?: string;
            };
        }
        interface ZoneSetLabelsRequest {
            /**
             * The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request
             * to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest
             * fingerprint.
             */
            labelFingerprint?: string;
            /** The labels to set for this resource. */
            labels?: { [P in string]: string };
        }
        interface ZoneSetPolicyRequest {
            /** Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use 'policy' to specify bindings. */
            bindings?: Binding[];
            /** Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag. */
            etag?: string;
            /**
             * REQUIRED: The complete policy to be applied to the 'resource'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain
             * services (like Projects) might reject them.
             */
            policy?: Policy;
        }
        interface AcceleratorTypesResource {
            /** Retrieves an aggregated list of accelerator types. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<AcceleratorTypeAggregatedList>;
            /** Returns the specified accelerator type. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** Name of the accelerator type to return. */
                acceleratorType: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<AcceleratorType>;
            /** Retrieves a list of accelerator types that are available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<AcceleratorTypeList>;
        }
        interface AddressesResource {
            /** Retrieves an aggregated list of addresses. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<AddressAggregatedList>;
            /** Deletes the specified address resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Name of the address resource to delete. */
                address: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified address resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Name of the address resource to return. */
                address: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Address>;
            /** Creates an address resource in the specified project by using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Address;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Address): Request<Operation>;
            /** Retrieves a list of addresses contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<AddressList>;
            /** Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
        }
        interface AutoscalersResource {
            /** Retrieves an aggregated list of autoscalers. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<AutoscalerAggregatedList>;
            /** Deletes the specified autoscaler. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to delete. */
                autoscaler: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to return. */
                autoscaler: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Autoscaler>;
            /** Creates an autoscaler in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: Autoscaler): Request<Operation>;
            /** Retrieves a list of autoscalers contained within the specified zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<AutoscalerList>;
            /**
             * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing
             * rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to patch. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to patch. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: Autoscaler): Request<Operation>;
            /** Updates an autoscaler in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to update. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to update. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: Autoscaler): Request<Operation>;
        }
        interface BackendBucketsResource {
            /** Adds a key for validating requests with signed URLs for this backend bucket. */
            addSignedUrlKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SignedUrlKey;
            }): Request<Operation>;
            addSignedUrlKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SignedUrlKey): Request<Operation>;
            /** Deletes the specified BackendBucket resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to delete. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes a key for validating requests with signed URLs for this backend bucket. */
            deleteSignedUrlKey(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Signed URL Key to delete. */
                keyName: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to return. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendBucket>;
            /** Creates a BackendBucket resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendBucket;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendBucket): Request<Operation>;
            /** Retrieves the list of BackendBucket resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendBucketList>;
            /** Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to patch. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendBucket;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to patch. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendBucket): Request<Operation>;
            /** Sets the edge security policy for the specified backend bucket. */
            setEdgeSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SecurityPolicyReference;
            }): Request<Operation>;
            setEdgeSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SecurityPolicyReference): Request<Operation>;
            /** Updates the specified BackendBucket resource with the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to update. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendBucket;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendBucket resource to update. */
                backendBucket: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendBucket): Request<Operation>;
        }
        interface BackendServicesResource {
            /** Adds a key for validating requests with signed URLs for this backend service. */
            addSignedUrlKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SignedUrlKey;
            }): Request<Operation>;
            addSignedUrlKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SignedUrlKey): Request<Operation>;
            /** Retrieves the list of all BackendService resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendServiceAggregatedList>;
            /** Deletes the specified BackendService resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to delete. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes a key for validating requests with signed URLs for this backend service. */
            deleteSignedUrlKey(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the Signed URL Key should be added. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Signed URL Key to delete. */
                keyName: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified BackendService resource. Gets a list of available backend services. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to return. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendService>;
            /** Gets the most recent health check results for this BackendService. Example request body: { "group": "/zones/us-east1-b/instanceGroups/lb-backend-example" } */
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the queried instance belongs. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ResourceGroupReference;
            }): Request<BackendServiceGroupHealth>;
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the queried instance belongs. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ResourceGroupReference): Request<BackendServiceGroupHealth>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview . */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
            /** Retrieves the list of BackendService resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendServiceList>;
            /**
             * Patches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and
             * uses the JSON merge patch format and processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to patch. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to patch. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
            /** Sets the edge security policy for the specified backend service. */
            setEdgeSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the edge security policy should be set. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SecurityPolicyReference;
            }): Request<Operation>;
            setEdgeSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the edge security policy should be set. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SecurityPolicyReference): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview */
            setSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SecurityPolicyReference;
            }): Request<Operation>;
            setSecurityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to which the security policy should be set. The name should conform to RFC1035. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SecurityPolicyReference): Request<Operation>;
            /** Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to update. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to update. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
        }
        interface DisksResource {
            /** Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation. */
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: DisksAddResourcePoliciesRequest;
            }): Request<Operation>;
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: DisksAddResourcePoliciesRequest): Request<Operation>;
            /** Retrieves an aggregated list of persistent disks. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<DiskAggregatedList>;
            /**
             * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating
             * snapshots in a project different from the source disk project.
             */
            createSnapshot(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the persistent disk to snapshot. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process. */
                guestFlush?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Snapshot;
            }): Request<Operation>;
            createSnapshot(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the persistent disk to snapshot. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** [Input Only] Whether to attempt an application consistent snapshot by informing the OS to prepare for the snapshot process. */
                guestFlush?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Snapshot): Request<Operation>;
            /**
             * Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from
             * the disk. You must separately delete snapshots.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the persistent disk to delete. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the persistent disk to return. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Disk>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Policy>;
            /**
             * Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty
             * 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Source image to restore onto a disk. This field is optional. */
                sourceImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Disk;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Source image to restore onto a disk. This field is optional. */
                sourceImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Disk): Request<Operation>;
            /** Retrieves a list of persistent disks contained within the specified zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<DiskList>;
            /** Removes resource policies from a disk. */
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: DisksRemoveResourcePoliciesRequest;
            }): Request<Operation>;
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: DisksRemoveResourcePoliciesRequest): Request<Operation>;
            /** Resizes the specified persistent disk. You can only increase the size of the disk. */
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The name of the persistent disk. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: DisksResizeRequest;
            }): Request<Operation>;
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The name of the persistent disk. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: DisksResizeRequest): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ZoneSetPolicyRequest): Request<Policy>;
            /** Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ZoneSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface DiskTypesResource {
            /** Retrieves an aggregated list of disk types. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<DiskTypeAggregatedList>;
            /** Returns the specified disk type. Gets a list of available disk types by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the disk type to return. */
                diskType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<DiskType>;
            /** Retrieves a list of disk types available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<DiskTypeList>;
        }
        interface ExternalVpnGatewaysResource {
            /** Deletes the specified externalVpnGateway. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the externalVpnGateways to delete. */
                externalVpnGateway: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the externalVpnGateway to return. */
                externalVpnGateway: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ExternalVpnGateway>;
            /** Creates a ExternalVpnGateway in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ExternalVpnGateway;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ExternalVpnGateway): Request<Operation>;
            /** Retrieves the list of ExternalVpnGateway available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ExternalVpnGatewayList>;
            /** Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface FirewallPoliciesResource {
            /** Inserts an association for the specified firewall policy. */
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association
                 * already exists.
                 */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyAssociation;
            }): Request<Operation>;
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association
                 * already exists.
                 */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyAssociation): Request<Operation>;
            /** Inserts a rule into a firewall policy. */
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Copies rules to the specified firewall policy. */
            cloneRules(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** The firewall policy from which to copy rules. */
                sourceFirewallPolicy?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes the specified policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to delete. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified firewall policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to get. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicy>;
            /** Gets an association with the specified name. */
            getAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried rule belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the association to get from the firewall policy. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyAssociation>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Gets a rule of the specified priority. */
            getRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried rule belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to get from the firewall policy. */
                priority?: number;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyRule>;
            /** Creates a new policy in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Parent ID for this request. The ID can be either be "folders/[FOLDER_ID]" if the parent is a folder or "organizations/[ORGANIZATION_ID]" if the parent is an organization. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Lists all the policies that have been configured for the specified folder or organization. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Parent ID for this request. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyList>;
            /** Lists associations of a specified target, i.e., organization or folder. */
            listAssociations(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The target resource to list associations. It is an organization, or a folder. */
                targetResource?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPoliciesListAssociationsResponse>;
            /** Moves the specified firewall policy. */
            move(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The new parent of the firewall policy. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Patches the specified policy with the data included in the request. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Patches a rule of the specified priority. */
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Removes an association for the specified firewall policy. */
            removeAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name for the attachment that will be removed. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes a rule of the specified priority. */
            removeRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to remove from the firewall policy. */
                priority?: number;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalOrganizationSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface FirewallsResource {
            /** Deletes the specified firewall. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to delete. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified firewall. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to return. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Firewall>;
            /** Creates a firewall rule in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Firewall;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Firewall): Request<Operation>;
            /** Retrieves the list of firewall rules available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallList>;
            /** Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to patch. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Firewall;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to patch. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Firewall): Request<Operation>;
            /**
             * Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update
             * individual fields, please use PATCH instead.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to update. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Firewall;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall rule to update. */
                firewall: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Firewall): Request<Operation>;
        }
        interface ForwardingRulesResource {
            /** Retrieves an aggregated list of forwarding rules. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ForwardingRuleAggregatedList>;
            /** Deletes the specified ForwardingRule resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to delete. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified ForwardingRule resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to return. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ForwardingRule>;
            /** Creates a ForwardingRule resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ForwardingRule;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ForwardingRule): Request<Operation>;
            /** Retrieves a list of ForwardingRule resources available to the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ForwardingRuleList>;
            /**
             * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
             * Currently, you can only patch the network_tier field.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to patch. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ForwardingRule;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to patch. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ForwardingRule): Request<Operation>;
            /** Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
            /** Changes target URL for forwarding rule. The new target should be of the same type as the old target. */
            setTarget(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource in which target is to be set. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetReference;
            }): Request<Operation>;
            setTarget(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource in which target is to be set. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetReference): Request<Operation>;
        }
        interface GlobalAddressesResource {
            /** Deletes the specified address resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Name of the address resource to delete. */
                address: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified address resource. Gets a list of available addresses by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Name of the address resource to return. */
                address: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Address>;
            /** Creates an address resource in the specified project by using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Address;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Address): Request<Operation>;
            /** Retrieves a list of global addresses. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<AddressList>;
            /** Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
        }
        interface GlobalForwardingRulesResource {
            /** Deletes the specified GlobalForwardingRule resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to delete. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to return. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ForwardingRule>;
            /** Creates a GlobalForwardingRule resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ForwardingRule;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ForwardingRule): Request<Operation>;
            /** Retrieves a list of GlobalForwardingRule resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ForwardingRuleList>;
            /**
             * Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.
             * Currently, you can only patch the network_tier field.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to patch. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ForwardingRule;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource to patch. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ForwardingRule): Request<Operation>;
            /** Sets the labels on the specified resource. To learn more about labels, read the Labeling resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
            /** Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target. */
            setTarget(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource in which target is to be set. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetReference;
            }): Request<Operation>;
            setTarget(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the ForwardingRule resource in which target is to be set. */
                forwardingRule: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetReference): Request<Operation>;
        }
        interface GlobalNetworkEndpointGroupsResource {
            /** Attach a network endpoint to the specified network endpoint group. */
            attachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: GlobalNetworkEndpointGroupsAttachEndpointsRequest;
            }): Request<Operation>;
            attachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalNetworkEndpointGroupsAttachEndpointsRequest): Request<Operation>;
            /** Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group to delete. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Detach the network endpoint from the specified network endpoint group. */
            detachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: GlobalNetworkEndpointGroupsDetachEndpointsRequest;
            }): Request<Operation>;
            detachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalNetworkEndpointGroupsDetachEndpointsRequest): Request<Operation>;
            /** Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroup>;
            /** Creates a network endpoint group in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworkEndpointGroup;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworkEndpointGroup): Request<Operation>;
            /** Retrieves the list of network endpoint groups that are located in the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroupList>;
            /** Lists the network endpoints in the specified network endpoint group. */
            listNetworkEndpoints(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroupsListNetworkEndpoints>;
        }
        interface GlobalOperationsResource {
            /** Retrieves an aggregated list of all operations. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<OperationAggregatedList>;
            /** Deletes the specified Operations resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to delete. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<void>;
            /** Retrieves the specified Operations resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Retrieves a list of Operation resources contained within the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<OperationList>;
            /**
             * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method
             * differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still
             * in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is
             * reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to
             * retry if the operation is not `DONE`.
             */
            wait(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
        }
        interface GlobalOrganizationOperationsResource {
            /** Deletes the specified Operations resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to delete. */
                operation: string;
                /** Parent ID for this request. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<void>;
            /** Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Parent ID for this request. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Retrieves a list of Operation resources contained within the specified organization. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Parent ID for this request. */
                parentId?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<OperationList>;
        }
        interface GlobalPublicDelegatedPrefixesResource {
            /** Deletes the specified global PublicDelegatedPrefix. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to delete. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified global PublicDelegatedPrefix resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to return. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicDelegatedPrefix>;
            /** Creates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicDelegatedPrefix;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicDelegatedPrefix): Request<Operation>;
            /** Lists the global PublicDelegatedPrefixes for a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicDelegatedPrefixList>;
            /**
             * Patches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to patch. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicDelegatedPrefix;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to patch. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicDelegatedPrefix): Request<Operation>;
        }
        interface HealthChecksResource {
            /** Retrieves the list of all HealthCheck resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthChecksAggregatedList>;
            /** Deletes the specified HealthCheck resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to delete. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to return. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheck>;
            /** Creates a HealthCheck resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
            /** Retrieves the list of HealthCheck resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheckList>;
            /**
             * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to patch. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to patch. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
            /** Updates a HealthCheck resource in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to update. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to update. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
        }
        interface HttpHealthChecksResource {
            /** Deletes the specified HttpHealthCheck resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to delete. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified HttpHealthCheck resource. Gets a list of available HTTP health checks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to return. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HttpHealthCheck>;
            /** Creates a HttpHealthCheck resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpHealthCheck;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpHealthCheck): Request<Operation>;
            /** Retrieves the list of HttpHealthCheck resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HttpHealthCheckList>;
            /**
             * Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to patch. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpHealthCheck;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to patch. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpHealthCheck): Request<Operation>;
            /** Updates a HttpHealthCheck resource in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to update. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpHealthCheck;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpHealthCheck resource to update. */
                httpHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpHealthCheck): Request<Operation>;
        }
        interface HttpsHealthChecksResource {
            /** Deletes the specified HttpsHealthCheck resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to delete. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified HttpsHealthCheck resource. Gets a list of available HTTPS health checks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to return. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HttpsHealthCheck>;
            /** Creates a HttpsHealthCheck resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpsHealthCheck;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpsHealthCheck): Request<Operation>;
            /** Retrieves the list of HttpsHealthCheck resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HttpsHealthCheckList>;
            /**
             * Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to patch. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpsHealthCheck;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to patch. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpsHealthCheck): Request<Operation>;
            /** Updates a HttpsHealthCheck resource in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to update. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HttpsHealthCheck;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HttpsHealthCheck resource to update. */
                httpsHealthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HttpsHealthCheck): Request<Operation>;
        }
        interface ImageFamilyViewsResource {
            /** Returns the latest image that is part of an image family, is not deprecated and is rolled out in the specified zone. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the image family to search for. */
                family: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<ImageFamilyView>;
        }
        interface ImagesResource {
            /** Deletes the specified image. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the image resource to delete. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead. */
            deprecate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Image name. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: DeprecationStatus;
            }): Request<Operation>;
            deprecate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Image name. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: DeprecationStatus): Request<Operation>;
            /** Returns the specified image. Gets a list of available images by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the image resource to return. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Image>;
            /** Returns the latest image that is part of an image family and is not deprecated. */
            getFromFamily(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the image family to search for. */
                family: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Image>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates an image in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Force image creation if true. */
                forceCreate?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Image;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Force image creation if true. */
                forceCreate?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Image): Request<Operation>;
            /**
             * Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that
             * belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the
             * respective image project, such as debian-cloud or windows-cloud.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ImageList>;
            /** Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the image resource to patch. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Image;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the image resource to patch. */
                image: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Image): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface InstanceGroupManagersResource {
            /**
             * Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target
             * pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is
             * marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the
             * listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has
             * elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
             */
            abandonInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersAbandonInstancesRequest;
            }): Request<Operation>;
            abandonInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            },
            body: InstanceGroupManagersAbandonInstancesRequest): Request<Operation>;
            /** Retrieves the list of managed instance groups and groups them by zone. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceGroupManagerAggregatedList>;
            /** Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions. */
            applyUpdatesToInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group, should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. Should conform to RFC1035. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersApplyUpdatesRequest;
            }): Request<Operation>;
            applyUpdatesToInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group, should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. Should conform to RFC1035. */
                zone: string;
            },
            body: InstanceGroupManagersApplyUpdatesRequest): Request<Operation>;
            /**
             * Creates instances with per-instance configurations in this managed instance group. Instances are created using the current instance template. The create instances operation is
             * marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the
             * listmanagedinstances method.
             */
            createInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that
                 * zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersCreateInstancesRequest;
            }): Request<Operation>;
            createInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that
                 * zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            },
            body: InstanceGroupManagersCreateInstancesRequest): Request<Operation>;
            /**
             * Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read Deleting an instance
             * group for more information.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group to delete. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            }): Request<Operation>;
            /**
             * Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method
             * reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances
             * are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has
             * enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum
             * of 1000 instances with this method per request.
             */
            deleteInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersDeleteInstancesRequest;
            }): Request<Operation>;
            deleteInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            },
            body: InstanceGroupManagersDeleteInstancesRequest): Request<Operation>;
            /** Deletes selected per-instance configurations for the managed instance group. */
            deletePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersDeletePerInstanceConfigsReq;
            }): Request<Operation>;
            deletePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            },
            body: InstanceGroupManagersDeletePerInstanceConfigsReq): Request<Operation>;
            /** Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            }): Request<InstanceGroupManager>;
            /**
             * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance
             * template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the
             * individual instances with the listmanagedinstances method. A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase
             * in this limit.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the managed instance group. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManager;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the managed instance group. */
                zone: string;
            },
            body: InstanceGroupManager): Request<Operation>;
            /** Retrieves a list of managed instance groups that are contained within the specified project and zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            }): Request<InstanceGroupManagerList>;
            /** Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported. */
            listErrors(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern:
                 * (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
                 */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            }): Request<InstanceGroupManagersListErrorsResponse>;
            /**
             * Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on
             * the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed
             * action. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only in the alpha and beta API and only if the group's
             * `listManagedInstancesResults` field is set to `PAGINATED`.
             */
            listManagedInstances(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            }): Request<InstanceGroupManagersListManagedInstancesResponse>;
            /** Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported. */
            listPerInstanceConfigs(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            }): Request<InstanceGroupManagersListPerInstanceConfigsResp>;
            /**
             * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group
             * are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH
             * semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended
             * specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in
             * a MIG.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group manager. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the managed instance group. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManager;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group manager. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the managed instance group. */
                zone: string;
            },
            body: InstanceGroupManager): Request<Operation>;
            /** Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch. */
            patchPerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersPatchPerInstanceConfigsReq;
            }): Request<Operation>;
            patchPerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            },
            body: InstanceGroupManagersPatchPerInstanceConfigsReq): Request<Operation>;
            /**
             * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is
             * marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field;
             * for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds
             * after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
             */
            recreateInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersRecreateInstancesRequest;
            }): Request<Operation>;
            recreateInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            },
            body: InstanceGroupManagersRecreateInstancesRequest): Request<Operation>;
            /**
             * Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes
             * instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the
             * status of the creating or deleting actions with the listmanagedinstances method. When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The
             * group takes into account some VM attributes when making the selection including: + The status of the VM instance. + The health of the VM instance. + The instance template version
             * the VM is based on. + For regional managed instance groups, the location of the VM instance. This list is subject to change. If the group is part of a backend service that has
             * enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
             */
            resize(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * The number of running instances that the managed instance group should maintain at any given time. The group automatically adds or removes instances to maintain the number of
                 * instances specified by this parameter.
                 */
                size: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            }): Request<Operation>;
            /**
             * Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances,
             * run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.
             */
            setInstanceTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersSetInstanceTemplateRequest;
            }): Request<Operation>;
            setInstanceTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            },
            body: InstanceGroupManagersSetInstanceTemplateRequest): Request<Operation>;
            /**
             * Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance
             * group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all
             * of the instances in the group depending on the size of the group.
             */
            setTargetPools(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersSetTargetPoolsRequest;
            }): Request<Operation>;
            setTargetPools(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. */
                zone: string;
            },
            body: InstanceGroupManagersSetTargetPoolsRequest): Request<Operation>;
            /** Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch. */
            updatePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
                /** Request body */
                resource: InstanceGroupManagersUpdatePerInstanceConfigsReq;
            }): Request<Operation>;
            updatePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the managed instance group is located. It should conform to RFC1035. */
                zone: string;
            },
            body: InstanceGroupManagersUpdatePerInstanceConfigsReq): Request<Operation>;
        }
        interface InstanceGroupsResource {
            /**
             * Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more
             * information.
             */
            addInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where you are adding instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupsAddInstancesRequest;
            }): Request<Operation>;
            addInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where you are adding instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            },
            body: InstanceGroupsAddInstancesRequest): Request<Operation>;
            /** Retrieves the list of instance groups and sorts them by zone. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceGroupAggregatedList>;
            /**
             * Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for
             * more information.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group to delete. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            }): Request<Operation>;
            /**
             * Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or
             * regionInstanceGroupManagers methods instead.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            }): Request<InstanceGroup>;
            /** Creates an instance group in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the instance group. */
                zone: string;
                /** Request body */
                resource: InstanceGroup;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the instance group. */
                zone: string;
            },
            body: InstanceGroup): Request<Operation>;
            /**
             * Retrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers
             * methods instead.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            }): Request<InstanceGroupList>;
            /**
             * Lists the instances in the specified instance group. The orderBy query parameter is not supported. The filter query parameter is supported, but only for expressions that use `eq`
             * (equal) or `ne` (not equal) operators.
             */
            listInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the instance group from which you want to generate a list of included instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupsListInstancesRequest;
            }): Request<InstanceGroupsListInstances>;
            listInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the instance group from which you want to generate a list of included instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            },
            body: InstanceGroupsListInstancesRequest): Request<InstanceGroupsListInstances>;
            /**
             * Removes one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining,
             * it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.
             */
            removeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where the specified instances will be removed. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupsRemoveInstancesRequest;
            }): Request<Operation>;
            removeInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where the specified instances will be removed. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            },
            body: InstanceGroupsRemoveInstancesRequest): Request<Operation>;
            /** Sets the named ports for the specified instance group. */
            setNamedPorts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where the named ports are updated. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
                /** Request body */
                resource: InstanceGroupsSetNamedPortsRequest;
            }): Request<Operation>;
            setNamedPorts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group where the named ports are updated. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the instance group is located. */
                zone: string;
            },
            body: InstanceGroupsSetNamedPortsRequest): Request<Operation>;
        }
        interface InstancesResource {
            /** Adds an access config to an instance's network interface. */
            addAccessConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface to add to this instance. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: AccessConfig;
            }): Request<Operation>;
            addAccessConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface to add to this instance. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: AccessConfig): Request<Operation>;
            /** Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations. */
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesAddResourcePoliciesRequest;
            }): Request<Operation>;
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesAddResourcePoliciesRequest): Request<Operation>;
            /**
             * Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project
             * that has a very large number of instances.
             */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceAggregatedList>;
            /**
             * Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more
             * information, read Adding a persistent disk to your instance.
             */
            attachDisk(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. */
                forceAttach?: boolean;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: AttachedDisk;
            }): Request<Operation>;
            attachDisk(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Whether to force attach the regional disk even if it's currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error. */
                forceAttach?: boolean;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: AttachedDisk): Request<Operation>;
            /** Creates multiple instances. Count specifies the number of instances to create. For more information, see About bulk creation of VMs. */
            bulkInsert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: BulkInsertInstanceResource;
            }): Request<Operation>;
            bulkInsert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: BulkInsertInstanceResource): Request<Operation>;
            /** Deletes the specified Instance resource. For more information, see Deleting an instance. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to delete. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Deletes an access config from an instance's network interface. */
            deleteAccessConfig(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** The name of the access config to delete. */
                accessConfig: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Detaches a disk from an instance. */
            detachDisk(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The device name of the disk to detach. Make a get() request on the instance to view currently attached disks and device names. */
                deviceName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Returns the specified Instance resource. Gets a list of available instances by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to return. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Instance>;
            /** Returns effective firewalls applied to an interface of the instance. */
            getEffectiveFirewalls(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface to get the effective firewalls. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<InstancesGetEffectiveFirewallsResponse>;
            /** Returns the specified guest attributes entry. */
            getGuestAttributes(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Specifies the guest attributes path to be queried. */
                queryPath?: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Specifies the key for the guest attributes entry. */
                variableKey?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<GuestAttributes>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Policy>;
            /** Returns the screenshot from the specified instance. */
            getScreenshot(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Screenshot>;
            /** Returns the last 1 MB of serial port output from the specified instance. */
            getSerialPortOutput(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Specifies which COM or serial port to retrieve data from. */
                port?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Specifies the starting byte position of the output to return. To start with the first byte of output to the specified port, omit this field or set it to `0`. If the output for
                 * that byte position is available, this field matches the `start` parameter sent with the request. If the amount of serial console output exceeds the size of the buffer (1 MB),
                 * the oldest output is discarded and is no longer available. If the requested start position refers to discarded output, the start position is adjusted to the oldest output still
                 * available, and the adjusted start position is returned as the `start` property value. You can also provide a negative start position, which translates to the most recent number
                 * of bytes written to the serial port. For example, -3 is interpreted as the most recent 3 bytes written to the serial console.
                 */
                start?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<SerialPortOutput>;
            /** Returns the Shielded Instance Identity of an instance */
            getShieldedInstanceIdentity(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name or id of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<ShieldedInstanceIdentity>;
            /** Creates an instance resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Specifies instance template to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance
                 * template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate -
                 * global/instanceTemplates/instanceTemplate
                 */
                sourceInstanceTemplate?: string;
                /**
                 * Specifies the machine image to use to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to a machine
                 * image: - https://www.googleapis.com/compute/v1/projects/project/global/global /machineImages/machineImage - projects/project/global/global/machineImages/machineImage -
                 * global/machineImages/machineImage
                 */
                sourceMachineImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Instance;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /**
                 * Specifies instance template to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to an instance
                 * template: - https://www.googleapis.com/compute/v1/projects/project /global/instanceTemplates/instanceTemplate - projects/project/global/instanceTemplates/instanceTemplate -
                 * global/instanceTemplates/instanceTemplate
                 */
                sourceInstanceTemplate?: string;
                /**
                 * Specifies the machine image to use to create the instance. This field is optional. It can be a full or partial URL. For example, the following are all valid URLs to a machine
                 * image: - https://www.googleapis.com/compute/v1/projects/project/global/global /machineImages/machineImage - projects/project/global/global/machineImages/machineImage -
                 * global/machineImages/machineImage
                 */
                sourceMachineImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Instance): Request<Operation>;
            /** Retrieves the list of instances contained within the specified zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<InstanceList>;
            /**
             * Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers
             * list includes the instance group. For more information, read Viewing referrers to VM instances.
             */
            listReferrers(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** Name of the target instance scoping this request, or '-' if the request should span over all instances in the container. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<InstanceListReferrers>;
            /** Removes resource policies from an instance. */
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesRemoveResourcePoliciesRequest;
            }): Request<Operation>;
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesRemoveResourcePoliciesRequest): Request<Operation>;
            /** Performs a reset on the instance. This is a hard reset. The VM does not do a graceful shutdown. For more information, see Resetting an instance. */
            reset(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Resumes an instance that was suspended using the instances().suspend method. */
            resume(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to resume. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Sends diagnostic interrupt to the instance. */
            sendDiagnosticInterrupt(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<void>;
            /** Sets deletion protection on the instance. */
            setDeletionProtection(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Whether the resource should be protected against deletion. */
                deletionProtection?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Sets the auto-delete flag for a disk attached to an instance. */
            setDiskAutoDelete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Whether to auto-delete the disk when the instance is deleted. */
                autoDelete: boolean;
                /** JSONP */
                callback?: string;
                /** The device name of the disk to modify. Make a get() request on the instance to view currently attached disks and device names. */
                deviceName: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ZoneSetPolicyRequest): Request<Policy>;
            /** Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesSetLabelsRequest;
            }): Request<Operation>;
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesSetLabelsRequest): Request<Operation>;
            /** Changes the number and/or type of accelerator for a stopped instance to the values specified in the request. */
            setMachineResources(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesSetMachineResourcesRequest;
            }): Request<Operation>;
            setMachineResources(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesSetMachineResourcesRequest): Request<Operation>;
            /** Changes the machine type for a stopped instance to the machine type specified in the request. */
            setMachineType(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesSetMachineTypeRequest;
            }): Request<Operation>;
            setMachineType(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesSetMachineTypeRequest): Request<Operation>;
            /** Sets metadata for the specified instance to the data included in the request. */
            setMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Metadata;
            }): Request<Operation>;
            setMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Metadata): Request<Operation>;
            /** Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform. */
            setMinCpuPlatform(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesSetMinCpuPlatformRequest;
            }): Request<Operation>;
            setMinCpuPlatform(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesSetMinCpuPlatformRequest): Request<Operation>;
            /**
             * Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more
             * information on the possible instance states. For more information about setting scheduling options for a VM, see Set VM host maintenance policy.
             */
            setScheduling(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Scheduling;
            }): Request<Operation>;
            setScheduling(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Scheduling): Request<Operation>;
            /** Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance. */
            setServiceAccount(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to start. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesSetServiceAccountRequest;
            }): Request<Operation>;
            setServiceAccount(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to start. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesSetServiceAccountRequest): Request<Operation>;
            /**
             * Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch
             * format and processing rules.
             */
            setShieldedInstanceIntegrityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name or id of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: ShieldedInstanceIntegrityPolicy;
            }): Request<Operation>;
            setShieldedInstanceIntegrityPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name or id of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ShieldedInstanceIntegrityPolicy): Request<Operation>;
            /** Sets network tags for the specified instance to the data included in the request. */
            setTags(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Tags;
            }): Request<Operation>;
            setTags(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Tags): Request<Operation>;
            /** Simulates a host maintenance event on a VM. For more information, see Simulate a host maintenance event. */
            simulateMaintenanceEvent(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance. */
            start(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to start. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance. */
            startWithEncryptionKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to start. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: InstancesStartWithEncryptionKeyRequest;
            }): Request<Operation>;
            startWithEncryptionKey(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to start. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: InstancesStartWithEncryptionKeyRequest): Request<Operation>;
            /**
             * Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped.
             * However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an
             * instance.
             */
            stop(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If true, discard the contents of any attached localSSD partitions. Default value is false. */
                discardLocalSsd?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to stop. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /**
             * This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances have no compute costs
             * (cores or RAM), and incur only storage charges for the saved VM memory and localSSD data. Any charged resources the virtual machine was using, such as persistent disks and static IP
             * addresses, will continue to be charged while the instance is suspended. For more information, see Suspending and resuming an instance.
             */
            suspend(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** If true, discard the contents of any attached localSSD partitions. Default value is false. */
                discardLocalSsd?: boolean;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to suspend. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
            /**
             * Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of
             * updatable instance properties.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to update. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action
                 * that the updated properties require.
                 */
                minimalAction?: string;
                /**
                 * Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more
                 * disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
                 */
                mostDisruptiveAllowedAction?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Instance;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance resource to update. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * Specifies the action to take when updating an instance even if the updated properties do not require it. If not specified, then Compute Engine acts based on the minimum action
                 * that the updated properties require.
                 */
                minimalAction?: string;
                /**
                 * Specifies the most disruptive action that can be taken on the instance as part of the update. Compute Engine returns an error if the instance properties require a more
                 * disruptive action as part of the instance update. Valid options from lowest to highest are NO_EFFECT, REFRESH, and RESTART.
                 */
                mostDisruptiveAllowedAction?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: Instance): Request<Operation>;
            /**
             * Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch
             * format and processing rules.
             */
            updateAccessConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface where the access config is attached. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: AccessConfig;
            }): Request<Operation>;
            updateAccessConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface where the access config is attached. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: AccessConfig): Request<Operation>;
            /**
             * Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            updateDisplayDevice(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: DisplayDevice;
            }): Request<Operation>;
            updateDisplayDevice(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: DisplayDevice): Request<Operation>;
            /**
             * Updates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for
             * instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.
             */
            updateNetworkInterface(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface to update. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NetworkInterface;
            }): Request<Operation>;
            updateNetworkInterface(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The instance name for this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network interface to update. */
                networkInterface: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NetworkInterface): Request<Operation>;
            /**
             * Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format
             * and processing rules.
             */
            updateShieldedInstanceConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name or id of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: ShieldedInstanceConfig;
            }): Request<Operation>;
            updateShieldedInstanceConfig(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name or id of the instance scoping this request. */
                instance: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ShieldedInstanceConfig): Request<Operation>;
        }
        interface InstanceTemplatesResource {
            /**
             * Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed
             * instance group.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance template to delete. */
                instanceTemplate: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified instance template. Gets a list of available instance templates by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance template. */
                instanceTemplate: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceTemplate>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /**
             * Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your
             * new instance template must use the same network or, if applicable, the same subnetwork as the original template.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InstanceTemplate;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InstanceTemplate): Request<Operation>;
            /** Retrieves a list of instance templates that are contained within the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceTemplateList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface InterconnectAttachmentsResource {
            /** Retrieves an aggregated list of interconnect attachments. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectAttachmentAggregatedList>;
            /** Deletes the specified interconnect attachment. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect attachment to delete. */
                interconnectAttachment: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified interconnect attachment. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect attachment to return. */
                interconnectAttachment: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectAttachment>;
            /** Creates an InterconnectAttachment in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: InterconnectAttachment;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: InterconnectAttachment): Request<Operation>;
            /** Retrieves the list of interconnect attachments contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectAttachmentList>;
            /** Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect attachment to patch. */
                interconnectAttachment: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InterconnectAttachment;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect attachment to patch. */
                interconnectAttachment: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InterconnectAttachment): Request<Operation>;
            /** Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
        }
        interface InterconnectLocationsResource {
            /** Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect location to return. */
                interconnectLocation: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectLocation>;
            /** Retrieves the list of interconnect locations available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectLocationList>;
        }
        interface InterconnectsResource {
            /** Deletes the specified Interconnect. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect to delete. */
                interconnect: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified Interconnect. Get a list of available Interconnects by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect to return. */
                interconnect: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Interconnect>;
            /** Returns the interconnectDiagnostics for the specified Interconnect. */
            getDiagnostics(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect resource to query. */
                interconnect: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectsGetDiagnosticsResponse>;
            /** Creates an Interconnect in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Interconnect;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Interconnect): Request<Operation>;
            /** Retrieves the list of Interconnects available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InterconnectList>;
            /** Updates the specified Interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect to update. */
                interconnect: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Interconnect;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the interconnect to update. */
                interconnect: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Interconnect): Request<Operation>;
            /** Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
        }
        interface LicenseCodesResource {
            /**
             * Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code. *Caution* This resource is intended for use only by
             * third-party partners who are creating Cloud Marketplace images.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Number corresponding to the License code resource to return. */
                licenseCode: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<LicenseCode>;
            /** Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface LicensesResource {
            /** Deletes the specified license. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the license resource to delete. */
                license: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the License resource to return. */
                license: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<License>;
            /**
             * Gets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are
             * creating Cloud Marketplace images.
             */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Create a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: License;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: License): Request<Operation>;
            /**
             * Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to
             * publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as
             * debian-cloud or windows-cloud. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<LicensesListResponse>;
            /**
             * Sets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating
             * Cloud Marketplace images.
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface MachineImagesResource {
            /** Deletes the specified machine image. Deleting a machine image is permanent and cannot be undone. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the machine image to delete. */
                machineImage: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified machine image. Gets a list of available machine images by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the machine image. */
                machineImage: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<MachineImage>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /**
             * Creates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new
             * machine image should use the same network or, if applicable, the same subnetwork as the original instance.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Required. Source instance that is used to create the machine image from. */
                sourceInstance?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: MachineImage;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Required. Source instance that is used to create the machine image from. */
                sourceInstance?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: MachineImage): Request<Operation>;
            /** Retrieves a list of machine images that are contained within the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<MachineImageList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface MachineTypesResource {
            /** Retrieves an aggregated list of machine types. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<MachineTypeAggregatedList>;
            /** Returns the specified machine type. Gets a list of available machine types by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the machine type to return. */
                machineType: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<MachineType>;
            /** Retrieves a list of machine types available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<MachineTypeList>;
        }
        interface NetworkAttachmentsResource {
            /** Retrieves the list of all NetworkAttachment resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkAttachmentAggregatedList>;
            /** Deletes the specified NetworkAttachment in the given scope */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NetworkAttachment resource to delete. */
                networkAttachment: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface:
                 * MixerMutationRequestBuilder
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified NetworkAttachment resource in the given scope. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NetworkAttachment resource to return. */
                networkAttachment: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkAttachment>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a NetworkAttachment in the specified project in the given scope using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface:
                 * MixerMutationRequestBuilder
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworkAttachment;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000). end_interface:
                 * MixerMutationRequestBuilder
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworkAttachment): Request<Operation>;
            /** Lists the NetworkAttachments for a project in the given scope. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkAttachmentList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface NetworkEdgeSecurityServicesResource {
            /** Retrieves the list of all NetworkEdgeSecurityService resources available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEdgeSecurityServiceAggregatedList>;
            /** Deletes the specified service. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network edge security service to delete. */
                networkEdgeSecurityService: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Gets a specified NetworkEdgeSecurityService. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network edge security service to get. */
                networkEdgeSecurityService: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEdgeSecurityService>;
            /** Creates a new service in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: NetworkEdgeSecurityService;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: NetworkEdgeSecurityService): Request<Operation>;
            /** Patches the specified policy with the data included in the request. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network edge security service to update. */
                networkEdgeSecurityService: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworkEdgeSecurityService;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network edge security service to update. */
                networkEdgeSecurityService: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworkEdgeSecurityService): Request<Operation>;
        }
        interface NetworkEndpointGroupsResource {
            /** Retrieves the list of network endpoint groups and sorts them by zone. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroupAggregatedList>;
            /** Attach a list of network endpoints to the specified network endpoint group. */
            attachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
                /** Request body */
                resource: NetworkEndpointGroupsAttachEndpointsRequest;
            }): Request<Operation>;
            attachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are attaching network endpoints to. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            },
            body: NetworkEndpointGroupsAttachEndpointsRequest): Request<Operation>;
            /**
             * Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG
             * cannot be deleted if there are backend services referencing it.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group to delete. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            }): Request<Operation>;
            /** Detach a list of network endpoints from the specified network endpoint group. */
            detachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
                /** Request body */
                resource: NetworkEndpointGroupsDetachEndpointsRequest;
            }): Request<Operation>;
            detachNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group where you are removing network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            },
            body: NetworkEndpointGroupsDetachEndpointsRequest): Request<Operation>;
            /** Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            }): Request<NetworkEndpointGroup>;
            /** Creates a network endpoint group in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the network endpoint group. It should comply with RFC1035. */
                zone: string;
                /** Request body */
                resource: NetworkEndpointGroup;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where you want to create the network endpoint group. It should comply with RFC1035. */
                zone: string;
            },
            body: NetworkEndpointGroup): Request<Operation>;
            /** Retrieves the list of network endpoint groups that are located in the specified project and zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            }): Request<NetworkEndpointGroupList>;
            /** Lists the network endpoints in the specified network endpoint group. */
            listNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
                /** Request body */
                resource: NetworkEndpointGroupsListEndpointsRequest;
            }): Request<NetworkEndpointGroupsListNetworkEndpoints>;
            listNetworkEndpoints(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** The name of the network endpoint group from which you want to generate a list of included network endpoints. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone where the network endpoint group is located. It should comply with RFC1035. */
                zone: string;
            },
            body: NetworkEndpointGroupsListEndpointsRequest): Request<NetworkEndpointGroupsListNetworkEndpoints>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface NetworkFirewallPoliciesResource {
            /** Inserts an association for the specified firewall policy. */
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association
                 * already exists.
                 */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyAssociation;
            }): Request<Operation>;
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * Indicates whether or not to replace it if an association of the attachment already exists. This is false by default, in which case an error will be returned if an association
                 * already exists.
                 */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyAssociation): Request<Operation>;
            /** Inserts a rule into a firewall policy. */
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                maxPriority?: number;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                minPriority?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                maxPriority?: number;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                minPriority?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Copies rules to the specified firewall policy. */
            cloneRules(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** The firewall policy from which to copy rules. */
                sourceFirewallPolicy?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes the specified policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to delete. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified network firewall policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to get. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicy>;
            /** Gets an association with the specified name. */
            getAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried association belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the association to get from the firewall policy. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyAssociation>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Gets a rule of the specified priority. */
            getRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried rule belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to get from the firewall policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyRule>;
            /** Creates a new policy in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Lists all the policies that have been configured for the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyList>;
            /** Patches the specified policy with the data included in the request. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Patches a rule of the specified priority. */
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Removes an association for the specified firewall policy. */
            removeAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name for the attachment that will be removed. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes a rule of the specified priority. */
            removeRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to remove from the firewall policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface NetworksResource {
            /** Adds a peering to the specified network. */
            addPeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource to add peering to. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworksAddPeeringRequest;
            }): Request<Operation>;
            addPeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource to add peering to. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworksAddPeeringRequest): Request<Operation>;
            /** Deletes the specified network. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network to delete. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified network. Gets a list of available networks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network to return. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Network>;
            /** Returns the effective firewalls on a given network. */
            getEffectiveFirewalls(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network for this request. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworksGetEffectiveFirewallsResponse>;
            /** Creates a network in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Network;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Network): Request<Operation>;
            /** Retrieves the list of networks available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkList>;
            /** Lists the peering routes exchanged over peering connection. */
            listPeeringRoutes(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The direction of the exchanged routes. */
                direction?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** Name of the network for this request. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** The response will show routes exchanged over the given peering connection. */
                peeringName?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region of the request. The response will include all subnet routes, static routes and dynamic routes in the region. */
                region?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ExchangedPeeringRoutesList>;
            /** Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network to update. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Network;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network to update. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Network): Request<Operation>;
            /** Removes a peering from the specified network. */
            removePeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource to remove peering from. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworksRemovePeeringRequest;
            }): Request<Operation>;
            removePeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource to remove peering from. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworksRemovePeeringRequest): Request<Operation>;
            /** Switches the network mode from auto subnet mode to custom subnet mode. */
            switchToCustomMode(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network to be updated. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /**
             * Updates the specified network peering with the data included in the request. You can only modify the NetworkPeering.export_custom_routes field and the
             * NetworkPeering.import_custom_routes field.
             */
            updatePeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource which the updated peering is belonging to. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworksUpdatePeeringRequest;
            }): Request<Operation>;
            updatePeering(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the network resource which the updated peering is belonging to. */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworksUpdatePeeringRequest): Request<Operation>;
        }
        interface NodeGroupsResource {
            /** Adds specified number of nodes to the node group. */
            addNodes(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NodeGroupsAddNodesRequest;
            }): Request<Operation>;
            addNodes(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NodeGroupsAddNodesRequest): Request<Operation>;
            /** Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NodeGroupAggregatedList>;
            /** Deletes the specified NodeGroup resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource to delete. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Deletes specified nodes from the node group. */
            deleteNodes(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource whose nodes will be deleted. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NodeGroupsDeleteNodesRequest;
            }): Request<Operation>;
            deleteNodes(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource whose nodes will be deleted. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NodeGroupsDeleteNodesRequest): Request<Operation>;
            /** Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the "nodes" field should not be used. Use nodeGroups.listNodes instead. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the node group to return. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<NodeGroup>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Policy>;
            /** Creates a NodeGroup resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Initial count of nodes in the node group. */
                initialNodeCount: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NodeGroup;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Initial count of nodes in the node group. */
                initialNodeCount: number;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NodeGroup): Request<Operation>;
            /** Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<NodeGroupList>;
            /** Lists nodes in the node group. */
            listNodes(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** Name of the NodeGroup resource whose nodes you want to list. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<NodeGroupsListNodes>;
            /** Updates the specified node group. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource to update. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NodeGroup;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource to update. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NodeGroup): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ZoneSetPolicyRequest): Request<Policy>;
            /** Updates the node template of the node group. */
            setNodeTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource to update. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: NodeGroupsSetNodeTemplateRequest;
            }): Request<Operation>;
            setNodeTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeGroup resource to update. */
                nodeGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: NodeGroupsSetNodeTemplateRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface NodeTemplatesResource {
            /** Retrieves an aggregated list of node templates. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NodeTemplateAggregatedList>;
            /** Deletes the specified NodeTemplate resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NodeTemplate resource to delete. */
                nodeTemplate: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified node template. Gets a list of available node templates by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the node template to return. */
                nodeTemplate: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NodeTemplate>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a NodeTemplate resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NodeTemplate;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NodeTemplate): Request<Operation>;
            /** Retrieves a list of node templates available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NodeTemplateList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface NodeTypesResource {
            /** Retrieves an aggregated list of node types. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NodeTypeAggregatedList>;
            /** Returns the specified node type. Gets a list of available node types by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the node type to return. */
                nodeType: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<NodeType>;
            /** Retrieves a list of node types available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<NodeTypeList>;
        }
        interface PacketMirroringsResource {
            /** Retrieves an aggregated list of packetMirrorings. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PacketMirroringAggregatedList>;
            /** Deletes the specified PacketMirroring resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the PacketMirroring resource to delete. */
                packetMirroring: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified PacketMirroring resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the PacketMirroring resource to return. */
                packetMirroring: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PacketMirroring>;
            /** Creates a PacketMirroring resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PacketMirroring;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PacketMirroring): Request<Operation>;
            /** Retrieves a list of PacketMirroring resources available to the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PacketMirroringList>;
            /** Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the PacketMirroring resource to patch. */
                packetMirroring: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PacketMirroring;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the PacketMirroring resource to patch. */
                packetMirroring: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PacketMirroring): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface ProjectsResource {
            /** Disable this project as a shared VPC host project. */
            disableXpnHost(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Disable a service resource (also known as service project) associated with this host project. */
            disableXpnResource(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ProjectsDisableXpnResourceRequest;
            }): Request<Operation>;
            disableXpnResource(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ProjectsDisableXpnResourceRequest): Request<Operation>;
            /** Enable this project as a shared VPC host project. */
            enableXpnHost(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project. */
            enableXpnResource(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ProjectsEnableXpnResourceRequest;
            }): Request<Operation>;
            enableXpnResource(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ProjectsEnableXpnResourceRequest): Request<Operation>;
            /**
             * Returns the specified Project resource. To decrease latency for this method, you can optionally omit any unneeded information from the response by using a field mask. This practice
             * is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set your request's `fields` query parameter to only include the fields
             * you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Project>;
            /** Gets the shared VPC host project that this project links to. May be empty if no link exists. */
            getXpnHost(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Project>;
            /** Gets service resources (a.k.a service project) associated with this host project. */
            getXpnResources(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ProjectsGetXpnResources>;
            /** Lists all shared VPC host projects visible to the user in an organization. */
            listXpnHosts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ProjectsListXpnHostsRequest;
            }): Request<XpnHostList>;
            listXpnHosts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ProjectsListXpnHostsRequest): Request<XpnHostList>;
            /** Moves a persistent disk from one zone to another. */
            moveDisk(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: DiskMoveRequest;
            }): Request<Operation>;
            moveDisk(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: DiskMoveRequest): Request<Operation>;
            /**
             * Moves an instance and its attached persistent disks from one zone to another. *Note*: Moving VMs or disks by using this method might cause unexpected behavior. For more information,
             * see the [known issue](/compute/docs/troubleshooting/known-issues#moving_vms_or_disks_using_the_moveinstance_api_or_the_causes_unexpected_behavior).
             */
            moveInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InstanceMoveRequest;
            }): Request<Operation>;
            moveInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InstanceMoveRequest): Request<Operation>;
            /** Sets metadata common to all instances within the specified project using the data included in the request. */
            setCommonInstanceMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Metadata;
            }): Request<Operation>;
            setCommonInstanceMetadata(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Metadata): Request<Operation>;
            /** Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field. */
            setDefaultNetworkTier(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ProjectsSetDefaultNetworkTierRequest;
            }): Request<Operation>;
            setDefaultNetworkTier(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ProjectsSetDefaultNetworkTierRequest): Request<Operation>;
            /**
             * Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be
             * disabled.
             */
            setUsageExportBucket(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UsageExportLocation;
            }): Request<Operation>;
            setUsageExportBucket(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UsageExportLocation): Request<Operation>;
        }
        interface PublicAdvertisedPrefixesResource {
            /** Deletes the specified PublicAdvertisedPrefix */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicAdvertisedPrefix resource to delete. */
                publicAdvertisedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified PublicAdvertisedPrefix resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicAdvertisedPrefix resource to return. */
                publicAdvertisedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicAdvertisedPrefix>;
            /** Creates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicAdvertisedPrefix;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicAdvertisedPrefix): Request<Operation>;
            /** Lists the PublicAdvertisedPrefixes for a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicAdvertisedPrefixList>;
            /** Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicAdvertisedPrefix resource to patch. */
                publicAdvertisedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicAdvertisedPrefix;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicAdvertisedPrefix resource to patch. */
                publicAdvertisedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicAdvertisedPrefix): Request<Operation>;
        }
        interface PublicDelegatedPrefixesResource {
            /** Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicDelegatedPrefixAggregatedList>;
            /** Deletes the specified PublicDelegatedPrefix in the given region. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to delete. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified PublicDelegatedPrefix resource in the given region. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to return. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicDelegatedPrefix>;
            /** Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicDelegatedPrefix;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicDelegatedPrefix): Request<Operation>;
            /** Lists the PublicDelegatedPrefixes for a project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<PublicDelegatedPrefixList>;
            /**
             * Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing
             * rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to patch. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: PublicDelegatedPrefix;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Name of the PublicDelegatedPrefix resource to patch. */
                publicDelegatedPrefix: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: PublicDelegatedPrefix): Request<Operation>;
        }
        interface RegionAutoscalersResource {
            /** Deletes the specified autoscaler. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to delete. */
                autoscaler: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified autoscaler. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to return. */
                autoscaler: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Autoscaler>;
            /** Creates an autoscaler in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Autoscaler): Request<Operation>;
            /** Retrieves a list of autoscalers contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionAutoscalerList>;
            /**
             * Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing
             * rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to patch. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to patch. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Autoscaler): Request<Operation>;
            /** Updates an autoscaler in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to update. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Autoscaler;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the autoscaler to update. */
                autoscaler?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Autoscaler): Request<Operation>;
        }
        interface RegionBackendServicesResource {
            /** Deletes the specified regional BackendService resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to delete. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified regional BackendService resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to return. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendService>;
            /** Gets the most recent health check results for this regional BackendService. */
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource for which to get health. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ResourceGroupReference;
            }): Request<BackendServiceGroupHealth>;
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource for which to get health. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ResourceGroupReference): Request<BackendServiceGroupHealth>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
            /** Retrieves the list of regional BackendService resources available to the specified project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<BackendServiceList>;
            /**
             * Updates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH
             * semantics and uses the JSON merge patch format and processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to patch. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to patch. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Updates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview . */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to update. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BackendService;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** Name of the BackendService resource to update. */
                backendService: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BackendService): Request<Operation>;
        }
        interface RegionCommitmentsResource {
            /** Retrieves an aggregated list of commitments by region. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<CommitmentAggregatedList>;
            /** Returns the specified commitment resource. Gets a list of available commitments by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the commitment to return. */
                commitment: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Commitment>;
            /** Creates a commitment in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Commitment;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Commitment): Request<Operation>;
            /** Retrieves a list of commitments contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<CommitmentList>;
            /**
             * Updates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be
             * modified: auto_renew.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the commitment for which auto renew is being updated. */
                commitment: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** update_mask indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Commitment;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the commitment for which auto renew is being updated. */
                commitment: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** update_mask indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Commitment): Request<Operation>;
        }
        interface RegionDisksResource {
            /** Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation. */
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionDisksAddResourcePoliciesRequest;
            }): Request<Operation>;
            addResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionDisksAddResourcePoliciesRequest): Request<Operation>;
            /**
             * Creates a snapshot of a specified persistent disk. For regular snapshot creation, consider using snapshots.insert instead, as that method supports more features, such as creating
             * snapshots in a project different from the source disk project.
             */
            createSnapshot(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk to snapshot. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Snapshot;
            }): Request<Operation>;
            createSnapshot(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk to snapshot. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Snapshot): Request<Operation>;
            /**
             * Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not
             * delete any snapshots previously made from the disk. You must separately delete snapshots.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk to delete. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns a specified regional persistent disk. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk to return. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Disk>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a persistent regional disk in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Source image to restore onto a disk. This field is optional. */
                sourceImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Disk;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Source image to restore onto a disk. This field is optional. */
                sourceImage?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Disk): Request<Operation>;
            /** Retrieves the list of persistent disks contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<DiskList>;
            /** Removes resource policies from a regional disk. */
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionDisksRemoveResourcePoliciesRequest;
            }): Request<Operation>;
            removeResourcePolicies(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The disk name for this request. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionDisksRemoveResourcePoliciesRequest): Request<Operation>;
            /** Resizes the specified regional persistent disk. */
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionDisksResizeRequest;
            }): Request<Operation>;
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the regional persistent disk. */
                disk: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionDisksResizeRequest): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Sets the labels on the target regional disk. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface RegionDiskTypesResource {
            /** Returns the specified regional disk type. Gets a list of available disk types by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Name of the disk type to return. */
                diskType: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<DiskType>;
            /** Retrieves a list of regional disk types available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionDiskTypeList>;
        }
        interface RegionHealthChecksResource {
            /** Deletes the specified HealthCheck resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to delete. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to return. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheck>;
            /** Creates a HealthCheck resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
            /** Retrieves the list of HealthCheck resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheckList>;
            /**
             * Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to patch. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to patch. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
            /** Updates a HealthCheck resource in the specified project using the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to update. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheck;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheck resource to update. */
                healthCheck: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheck): Request<Operation>;
        }
        interface RegionHealthCheckServicesResource {
            /** Deletes the specified regional HealthCheckService. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheckService to delete. The name must be 1-63 characters long, and comply with RFC1035. */
                healthCheckService: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified regional HealthCheckService resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035. */
                healthCheckService: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheckService>;
            /** Creates a regional HealthCheckService resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheckService;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheckService): Request<Operation>;
            /** Lists all the HealthCheckService resources that have been configured for the specified project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<HealthCheckServicesList>;
            /**
             * Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and
             * processing rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035. */
                healthCheckService: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: HealthCheckService;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the HealthCheckService to update. The name must be 1-63 characters long, and comply with RFC1035. */
                healthCheckService: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: HealthCheckService): Request<Operation>;
        }
        interface RegionInstanceGroupManagersResource {
            /**
             * Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from
             * any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This
             * operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning
             * action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection
             * draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
             */
            abandonInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersAbandonInstancesRequest;
            }): Request<Operation>;
            abandonInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersAbandonInstancesRequest): Request<Operation>;
            /** Apply updates to selected instances the managed instance group. */
            applyUpdatesToInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group, should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersApplyUpdatesRequest;
            }): Request<Operation>;
            applyUpdatesToInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group, should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersApplyUpdatesRequest): Request<Operation>;
            /**
             * Creates instances with per-instance configurations in this regional managed instance group. Instances are created using the current instance template. The create instances operation
             * is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the
             * listmanagedinstances method.
             */
            createInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where the managed instance group is located. It should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that
                 * zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersCreateInstancesRequest;
            }): Request<Operation>;
            createInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where the managed instance group is located. It should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. The request ID must be a valid UUID with the exception that
                 * zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersCreateInstancesRequest): Request<Operation>;
            /** Deletes the specified managed instance group and all of the instances in that group. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group to delete. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /**
             * Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method
             * reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is
             * successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a
             * backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
             * You can specify a maximum of 1000 instances with this method per request.
             */
            deleteInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersDeleteInstancesRequest;
            }): Request<Operation>;
            deleteInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersDeleteInstancesRequest): Request<Operation>;
            /** Deletes selected per-instance configurations for the managed instance group. */
            deletePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagerDeleteInstanceConfigReq;
            }): Request<Operation>;
            deletePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagerDeleteInstanceConfigReq): Request<Operation>;
            /** Returns all of the details about the specified managed instance group. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group to return. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceGroupManager>;
            /**
             * Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance
             * template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the
             * individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InstanceGroupManager;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InstanceGroupManager): Request<Operation>;
            /** Retrieves the list of managed instance groups that are contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionInstanceGroupManagerList>;
            /** Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported. */
            listErrors(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * The name of the managed instance group. It must be a string that meets the requirements in RFC1035, or an unsigned long integer: must match regexp pattern:
                 * (?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?)|1-9{0,19}.
                 */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. This should conform to RFC1035. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionInstanceGroupManagersListErrorsResponse>;
            /**
             * Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its
             * instances. The orderBy query parameter is not supported. The `pageToken` query parameter is supported only in the alpha and beta API and only if the group's
             * `listManagedInstancesResults` field is set to `PAGINATED`.
             */
            listManagedInstances(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionInstanceGroupManagersListInstancesResponse>;
            /** Lists all of the per-instance configurations defined for the managed instance group. The orderBy query parameter is not supported. */
            listPerInstanceConfigs(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionInstanceGroupManagersListInstanceConfigsResp>;
            /**
             * Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group
             * are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH
             * semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended
             * specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in
             * a MIG.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group manager. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InstanceGroupManager;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the instance group manager. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InstanceGroupManager): Request<Operation>;
            /** Inserts or patches per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch. */
            patchPerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagerPatchInstanceConfigReq;
            }): Request<Operation>;
            patchPerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagerPatchInstanceConfigReq): Request<Operation>;
            /**
             * Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is
             * marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field;
             * for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds
             * after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.
             */
            recreateInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersRecreateRequest;
            }): Request<Operation>;
            recreateInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersRecreateRequest): Request<Operation>;
            /**
             * Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the
             * group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify
             * the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up
             * to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.
             */
            resize(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Number of instances that should exist in this instance group manager. */
                size: number;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected. */
            setInstanceTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersSetTemplateRequest;
            }): Request<Operation>;
            setInstanceTemplate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersSetTemplateRequest): Request<Operation>;
            /** Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected. */
            setTargetPools(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagersSetTargetPoolsRequest;
            }): Request<Operation>;
            setTargetPools(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the managed instance group. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagersSetTargetPoolsRequest): Request<Operation>;
            /** Inserts or updates per-instance configurations for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch. */
            updatePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupManagerUpdateInstanceConfigReq;
            }): Request<Operation>;
            updatePerInstanceConfigs(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the managed instance group. It should conform to RFC1035. */
                instanceGroupManager: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request, should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupManagerUpdateInstanceConfigReq): Request<Operation>;
        }
        interface RegionInstanceGroupsResource {
            /** Returns the specified instance group resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the instance group resource to return. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<InstanceGroup>;
            /** Retrieves the list of instance group resources contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionInstanceGroupList>;
            /**
             * Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only
             * the instances that are running. The orderBy query parameter is not supported.
             */
            listInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** Name of the regional instance group for which we want to list the instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupsListInstancesRequest;
            }): Request<RegionInstanceGroupsListInstances>;
            listInstances(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** Name of the regional instance group for which we want to list the instances. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupsListInstancesRequest): Request<RegionInstanceGroupsListInstances>;
            /** Sets the named ports for the specified regional instance group. */
            setNamedPorts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the regional instance group where the named ports are updated. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionInstanceGroupsSetNamedPortsRequest;
            }): Request<Operation>;
            setNamedPorts(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The name of the regional instance group where the named ports are updated. */
                instanceGroup: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionInstanceGroupsSetNamedPortsRequest): Request<Operation>;
        }
        interface RegionInstancesResource {
            /** Creates multiple instances in a given region. Count specifies the number of instances to create. */
            bulkInsert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: BulkInsertInstanceResource;
            }): Request<Operation>;
            bulkInsert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: BulkInsertInstanceResource): Request<Operation>;
        }
        interface RegionNetworkEndpointGroupsResource {
            /** Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group to delete. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where the network endpoint group is located. It should comply with RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the network endpoint group. It should comply with RFC1035. */
                networkEndpointGroup: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where the network endpoint group is located. It should comply with RFC1035. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroup>;
            /** Creates a network endpoint group in the specified project using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where you want to create the network endpoint group. It should comply with RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NetworkEndpointGroup;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where you want to create the network endpoint group. It should comply with RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NetworkEndpointGroup): Request<Operation>;
            /** Retrieves the list of regional network endpoint groups available to the specified project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region where the network endpoint group is located. It should comply with RFC1035. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NetworkEndpointGroupList>;
        }
        interface RegionNetworkFirewallPoliciesResource {
            /** Inserts an association for the specified network firewall policy. */
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Indicates whether or not to replace it if an association already exists. This is false by default, in which case an error will be returned if an association already exists. */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyAssociation;
            }): Request<Operation>;
            addAssociation(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Indicates whether or not to replace it if an association already exists. This is false by default, in which case an error will be returned if an association already exists. */
                replaceExistingAssociation?: boolean;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyAssociation): Request<Operation>;
            /** Inserts a rule into a network firewall policy. */
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                maxPriority?: number;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                minPriority?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                maxPriority?: number;
                /** When rule.priority is not specified, auto choose a unused priority between minPriority and maxPriority>. This field is exclusive with rule.priority. */
                minPriority?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Copies rules to the specified network firewall policy. */
            cloneRules(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** The firewall policy from which to copy rules. */
                sourceFirewallPolicy?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes the specified network firewall policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to delete. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified network firewall policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to get. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicy>;
            /** Gets an association with the specified name. */
            getAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried association belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the association to get from the firewall policy. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyAssociation>;
            /** Returns the effective firewalls on a given network. */
            getEffectiveFirewalls(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Network reference */
                network: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Gets a rule of the specified priority. */
            getRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to which the queried rule belongs. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to get from the firewall policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyRule>;
            /** Creates a new network firewall policy in the specified project and region. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Lists all the network firewall policies that have been configured for the specified project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<FirewallPolicyList>;
            /** Patches the specified network firewall policy. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicy): Request<Operation>;
            /** Patches a rule of the specified priority. */
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: FirewallPolicyRule;
            }): Request<Operation>;
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: FirewallPolicyRule): Request<Operation>;
            /** Removes an association for the specified network firewall policy. */
            removeAssociation(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name for the association that will be removed. */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Deletes a rule of the specified priority. */
            removeRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** Name of the firewall policy to update. */
                firewallPolicy: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to remove from the firewall policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface RegionNotificationEndpointsResource {
            /** Deletes the specified NotificationEndpoint in the given region */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NotificationEndpoint resource to delete. */
                notificationEndpoint: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified NotificationEndpoint resource in the given region. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** Name of the NotificationEndpoint resource to return. */
                notificationEndpoint: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NotificationEndpoint>;
            /** Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: NotificationEndpoint;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: NotificationEndpoint): Request<Operation>;
            /** Lists the NotificationEndpoints for a project in the given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<NotificationEndpointList>;
        }
        interface RegionOperationsResource {
            /** Deletes the specified region-specific Operations resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to delete. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<void>;
            /** Retrieves the specified region-specific Operations resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Retrieves a list of Operation resources contained within the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<OperationList>;
            /**
             * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method
             * differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still
             * in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is
             * reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to
             * retry if the operation is not `DONE`.
             */
            wait(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
        }
        interface RegionsResource {
            /**
             * Returns the specified Region resource. Gets a list of available regions by making a list() request. To decrease latency for this method, you can optionally omit any unneeded
             * information from the response by using a field mask. This practice is especially recommended for unused quota information (the `quotas` field). To exclude one or more fields, set
             * your request's `fields` query parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter
             * `?fields=id,selfLink` to your request.
             */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region resource to return. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Region>;
            /**
             * Retrieves the list of region resources available to the specified project. To decrease latency for this method, you can optionally omit any unneeded information from the response by
             * using a field mask. This practice is especially recommended for unused quota information (the `items.quotas` field). To exclude one or more fields, set your request's `fields` query
             * parameter to only include the fields you need. For example, to only include the `id` and `selfLink` fields, add the query parameter `?fields=id,selfLink` to your request.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RegionList>;
        }
        interface RegionSecurityPoliciesResource {
            /** Deletes the specified policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to delete. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** List all of the ordered rules present in a single specified policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the security policy to get. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPolicy>;
            /** Creates a new policy in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: SecurityPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: SecurityPolicy): Request<Operation>;
            /** List all the policies that have been configured for the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPolicyList>;
            /**
             * Patches the specified policy with the data included in the request. To clear fields in the rule, leave the fields empty and specify them in the updateMask. This cannot be used to be
             * update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SecurityPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SecurityPolicy): Request<Operation>;
        }
        interface RegionSslCertificatesResource {
            /** Deletes the specified SslCertificate resource in the region. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SslCertificate resource to delete. */
                sslCertificate: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the SslCertificate resource to return. */
                sslCertificate: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslCertificate>;
            /** Creates a SslCertificate resource in the specified project and region using the data included in the request */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslCertificate;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslCertificate): Request<Operation>;
            /** Retrieves the list of SslCertificate resources available to the specified project in the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslCertificateList>;
        }
        interface RegionSslPoliciesResource {
            /** Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Lists all of the ordered rules present in a single specified policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPolicy>;
            /** Creates a new policy in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicy): Request<Operation>;
            /** Lists all the SSL policies that have been configured for the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPoliciesList>;
            /** Lists all features that can be specified in the SSL policy when using custom profile. */
            listAvailableFeatures(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPoliciesListAvailableFeaturesResponse>;
            /** Patches the specified SSL policy with the data included in the request. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicy): Request<Operation>;
        }
        interface RegionTargetHttpProxiesResource {
            /** Deletes the specified TargetHttpProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy resource to delete. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetHttpProxy resource to return. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpProxy>;
            /** Creates a TargetHttpProxy resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpProxy): Request<Operation>;
            /** Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpProxyList>;
            /** Changes the URL map for TargetHttpProxy. */
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy to set a URL map for. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMapReference;
            }): Request<Operation>;
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy to set a URL map for. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMapReference): Request<Operation>;
        }
        interface RegionTargetHttpsProxiesResource {
            /** Deletes the specified TargetHttpsProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to delete. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetHttpsProxy resource to return. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpsProxy>;
            /** Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxy): Request<Operation>;
            /** Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpsProxyList>;
            /**
             * Patches the specified regional TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing
             * rules.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to patch. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to patch. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxy): Request<Operation>;
            /** Replaces SslCertificates for TargetHttpsProxy. */
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set an SslCertificates resource for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionTargetHttpsProxiesSetSslCertificatesRequest;
            }): Request<Operation>;
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set an SslCertificates resource for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionTargetHttpsProxiesSetSslCertificatesRequest): Request<Operation>;
            /** Changes the URL map for TargetHttpsProxy. */
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy to set a URL map for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMapReference;
            }): Request<Operation>;
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy to set a URL map for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMapReference): Request<Operation>;
        }
        interface RegionTargetTcpProxiesResource {
            /** Deletes the specified TargetTcpProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource to delete. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetTcpProxy resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetTcpProxy resource to return. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetTcpProxy>;
            /** Creates a TargetTcpProxy resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetTcpProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetTcpProxy): Request<Operation>;
            /** Retrieves a list of TargetTcpProxy resources available to the specified project in a given region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetTcpProxyList>;
        }
        interface RegionUrlMapsResource {
            /** Deletes the specified UrlMap resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to delete. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to return. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UrlMap>;
            /** Creates a UrlMap resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /** Retrieves the list of UrlMap resources available to the specified project in the specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UrlMapList>;
            /** Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to patch. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to patch. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /** Updates the specified UrlMap resource with the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to update. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** begin_interface: MixerMutationRequestBuilder Request ID to support idempotency. */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to update. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /** Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap. */
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to be validated as. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: RegionUrlMapsValidateRequest;
            }): Request<UrlMapsValidateResponse>;
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to be validated as. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionUrlMapsValidateRequest): Request<UrlMapsValidateResponse>;
        }
        interface ReservationsResource {
            /** Retrieves an aggregated list of reservations. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ReservationAggregatedList>;
            /** Deletes the specified reservation. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the reservation to delete. */
                reservation: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Retrieves information about the specified reservation. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the reservation to retrieve. */
                reservation: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Reservation>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            }): Request<Policy>;
            /** Creates a new reservation. For more information, read Reserving zonal resources. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Reservation;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: Reservation): Request<Operation>;
            /** A list of all the reservations that have been configured for the specified project in specified zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<ReservationList>;
            /** Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations. */
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the reservation to update. */
                reservation: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: ReservationsResizeRequest;
            }): Request<Operation>;
            resize(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the reservation to update. */
                reservation: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: ReservationsResizeRequest): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: ZoneSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** The name of the zone for this request. */
                zone: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
            /** Update share settings of the reservation. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the reservation to update. */
                reservation: string;
                /** Update_mask indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
                /** Request body */
                resource: Reservation;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                paths?: string | string[];
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the reservation to update. */
                reservation: string;
                /** Update_mask indicates fields to be updated as part of this request. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            },
            body: Reservation): Request<Operation>;
        }
        interface ResourcePoliciesResource {
            /** Retrieves an aggregated list of resource policies. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ResourcePolicyAggregatedList>;
            /** Deletes the specified resource policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the resource policy to delete. */
                resourcePolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Retrieves all information of the specified resource policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the resource policy to retrieve. */
                resourcePolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ResourcePolicy>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a new resource policy. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ResourcePolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ResourcePolicy): Request<Operation>;
            /** A list all the resource policies that have been configured for the specified project in specified region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ResourcePolicyList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface RoutersResource {
            /** Retrieves an aggregated list of routers. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RouterAggregatedList>;
            /** Deletes the specified Router resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Router resource to delete. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified Router resource. Gets a list of available routers by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the Router resource to return. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Router>;
            /** Retrieves runtime Nat mapping information of VM endpoints. */
            getNatMappingInfo(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Name of the Router resource to query for Nat Mapping information of VM endpoints. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<VmEndpointNatMappingsList>;
            /** Retrieves runtime information of the specified router. */
            getRouterStatus(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the Router resource to query. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RouterStatusResponse>;
            /** Creates a Router resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Router;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Router): Request<Operation>;
            /** Retrieves a list of Router resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RouterList>;
            /** Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Router resource to patch. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Router;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Router resource to patch. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Router): Request<Operation>;
            /** Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router. */
            preview(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the Router resource to query. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Router;
            }): Request<RoutersPreviewResponse>;
            preview(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the Router resource to query. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Router): Request<RoutersPreviewResponse>;
            /**
             * Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created
             * or replaced with the state defined by the representation enclosed in the request message payload.
             */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Router resource to update. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Router;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Router resource to update. */
                router: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Router): Request<Operation>;
        }
        interface RoutesResource {
            /** Deletes the specified Route resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Route resource to delete. */
                route: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified Route resource. Gets a list of available routes by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the Route resource to return. */
                route: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Route>;
            /** Creates a Route resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Route;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Route): Request<Operation>;
            /** Retrieves the list of Route resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<RouteList>;
        }
        interface SecurityPoliciesResource {
            /** Inserts a rule into a security policy. */
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: SecurityPolicyRule;
            }): Request<Operation>;
            addRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: SecurityPolicyRule): Request<Operation>;
            /** Retrieves the list of all SecurityPolicy resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPoliciesAggregatedList>;
            /** Deletes the specified policy. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to delete. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** List all of the ordered rules present in a single specified policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to get. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPolicy>;
            /** Gets a rule at the specified priority. */
            getRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to get from the security policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to which the queried rule belongs. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPolicyRule>;
            /** Creates a new policy in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: SecurityPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: SecurityPolicy): Request<Operation>;
            /** List all the policies that have been configured for the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPolicyList>;
            /** Gets the current list of preconfigured Web Application Firewall (WAF) expressions. */
            listPreconfiguredExpressionSets(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SecurityPoliciesListPreconfiguredExpressionSetsResponse>;
            /**
             * Patches the specified policy with the data included in the request. To clear fields in the rule, leave the fields empty and specify them in the updateMask. This cannot be used to be
             * update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SecurityPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SecurityPolicy): Request<Operation>;
            /** Patches a rule at the specified priority. */
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
                /** Request body */
                resource: SecurityPolicyRule;
            }): Request<Operation>;
            patchRule(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to patch. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** If true, the request will not be committed. */
                validateOnly?: boolean;
            },
            body: SecurityPolicyRule): Request<Operation>;
            /** Deletes a rule at the specified priority. */
            removeRule(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** The priority of the rule to remove from the security policy. */
                priority?: number;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the security policy to update. */
                securityPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
        }
        interface ServiceAttachmentsResource {
            /** Retrieves the list of all ServiceAttachment resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ServiceAttachmentAggregatedList>;
            /** Deletes the specified ServiceAttachment in the given scope */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the ServiceAttachment resource to delete. */
                serviceAttachment: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified ServiceAttachment resource in the given scope. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Name of the ServiceAttachment resource to return. */
                serviceAttachment: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ServiceAttachment>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ServiceAttachment;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ServiceAttachment): Request<Operation>;
            /** Lists the ServiceAttachments for a project in the given scope. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region of this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ServiceAttachmentList>;
            /** Patches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region scoping this request and should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** The resource id of the ServiceAttachment to patch. It should conform to RFC1035 resource name or be a string form on an unsigned long number. */
                serviceAttachment: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: ServiceAttachment;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region scoping this request and should conform to RFC1035. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** The resource id of the ServiceAttachment to patch. It should conform to RFC1035 resource name or be a string form on an unsigned long number. */
                serviceAttachment: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: ServiceAttachment): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface SnapshotsResource {
            /**
             * Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is
             * marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Snapshot resource to delete. */
                snapshot: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the Snapshot resource to return. */
                snapshot: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Snapshot>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /**
             * Creates a snapshot in the specified project using the data included in the request. For regular snapshot creation, consider using this method instead of disks.createSnapshot, as
             * this method supports more features, such as creating snapshots in a project different from the source disk project.
             */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Snapshot;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Snapshot): Request<Operation>;
            /** Retrieves the list of Snapshot resources contained within the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SnapshotList>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetPolicyRequest): Request<Policy>;
            /** Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: GlobalSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface SslCertificatesResource {
            /** Retrieves the list of all SslCertificate resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslCertificateAggregatedList>;
            /** Deletes the specified SslCertificate resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SslCertificate resource to delete. */
                sslCertificate: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the SslCertificate resource to return. */
                sslCertificate: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslCertificate>;
            /** Creates a SslCertificate resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslCertificate;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslCertificate): Request<Operation>;
            /** Retrieves the list of SslCertificate resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslCertificateList>;
        }
        interface SslPoliciesResource {
            /** Retrieves the list of all SslPolicy resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPoliciesAggregatedList>;
            /** Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to delete. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Lists all of the ordered rules present in a single specified policy. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPolicy>;
            /** Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicy): Request<Operation>;
            /** Lists all the SSL policies that have been configured for the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPoliciesList>;
            /** Lists all features that can be specified in the SSL policy when using custom profile. */
            listAvailableFeatures(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SslPoliciesListAvailableFeaturesResponse>;
            /** Patches the specified SSL policy with the data included in the request. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the SSL policy to update. The name must be 1-63 characters long, and comply with RFC1035. */
                sslPolicy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicy): Request<Operation>;
        }
        interface SubnetworksResource {
            /** Retrieves an aggregated list of subnetworks. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SubnetworkAggregatedList>;
            /** Deletes the specified subnetwork. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource to delete. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Expands the IP CIDR range of the subnetwork to a specified value. */
            expandIpCidrRange(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource to update. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SubnetworksExpandIpCidrRangeRequest;
            }): Request<Operation>;
            expandIpCidrRange(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource to update. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SubnetworksExpandIpCidrRangeRequest): Request<Operation>;
            /** Returns the specified subnetwork. Gets a list of available subnetworks list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the Subnetwork resource to return. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Subnetwork>;
            /** Gets the access control policy for a resource. May be empty if no such policy or resource exists. */
            getIamPolicy(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Requested IAM Policy version. */
                optionsRequestedPolicyVersion?: number;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Policy>;
            /** Creates a subnetwork in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Subnetwork;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Subnetwork): Request<Operation>;
            /** Retrieves a list of subnetworks available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<SubnetworkList>;
            /** Retrieves an aggregated list of all usable subnetworks in the project. */
            listUsable(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UsableSubnetworksAggregatedList>;
            /**
             * Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must
             * specify the current fingerprint of the subnetwork resource being patched.
             */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork.
                 * The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being
                 * patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
                 */
                drainTimeoutSeconds?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource to patch. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: Subnetwork;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /**
                 * The drain timeout specifies the upper bound in seconds on the amount of time allowed to drain connections from the current ACTIVE subnetwork to the current BACKUP subnetwork.
                 * The drain timeout is only applicable when the following conditions are true: - the subnetwork being patched has purpose = INTERNAL_HTTPS_LOAD_BALANCER - the subnetwork being
                 * patched has role = BACKUP - the patch request is setting the role to ACTIVE. Note that after this patch operation the roles of the ACTIVE and BACKUP subnetworks will be swapped.
                 */
                drainTimeoutSeconds?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource to patch. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: Subnetwork): Request<Operation>;
            /** Sets the access control policy on the specified resource. Replaces any existing policy. */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetPolicyRequest): Request<Policy>;
            /** Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access. */
            setPrivateIpGoogleAccess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SubnetworksSetPrivateIpGoogleAccessRequest;
            }): Request<Operation>;
            setPrivateIpGoogleAccess(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the Subnetwork resource. */
                subnetwork: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SubnetworksSetPrivateIpGoogleAccessRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface TargetGrpcProxiesResource {
            /** Deletes the specified TargetGrpcProxy in the given scope */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetGrpcProxy resource to delete. */
                targetGrpcProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetGrpcProxy resource in the given scope. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetGrpcProxy resource to return. */
                targetGrpcProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetGrpcProxy>;
            /** Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetGrpcProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetGrpcProxy): Request<Operation>;
            /** Lists the TargetGrpcProxies for a project in the given scope. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetGrpcProxyList>;
            /** Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetGrpcProxy resource to patch. */
                targetGrpcProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetGrpcProxy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetGrpcProxy resource to patch. */
                targetGrpcProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetGrpcProxy): Request<Operation>;
        }
        interface TargetHttpProxiesResource {
            /** Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpProxyAggregatedList>;
            /** Deletes the specified TargetHttpProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy resource to delete. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetHttpProxy resource to return. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpProxy>;
            /** Creates a TargetHttpProxy resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpProxy): Request<Operation>;
            /** Retrieves the list of TargetHttpProxy resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpProxyList>;
            /** Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy resource to patch. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpProxy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy resource to patch. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpProxy): Request<Operation>;
            /** Changes the URL map for TargetHttpProxy. */
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy to set a URL map for. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMapReference;
            }): Request<Operation>;
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpProxy to set a URL map for. */
                targetHttpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMapReference): Request<Operation>;
        }
        interface TargetHttpsProxiesResource {
            /** Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpsProxyAggregatedList>;
            /** Deletes the specified TargetHttpsProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to delete. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetHttpsProxy resource to return. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpsProxy>;
            /** Creates a TargetHttpsProxy resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxy): Request<Operation>;
            /** Retrieves the list of TargetHttpsProxy resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetHttpsProxyList>;
            /** Patches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to patch. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxy;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to patch. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxy): Request<Operation>;
            /** Changes the Certificate Map for TargetHttpsProxy. */
            setCertificateMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxiesSetCertificateMapRequest;
            }): Request<Operation>;
            setCertificateMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxiesSetCertificateMapRequest): Request<Operation>;
            /** Sets the QUIC override policy for TargetHttpsProxy. */
            setQuicOverride(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxiesSetQuicOverrideRequest;
            }): Request<Operation>;
            setQuicOverride(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set the QUIC override policy for. The name should conform to RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxiesSetQuicOverrideRequest): Request<Operation>;
            /** Replaces SslCertificates for TargetHttpsProxy. */
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set an SslCertificates resource for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetHttpsProxiesSetSslCertificatesRequest;
            }): Request<Operation>;
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource to set an SslCertificates resource for. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetHttpsProxiesSetSslCertificatesRequest): Request<Operation>;
            /**
             * Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load
             * balancer. They do not affect the connection between the load balancer and the backends.
             */
            setSslPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicyReference;
            }): Request<Operation>;
            setSslPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicyReference): Request<Operation>;
            /** Changes the URL map for TargetHttpsProxy. */
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose URL map is to be set. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMapReference;
            }): Request<Operation>;
            setUrlMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetHttpsProxy resource whose URL map is to be set. */
                targetHttpsProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMapReference): Request<Operation>;
        }
        interface TargetInstancesResource {
            /** Retrieves an aggregated list of target instances. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetInstanceAggregatedList>;
            /** Deletes the specified TargetInstance resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetInstance resource to delete. */
                targetInstance: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone scoping this request. */
                zone: string;
            }): Request<Operation>;
            /** Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetInstance resource to return. */
                targetInstance: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone scoping this request. */
                zone: string;
            }): Request<TargetInstance>;
            /** Creates a TargetInstance resource in the specified project and zone using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone scoping this request. */
                zone: string;
                /** Request body */
                resource: TargetInstance;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone scoping this request. */
                zone: string;
            },
            body: TargetInstance): Request<Operation>;
            /** Retrieves a list of TargetInstance resources available to the specified project and zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone scoping this request. */
                zone: string;
            }): Request<TargetInstanceList>;
        }
        interface TargetPoolsResource {
            /** Adds health check URLs to a target pool. */
            addHealthCheck(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the target pool to add a health check to. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetPoolsAddHealthCheckRequest;
            }): Request<Operation>;
            addHealthCheck(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the target pool to add a health check to. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetPoolsAddHealthCheckRequest): Request<Operation>;
            /** Adds an instance to a target pool. */
            addInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to add instances to. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetPoolsAddInstanceRequest;
            }): Request<Operation>;
            addInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to add instances to. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetPoolsAddInstanceRequest): Request<Operation>;
            /** Retrieves an aggregated list of target pools. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetPoolAggregatedList>;
            /** Deletes the specified target pool. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to delete. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified target pool. Gets a list of available target pools by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetPool resource to return. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetPool>;
            /** Gets the most recent health check results for each IP for the instance that is referenced by the given target pool. */
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetPool resource to which the queried instance belongs. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: InstanceReference;
            }): Request<TargetPoolInstanceHealth>;
            getHealth(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Name of the TargetPool resource to which the queried instance belongs. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: InstanceReference): Request<TargetPoolInstanceHealth>;
            /** Creates a target pool in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetPool;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetPool): Request<Operation>;
            /** Retrieves a list of target pools available to the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetPoolList>;
            /** Removes health check URL from a target pool. */
            removeHealthCheck(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the target pool to remove health checks from. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetPoolsRemoveHealthCheckRequest;
            }): Request<Operation>;
            removeHealthCheck(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the target pool to remove health checks from. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetPoolsRemoveHealthCheckRequest): Request<Operation>;
            /** Removes instance URL from a target pool. */
            removeInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to remove instances from. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetPoolsRemoveInstanceRequest;
            }): Request<Operation>;
            removeInstance(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to remove instances from. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetPoolsRemoveInstanceRequest): Request<Operation>;
            /** Changes a backup target pool's configurations. */
            setBackup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** New failoverRatio value for the target pool. */
                failoverRatio?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to set a backup pool for. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetReference;
            }): Request<Operation>;
            setBackup(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** New failoverRatio value for the target pool. */
                failoverRatio?: number;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region scoping this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetPool resource to set a backup pool for. */
                targetPool: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetReference): Request<Operation>;
        }
        interface TargetSslProxiesResource {
            /** Deletes the specified TargetSslProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource to delete. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetSslProxy resource to return. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetSslProxy>;
            /** Creates a TargetSslProxy resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetSslProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetSslProxy): Request<Operation>;
            /** Retrieves the list of TargetSslProxy resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetSslProxyList>;
            /** Changes the BackendService for TargetSslProxy. */
            setBackendService(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose BackendService resource is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetSslProxiesSetBackendServiceRequest;
            }): Request<Operation>;
            setBackendService(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose BackendService resource is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetSslProxiesSetBackendServiceRequest): Request<Operation>;
            /** Changes the Certificate Map for TargetSslProxy. */
            setCertificateMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetSslProxiesSetCertificateMapRequest;
            }): Request<Operation>;
            setCertificateMap(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose CertificateMap is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetSslProxiesSetCertificateMapRequest): Request<Operation>;
            /** Changes the ProxyHeaderType for TargetSslProxy. */
            setProxyHeader(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose ProxyHeader is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetSslProxiesSetProxyHeaderRequest;
            }): Request<Operation>;
            setProxyHeader(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose ProxyHeader is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetSslProxiesSetProxyHeaderRequest): Request<Operation>;
            /** Changes SslCertificates for TargetSslProxy. */
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose SslCertificate resource is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetSslProxiesSetSslCertificatesRequest;
            }): Request<Operation>;
            setSslCertificates(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose SslCertificate resource is to be set. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetSslProxiesSetSslCertificatesRequest): Request<Operation>;
            /**
             * Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer.
             * They do not affect the connection between the load balancer and the backends.
             */
            setSslPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: SslPolicyReference;
            }): Request<Operation>;
            setSslPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetSslProxy resource whose SSL policy is to be set. The name must be 1-63 characters long, and comply with RFC1035. */
                targetSslProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: SslPolicyReference): Request<Operation>;
        }
        interface TargetTcpProxiesResource {
            /** Retrieves the list of all TargetTcpProxy resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetTcpProxyAggregatedList>;
            /** Deletes the specified TargetTcpProxy resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource to delete. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the TargetTcpProxy resource to return. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetTcpProxy>;
            /** Creates a TargetTcpProxy resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetTcpProxy;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetTcpProxy): Request<Operation>;
            /** Retrieves the list of TargetTcpProxy resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetTcpProxyList>;
            /** Changes the BackendService for TargetTcpProxy. */
            setBackendService(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource whose BackendService resource is to be set. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetTcpProxiesSetBackendServiceRequest;
            }): Request<Operation>;
            setBackendService(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource whose BackendService resource is to be set. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetTcpProxiesSetBackendServiceRequest): Request<Operation>;
            /** Changes the ProxyHeaderType for TargetTcpProxy. */
            setProxyHeader(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource whose ProxyHeader is to be set. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetTcpProxiesSetProxyHeaderRequest;
            }): Request<Operation>;
            setProxyHeader(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the TargetTcpProxy resource whose ProxyHeader is to be set. */
                targetTcpProxy: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetTcpProxiesSetProxyHeaderRequest): Request<Operation>;
        }
        interface TargetVpnGatewaysResource {
            /** Retrieves an aggregated list of target VPN gateways. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetVpnGatewayAggregatedList>;
            /** Deletes the specified target VPN gateway. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name of the target VPN gateway to delete. */
                targetVpnGateway: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Name of the target VPN gateway to return. */
                targetVpnGateway: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetVpnGateway>;
            /** Creates a target VPN gateway in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: TargetVpnGateway;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TargetVpnGateway): Request<Operation>;
            /** Retrieves a list of target VPN gateways available to the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<TargetVpnGatewayList>;
            /** Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
        }
        interface UrlMapsResource {
            /** Retrieves the list of all UrlMap resources, regional and global, available to the specified project. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Name of the project scoping this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UrlMapsAggregatedList>;
            /** Deletes the specified UrlMap resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to delete. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<Operation>;
            /** Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to return. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UrlMap>;
            /** Creates a UrlMap resource in the specified project using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /**
             * Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached
             * content](/cdn/docs/invalidating-cached-content).
             */
            invalidateCache(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap scoping this request. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: CacheInvalidationRule;
            }): Request<Operation>;
            invalidateCache(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap scoping this request. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: CacheInvalidationRule): Request<Operation>;
            /** Retrieves the list of UrlMap resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<UrlMapList>;
            /** Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to patch. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to patch. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /** Updates the specified UrlMap resource with the data included in the request. */
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to update. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMap;
            }): Request<Operation>;
            update(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to update. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMap): Request<Operation>;
            /** Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap. */
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to be validated as. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: UrlMapsValidateRequest;
            }): Request<UrlMapsValidateResponse>;
            validate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Name of the UrlMap resource to be validated as. */
                urlMap: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: UrlMapsValidateRequest): Request<UrlMapsValidateResponse>;
        }
        interface VpnGatewaysResource {
            /** Retrieves an aggregated list of VPN gateways. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<VpnGatewayAggregatedList>;
            /** Deletes the specified VPN gateway. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the VPN gateway to delete. */
                vpnGateway: string;
            }): Request<Operation>;
            /** Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the VPN gateway to return. */
                vpnGateway: string;
            }): Request<VpnGateway>;
            /** Returns the status for the specified VPN gateway. */
            getStatus(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the VPN gateway to return. */
                vpnGateway: string;
            }): Request<VpnGatewaysGetStatusResponse>;
            /** Creates a VPN gateway in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: VpnGateway;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: VpnGateway): Request<Operation>;
            /** Retrieves a list of VPN gateways available to the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<VpnGatewayList>;
            /** Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
            /** Returns permissions that a caller has on the specified resource. */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The name of the region for this request. */
                region: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: TestPermissionsRequest): Request<TestPermissionsResponse>;
        }
        interface VpnTunnelsResource {
            /** Retrieves an aggregated list of VPN tunnels. */
            aggregatedList(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /**
                 * Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has
                 * no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or
                 * false, only scopes of the scope types where the resource type is expected to be found will be included.
                 */
                includeAllScopes?: boolean;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<VpnTunnelAggregatedList>;
            /** Deletes the specified VpnTunnel resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the VpnTunnel resource to delete. */
                vpnTunnel: string;
            }): Request<Operation>;
            /** Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the VpnTunnel resource to return. */
                vpnTunnel: string;
            }): Request<VpnTunnel>;
            /** Creates a VpnTunnel resource in the specified project and region using the data included in the request. */
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Request body */
                resource: VpnTunnel;
            }): Request<Operation>;
            insert(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: VpnTunnel): Request<Operation>;
            /** Retrieves a list of VpnTunnel resources contained in the specified project and region. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Name of the region for this request. */
                region: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<VpnTunnelList>;
            /** Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation. */
            setLabels(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The region for this request. */
                region: string;
                /**
                 * An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already
                 * been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server
                 * can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate
                 * commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000).
                 */
                requestId?: string;
                /** Name or id of the resource for this request. */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            },
            body: RegionSetLabelsRequest): Request<Operation>;
        }
        interface ZoneOperationsResource {
            /** Deletes the specified zone-specific Operations resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to delete. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<void>;
            /** Retrieves the specified zone-specific Operations resource. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
            /** Retrieves a list of Operation resources contained within the specified zone. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for request. */
                zone: string;
            }): Request<OperationList>;
            /**
             * Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method
             * waits for no more than the 2 minutes and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis.
             * Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the
             * default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`.
             */
            wait(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Name of the Operations resource to return. */
                operation: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone for this request. */
                zone: string;
            }): Request<Operation>;
        }
        interface ZonesResource {
            /** Returns the specified Zone resource. Gets a list of available zones by making a list() request. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
                /** Name of the zone resource to return. */
                zone: string;
            }): Request<Zone>;
            /** Retrieves the list of Zone resources available to the specified project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /**
                 * A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions
                 * and expressions that follow API improvement proposal AIP-160. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want
                 * to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering
                 * Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:` operator can be used with string fields to match
                 * substrings. For non-string fields it is equivalent to the `=` operator. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects
                 * with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only
                 * if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each
                 * separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND`
                 * expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND
                 * (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression
                 * with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double
                 * quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value
                 * must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`.
                 */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /**
                 * The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can
                 * be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
                 */
                maxResults?: number;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /**
                 * Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based
                 * on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result
                 * first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
                 */
                orderBy?: string;
                /** Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Project ID for this request. */
                project: string;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. */
                returnPartialSuccess?: boolean;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Legacy name for parameter that has been superseded by `quotaUser`. */
                userIp?: string;
            }): Request<ZoneList>;
        }

        const acceleratorTypes: AcceleratorTypesResource;

        const addresses: AddressesResource;

        const autoscalers: AutoscalersResource;

        const backendBuckets: BackendBucketsResource;

        const backendServices: BackendServicesResource;

        const diskTypes: DiskTypesResource;

        const disks: DisksResource;

        const externalVpnGateways: ExternalVpnGatewaysResource;

        const firewallPolicies: FirewallPoliciesResource;

        const firewalls: FirewallsResource;

        const forwardingRules: ForwardingRulesResource;

        const globalAddresses: GlobalAddressesResource;

        const globalForwardingRules: GlobalForwardingRulesResource;

        const globalNetworkEndpointGroups: GlobalNetworkEndpointGroupsResource;

        const globalOperations: GlobalOperationsResource;

        const globalOrganizationOperations: GlobalOrganizationOperationsResource;

        const globalPublicDelegatedPrefixes: GlobalPublicDelegatedPrefixesResource;

        const healthChecks: HealthChecksResource;

        const httpHealthChecks: HttpHealthChecksResource;

        const httpsHealthChecks: HttpsHealthChecksResource;

        const imageFamilyViews: ImageFamilyViewsResource;

        const images: ImagesResource;

        const instanceGroupManagers: InstanceGroupManagersResource;

        const instanceGroups: InstanceGroupsResource;

        const instanceTemplates: InstanceTemplatesResource;

        const instances: InstancesResource;

        const interconnectAttachments: InterconnectAttachmentsResource;

        const interconnectLocations: InterconnectLocationsResource;

        const interconnects: InterconnectsResource;

        const licenseCodes: LicenseCodesResource;

        const licenses: LicensesResource;

        const machineImages: MachineImagesResource;

        const machineTypes: MachineTypesResource;

        const networkAttachments: NetworkAttachmentsResource;

        const networkEdgeSecurityServices: NetworkEdgeSecurityServicesResource;

        const networkEndpointGroups: NetworkEndpointGroupsResource;

        const networkFirewallPolicies: NetworkFirewallPoliciesResource;

        const networks: NetworksResource;

        const nodeGroups: NodeGroupsResource;

        const nodeTemplates: NodeTemplatesResource;

        const nodeTypes: NodeTypesResource;

        const packetMirrorings: PacketMirroringsResource;

        const projects: ProjectsResource;

        const publicAdvertisedPrefixes: PublicAdvertisedPrefixesResource;

        const publicDelegatedPrefixes: PublicDelegatedPrefixesResource;

        const regionAutoscalers: RegionAutoscalersResource;

        const regionBackendServices: RegionBackendServicesResource;

        const regionCommitments: RegionCommitmentsResource;

        const regionDiskTypes: RegionDiskTypesResource;

        const regionDisks: RegionDisksResource;

        const regionHealthCheckServices: RegionHealthCheckServicesResource;

        const regionHealthChecks: RegionHealthChecksResource;

        const regionInstanceGroupManagers: RegionInstanceGroupManagersResource;

        const regionInstanceGroups: RegionInstanceGroupsResource;

        const regionInstances: RegionInstancesResource;

        const regionNetworkEndpointGroups: RegionNetworkEndpointGroupsResource;

        const regionNetworkFirewallPolicies: RegionNetworkFirewallPoliciesResource;

        const regionNotificationEndpoints: RegionNotificationEndpointsResource;

        const regionOperations: RegionOperationsResource;

        const regionSecurityPolicies: RegionSecurityPoliciesResource;

        const regionSslCertificates: RegionSslCertificatesResource;

        const regionSslPolicies: RegionSslPoliciesResource;

        const regionTargetHttpProxies: RegionTargetHttpProxiesResource;

        const regionTargetHttpsProxies: RegionTargetHttpsProxiesResource;

        const regionTargetTcpProxies: RegionTargetTcpProxiesResource;

        const regionUrlMaps: RegionUrlMapsResource;

        const regions: RegionsResource;

        const reservations: ReservationsResource;

        const resourcePolicies: ResourcePoliciesResource;

        const routers: RoutersResource;

        const routes: RoutesResource;

        const securityPolicies: SecurityPoliciesResource;

        const serviceAttachments: ServiceAttachmentsResource;

        const snapshots: SnapshotsResource;

        const sslCertificates: SslCertificatesResource;

        const sslPolicies: SslPoliciesResource;

        const subnetworks: SubnetworksResource;

        const targetGrpcProxies: TargetGrpcProxiesResource;

        const targetHttpProxies: TargetHttpProxiesResource;

        const targetHttpsProxies: TargetHttpsProxiesResource;

        const targetInstances: TargetInstancesResource;

        const targetPools: TargetPoolsResource;

        const targetSslProxies: TargetSslProxiesResource;

        const targetTcpProxies: TargetTcpProxiesResource;

        const targetVpnGateways: TargetVpnGatewaysResource;

        const urlMaps: UrlMapsResource;

        const vpnGateways: VpnGatewaysResource;

        const vpnTunnels: VpnTunnelsResource;

        const zoneOperations: ZoneOperationsResource;

        const zones: ZonesResource;
    }
}
