/* Type definitions for non-npm package Google Play Grouping API v1alpha1 0.0 */
// Project: https://cloud.google.com/playgrouping/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://playgrouping.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20240925

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Google Play Grouping API v1alpha1 */
  function load(
    urlOrObject: 'https://playgrouping.googleapis.com/$discovery/rest?version=v1alpha1'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'playgrouping', version: 'v1alpha1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'playgrouping',
    version: 'v1alpha1',
    callback: () => any
  ): void;

  namespace playgrouping {
    interface CreateOrUpdateTagsRequest {
      /** Tags to be inserted or updated. */
      tags?: Tag[];
    }
    interface CreateOrUpdateTagsResponse {
      /** All requested tags are returned, including pre-existing ones. */
      tags?: Tag[];
    }
    interface Tag {
      /** A boolean value of the tag. */
      booleanValue?: boolean;
      /** A signed 64-bit integer value of the tag. */
      int64Value?: string;
      /** Required. Key for the tag. */
      key?: string;
      /** A string value of the tag. */
      stringValue?: string;
      /** A time value of the tag. */
      timeValue?: string;
    }
    interface VerifyTokenRequest {
      /** Required. Persona represented by the token. Format: personas/{persona} */
      persona?: string;
    }
    interface VerifyTokenResponse {}
    interface TagsResource {
      /** Create or update tags for the user and app that are represented by the given token. */
      createOrUpdate(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** Required. App whose tags are being manipulated. Format: apps/{package_name} */
        appPackage: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. Token for which the tags are being inserted or updated. Format: tokens/{token} */
        token: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: CreateOrUpdateTagsRequest;
      }): Request<CreateOrUpdateTagsResponse>;
      createOrUpdate(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** Required. App whose tags are being manipulated. Format: apps/{package_name} */
          appPackage: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. Token for which the tags are being inserted or updated. Format: tokens/{token} */
          token: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: CreateOrUpdateTagsRequest
      ): Request<CreateOrUpdateTagsResponse>;
    }
    interface TokensResource {
      /** Verify an API token by asserting the app and persona it belongs to. The verification is a protection against client-side attacks and will fail if the contents of the token don't match the provided values. A token must be verified before it can be used to manipulate user tags. */
      verify(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** Required. App the token belongs to. Format: apps/{package_name} */
        appPackage: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The token to be verified. Format: tokens/{token} */
        token: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: VerifyTokenRequest;
      }): Request<{}>;
      verify(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** Required. App the token belongs to. Format: apps/{package_name} */
          appPackage: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Required. The token to be verified. Format: tokens/{token} */
          token: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: VerifyTokenRequest
      ): Request<{}>;
      tags: TagsResource;
    }
    interface AppsResource {
      tokens: TokensResource;
    }

    const apps: AppsResource;
  }
}
