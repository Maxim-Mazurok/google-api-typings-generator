/* Type definitions for non-npm package On-Demand Scanning API v1 1.0 */
// Project: https://cloud.google.com/container-analysis/docs/on-demand-scanning/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://ondemandscanning.googleapis.com/$discovery/rest?version=v1
// Revision: 20210723

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load On-Demand Scanning API v1 */
    function load(name: "ondemandscanning", version: "v1"): PromiseLike<void>;
    function load(name: "ondemandscanning", version: "v1", callback: () => any): void;

    namespace ondemandscanning {
        interface AliasContext {
            /** The alias kind. */
            kind?: string;
            /** The alias name. */
            name?: string;
        }
        interface AnalyzePackagesMetadata {
            /** When the scan was created. */
            createTime?: string;
            /** The resource URI of the container image being scanned. */
            resourceUri?: string;
        }
        interface AnalyzePackagesMetadataV1 {
            /** When the scan was created. */
            createTime?: string;
            /** The resource URI of the container image being scanned. */
            resourceUri?: string;
        }
        interface AnalyzePackagesRequestV1 {
            /** The packages to analyze. */
            packages?: PackageData[];
            /** Required. The resource URI of the container image being scanned. */
            resourceUri?: string;
        }
        interface AnalyzePackagesResponse {
            /** The name of the scan resource created by this successful scan. */
            scan?: string;
        }
        interface AnalyzePackagesResponseV1 {
            /** The name of the scan resource created by this successful scan. */
            scan?: string;
        }
        interface Artifact {
            /** Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container. */
            checksum?: string;
            /** Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`. */
            id?: string;
            /**
             * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as
             * presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
             */
            names?: string[];
        }
        interface AttestationOccurrence {
            /**
             * One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the
             * `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD
             * encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.
             */
            jwts?: Jwt[];
            /** Required. The serialized payload that is verified by one or more `signatures`. */
            serializedPayload?: string;
            /**
             * One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies
             * `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
             */
            signatures?: Signature[];
        }
        interface BuildOccurrence {
            /** Required. The actual provenance for the build. */
            provenance?: BuildProvenance;
            /**
             * Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be
             * unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to
             * interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json
             * as well to prevent incompatibilities with future changes.
             */
            provenanceBytes?: string;
        }
        interface BuildProvenance {
            /** Version string of the builder at the time this build was executed. */
            builderVersion?: string;
            /** Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details. */
            buildOptions?: { [P in string]: string };
            /** Output of the build. */
            builtArtifacts?: Artifact[];
            /** Commands requested by the build. */
            commands?: Command[];
            /** Time at which the build was created. */
            createTime?: string;
            /**
             * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same
             * end-user for all time.
             */
            creator?: string;
            /** Time at which execution of the build was finished. */
            endTime?: string;
            /** Required. Unique identifier of the build. */
            id?: string;
            /** URI where any logs for this provenance were written. */
            logsUri?: string;
            /** ID of the project. */
            projectId?: string;
            /** Details of the Source input to the build. */
            sourceProvenance?: Source;
            /** Time at which execution of the build was started. */
            startTime?: string;
            /** Trigger identifier if the build was triggered automatically; empty if not. */
            triggerId?: string;
        }
        interface Category {
            /** The identifier of the category. */
            categoryId?: string;
            /** The localized name of the category. */
            name?: string;
        }
        interface CloudRepoSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: AliasContext;
            /** The ID of the repo. */
            repoId?: RepoId;
            /** A revision ID. */
            revisionId?: string;
        }
        interface Command {
            /** Command-line arguments used when executing this command. */
            args?: string[];
            /** Working directory (relative to project source root) used when running this command. */
            dir?: string;
            /** Environment variables set before running this command. */
            env?: string[];
            /** Optional unique identifier for this command, used in wait_for to reference this command as a dependency. */
            id?: string;
            /** Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`. */
            name?: string;
            /** The ID(s) of the command(s) that this command depends on. */
            waitFor?: string[];
        }
        interface ComplianceOccurrence {
            nonComplianceReason?: string;
            nonCompliantFiles?: NonCompliantFile[];
        }
        interface DeploymentOccurrence {
            /** Address of the runtime element hosting this deployment. */
            address?: string;
            /** Configuration used to create this deployment. */
            config?: string;
            /** Required. Beginning of the lifetime of this deployment. */
            deployTime?: string;
            /** Platform hosting this deployment. */
            platform?: string;
            /** Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name. */
            resourceUri?: string[];
            /** End of the lifetime of this deployment. */
            undeployTime?: string;
            /** Identity of the user that triggered this deployment. */
            userEmail?: string;
        }
        interface DiscoveryOccurrence {
            /** The status of discovery for the resource. */
            analysisStatus?: string;
            /** When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API. */
            analysisStatusError?: Status;
            /** Whether the resource is continuously analyzed. */
            continuousAnalysis?: string;
            /** The CPE of the resource being scanned. */
            cpe?: string;
            /** The last time this resource was scanned. */
            lastScanTime?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface FileHashes {
            /** Required. Collection of file hashes. */
            fileHash?: Hash[];
        }
        interface Fingerprint {
            /** Required. The layer ID of the final layer in the Docker image's v1 representation. */
            v1Name?: string;
            /** Required. The ordered list of v2 blobs that represent a given image. */
            v2Blob?: string[];
            /** Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. */
            v2Name?: string;
        }
        interface GerritSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: AliasContext;
            /** The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project. */
            gerritProject?: string;
            /** The URI of a running Gerrit instance. */
            hostUri?: string;
            /** A revision (commit) ID. */
            revisionId?: string;
        }
        interface GitSourceContext {
            /** Git commit hash. */
            revisionId?: string;
            /** Git repository URL. */
            url?: string;
        }
        interface Hash {
            /** Required. The type of hash that was performed, e.g. "SHA-256". */
            type?: string;
            /** Required. The hash value. */
            value?: string;
        }
        interface Identity {
            /** The revision number of the update. */
            revision?: number;
            /** The revision independent identifier of the update. */
            updateId?: string;
        }
        interface ImageOccurrence {
            /** Output only. This contains the base image URL for the derived image occurrence. */
            baseResourceUrl?: string;
            /** Output only. The number of layers by which this image differs from the associated image basis. */
            distance?: number;
            /** Required. The fingerprint of the derived image. */
            fingerprint?: Fingerprint;
            /**
             * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the
             * final layer.
             */
            layerInfo?: Layer[];
        }
        interface Jwt {
            /** The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1 */
            compactJwt?: string;
        }
        interface Layer {
            /** The recovered arguments to the Dockerfile directive. */
            arguments?: string;
            /** Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information. */
            directive?: string;
        }
        interface ListOperationsResponse {
            /** The standard List next-page token. */
            nextPageToken?: string;
            /** A list of operations that matches the specified filter in the request. */
            operations?: Operation[];
        }
        interface ListVulnerabilitiesResponseV1 {
            /** A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results. */
            nextPageToken?: string;
            /** The list of Vulnerability Occurrences resulting from a scan. */
            occurrences?: Occurrence[];
        }
        interface Location {
            /** Required. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
            cpeUri?: string;
            /** The path from which we gathered that this package/version is installed. */
            path?: string;
            /** The version installed at this location. */
            version?: Version;
        }
        interface NonCompliantFile {
            /** Command to display the non-compliant files. */
            displayCommand?: string;
            /**
             * display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using
             * 'path'. Empty if `display_command` is set.
             */
            path?: string;
            /** Explains why a file is non compliant for a CIS check. */
            reason?: string;
        }
        interface Occurrence {
            /** Describes an attestation of an artifact. */
            attestation?: AttestationOccurrence;
            /** Describes a verifiable build. */
            build?: BuildOccurrence;
            /** Describes a compliance violation on a linked resource. */
            compliance?: ComplianceOccurrence;
            /** Output only. The time this occurrence was created. */
            createTime?: string;
            /** Describes the deployment of an artifact on a runtime. */
            deployment?: DeploymentOccurrence;
            /** Describes when a resource was discovered. */
            discovery?: DiscoveryOccurrence;
            /** Describes how this resource derives from the basis in the associated note. */
            image?: ImageOccurrence;
            /** Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests. */
            kind?: string;
            /** Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
            name?: string;
            /** Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests. */
            noteName?: string;
            /** Describes the installation of a package on the linked resource. */
            package?: PackageOccurrence;
            /** A description of actions that can be taken to remedy the note. */
            remediation?: string;
            /** Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image. */
            resourceUri?: string;
            /** Output only. The time this occurrence was last updated. */
            updateTime?: string;
            /** Describes an available package upgrade on the linked resource. */
            upgrade?: UpgradeOccurrence;
            /** Describes a security vulnerability. */
            vulnerability?: VulnerabilityOccurrence;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface PackageData {
            /** The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar. */
            cpeUri?: string;
            /** The OS affected by a vulnerability This field is deprecated and the information is in cpe_uri */
            os?: string;
            /** The version of the OS This field is deprecated and the information is in cpe_uri */
            osVersion?: string;
            /** The package being analysed for vulnerabilities */
            package?: string;
            /** The type of package: os, maven, go, etc. */
            packageType?: string;
            unused?: string;
            /** The version of the package being analysed */
            version?: string;
        }
        interface PackageIssue {
            /** Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in. */
            affectedCpeUri?: string;
            /** Required. The package this vulnerability was found in. */
            affectedPackage?: string;
            /** Required. The version of the package that is installed on the resource affected by this vulnerability. */
            affectedVersion?: Version;
            /** Output only. Whether a fix is available for this package. */
            fixAvailable?: boolean;
            /** The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri. */
            fixedCpeUri?: string;
            /** The package this vulnerability was fixed in. It is possible for this to be different from the affected_package. */
            fixedPackage?: string;
            /** Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available. */
            fixedVersion?: Version;
        }
        interface PackageOccurrence {
            /** Required. All of the places within the filesystem versions of this package have been found. */
            location?: Location[];
            /** Output only. The name of the installed package. */
            name?: string;
        }
        interface ProjectRepoId {
            /** The ID of the project. */
            projectId?: string;
            /** The name of the repo. Leave empty for the default repo. */
            repoName?: string;
        }
        interface RelatedUrl {
            /** Label to describe usage of the URL. */
            label?: string;
            /** Specific URL associated with the resource. */
            url?: string;
        }
        interface RepoId {
            /** A combination of a project ID and a repo name. */
            projectRepoId?: ProjectRepoId;
            /** A server-assigned, globally unique identifier. */
            uid?: string;
        }
        interface Signature {
            /**
             * The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the
             * `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: *
             * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named
             * SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" *
             * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
             */
            publicKeyId?: string;
            /**
             * The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message
             * might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.
             */
            signature?: string;
        }
        interface Source {
            /**
             * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will
             * not include the context specified in the context field.
             */
            additionalContexts?: SourceContext[];
            /** If provided, the input binary artifacts for the build came from this location. */
            artifactStorageSourceUri?: string;
            /** If provided, the source code used for the build came from this location. */
            context?: SourceContext;
            /**
             * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source
             * and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to
             * that file.
             */
            fileHashes?: { [P in string]: FileHashes };
        }
        interface SourceContext {
            /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
            cloudRepo?: CloudRepoSourceContext;
            /** A SourceContext referring to a Gerrit project. */
            gerrit?: GerritSourceContext;
            /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
            git?: GitSourceContext;
            /** Labels with user defined metadata. */
            labels?: { [P in string]: string };
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface UpgradeDistribution {
            /**
             * The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at
             * https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
             */
            classification?: string;
            /** Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/. */
            cpeUri?: string;
            /** The cve tied to this Upgrade. */
            cve?: string[];
            /** The severity as specified by the upstream operating system. */
            severity?: string;
        }
        interface UpgradeOccurrence {
            /** Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence. */
            distribution?: UpgradeDistribution;
            /** Required for non-Windows OS. The package this Upgrade is for. */
            package?: string;
            /** Required for non-Windows OS. The version of the package in a machine + human readable form. */
            parsedVersion?: Version;
            /** Required for Windows OS. Represents the metadata about the Windows update. */
            windowsUpdate?: WindowsUpdate;
        }
        interface Version {
            /** Used to correct mistakes in the version numbering scheme. */
            epoch?: number;
            /** Human readable version string. This string is of the form :- and is only set when kind is NORMAL. */
            fullName?: string;
            /**
             * Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and
             * end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set
             * to true when the version is included in a range.
             */
            inclusive?: boolean;
            /** Required. Distinguishes between sentinel MIN/MAX versions and normal versions. */
            kind?: string;
            /** Required only when version kind is NORMAL. The main part of the version name. */
            name?: string;
            /** The iteration of the package build from the above version. */
            revision?: string;
        }
        interface VulnerabilityOccurrence {
            /** Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity. */
            cvssScore?: number;
            /** The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. */
            effectiveSeverity?: string;
            /** Output only. Whether at least one of the affected packages has a fix available. */
            fixAvailable?: boolean;
            /** Output only. A detailed description of this vulnerability. */
            longDescription?: string;
            /** Required. The set of affected locations and their fixes (if available) within the associated resource. */
            packageIssue?: PackageIssue[];
            /** Output only. URLs related to this vulnerability. */
            relatedUrls?: RelatedUrl[];
            /** Output only. The note provider assigned severity of this vulnerability. */
            severity?: string;
            /** Output only. A one sentence description of this vulnerability. */
            shortDescription?: string;
            /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
            type?: string;
        }
        interface WindowsUpdate {
            /** The list of categories to which the update belongs. */
            categories?: Category[];
            /** The localized description of the update. */
            description?: string;
            /** Required - The unique identifier for the update. */
            identity?: Identity;
            /** The Microsoft Knowledge Base article IDs that are associated with the update. */
            kbArticleIds?: string[];
            /** The last published timestamp of the update. */
            lastPublishedTimestamp?: string;
            /** The hyperlink to the support information for the update. */
            supportUrl?: string;
            /** The localized title of the update. */
            title?: string;
        }
        interface OperationsResource {
            /**
             * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support
             * this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the
             * operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a
             * google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
             */
            cancel(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be cancelled. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /**
             * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't
             * support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
             */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to be deleted. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
            /**
             * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services
             * to override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
             * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
             * ensure the name binding is the parent resource, without the operations collection id.
             */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The standard list filter. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation's parent resource. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The standard list page size. */
                pageSize?: number;
                /** The standard list page token. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOperationsResponse>;
            /**
             * Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is
             * immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns
             * `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even
             * an immediate response is no guarantee that the operation is done.
             */
            wait(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the operation resource to wait on. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also
                 * specified, the shorter one will be used.
                 */
                timeout?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Operation>;
        }
        interface VulnerabilitiesResource {
            /** Lists vulnerabilities resulting from a successfully completed scan. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The number of vulnerabilities to retrieve. */
                pageSize?: number;
                /** The page token, resulting from a previous call to ListVulnerabilities. */
                pageToken?: string;
                /** Required. The parent of the collection of Vulnerabilities being requested. Format: projects/[project_name]/locations/[location]/scans/[scan_id] */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListVulnerabilitiesResponseV1>;
        }
        interface ScansResource {
            /** Initiates an analysis of the provided packages. */
            analyzePackages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location] */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: AnalyzePackagesRequestV1;
            }): Request<Operation>;
            analyzePackages(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location] */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: AnalyzePackagesRequestV1): Request<Operation>;
            vulnerabilities: VulnerabilitiesResource;
        }
        interface LocationsResource {
            operations: OperationsResource;
            scans: ScansResource;
        }
        interface ProjectsResource {
            locations: LocationsResource;
        }

        const projects: ProjectsResource;
    }
}
