/* Type definitions for non-npm package On-Demand Scanning API v1beta1 0.0 */
// Project: https://cloud.google.com/container-analysis/docs/on-demand-scanning/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://ondemandscanning.googleapis.com/$discovery/rest?version=v1beta1
// Revision: 20250224

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load On-Demand Scanning API v1beta1 */
  function load(
    urlOrObject: 'https://ondemandscanning.googleapis.com/$discovery/rest?version=v1beta1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'ondemandscanning', version: 'v1beta1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'ondemandscanning',
    version: 'v1beta1',
    callback: () => any,
  ): void;

  namespace ondemandscanning {
    interface AliasContext {
      /** The alias kind. */
      kind?: string;
      /** The alias name. */
      name?: string;
    }
    interface AnalysisCompleted {
      analysisType?: string[];
    }
    interface AnalyzePackagesMetadata {
      /** When the scan was created. */
      createTime?: string;
      /** The resource URI of the container image being scanned. */
      resourceUri?: string;
    }
    interface AnalyzePackagesMetadataV1 {
      /** When the scan was created. */
      createTime?: string;
      /** The resource URI of the container image being scanned. */
      resourceUri?: string;
    }
    interface AnalyzePackagesRequest {
      /** The packages to analyze. */
      packages?: PackageData[];
      /** Required. The resource URI of the container image being scanned. */
      resourceUri?: string;
    }
    interface AnalyzePackagesResponse {
      /** The name of the scan resource created by this successful scan. */
      scan?: string;
    }
    interface AnalyzePackagesResponseV1 {
      /** The name of the scan resource created by this successful scan. */
      scan?: string;
    }
    interface Artifact {
      /** Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container. */
      checksum?: string;
      /** Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`. */
      id?: string;
      /** Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image. */
      names?: string[];
    }
    interface AttestationOccurrence {
      /** One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas. */
      jwts?: Jwt[];
      /** Required. The serialized payload that is verified by one or more `signatures`. */
      serializedPayload?: string;
      /** One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification. */
      signatures?: Signature[];
    }
    interface BaseImage {
      /** The number of layers that the base image is composed of. */
      layerCount?: number;
      /** The name of the base image. */
      name?: string;
      /** The repository name in which the base image is from. */
      repository?: string;
    }
    interface BinarySourceInfo {
      /** The binary package. This is significant when the source is different than the binary itself. Historically if they've differed, we've stored the name of the source and its version in the package/version fields, but we should also store the binary package info, as that's what's actually installed. See b/175908657#comment15. */
      binaryVersion?: PackageVersion;
      /** The source package. Similar to the above, this is significant when the source is different than the binary itself. Since the top-level package/version fields are based on an if/else, we need a separate field for both binary and source if we want to know definitively where the data is coming from. */
      sourceVersion?: PackageVersion;
    }
    interface BuildDefinition {
      buildType?: string;
      externalParameters?: {[P in string]: any};
      internalParameters?: {[P in string]: any};
      resolvedDependencies?: ResourceDescriptor[];
    }
    interface BuilderConfig {
      id?: string;
    }
    interface BuildMetadata {
      finishedOn?: string;
      invocationId?: string;
      startedOn?: string;
    }
    interface BuildOccurrence {
      /** Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec. */
      intotoProvenance?: InTotoProvenance;
      /** In-Toto Slsa Provenance V1 represents a slsa provenance meeting the slsa spec, wrapped in an in-toto statement. This allows for direct jsonification of a to-spec in-toto slsa statement with a to-spec slsa provenance. */
      inTotoSlsaProvenanceV1?: InTotoSlsaProvenanceV1;
      /** In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the Occurrence's envelope. */
      intotoStatement?: InTotoStatement;
      /** The actual provenance for the build. */
      provenance?: BuildProvenance;
      /** Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes. */
      provenanceBytes?: string;
    }
    interface BuildProvenance {
      /** Version string of the builder at the time this build was executed. */
      builderVersion?: string;
      /** Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details. */
      buildOptions?: {[P in string]: string};
      /** Output of the build. */
      builtArtifacts?: Artifact[];
      /** Commands requested by the build. */
      commands?: Command[];
      /** Time at which the build was created. */
      createTime?: string;
      /** E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time. */
      creator?: string;
      /** Time at which execution of the build was finished. */
      endTime?: string;
      /** Required. Unique identifier of the build. */
      id?: string;
      /** URI where any logs for this provenance were written. */
      logsUri?: string;
      /** ID of the project. */
      projectId?: string;
      /** Details of the Source input to the build. */
      sourceProvenance?: Source;
      /** Time at which execution of the build was started. */
      startTime?: string;
      /** Trigger identifier if the build was triggered automatically; empty if not. */
      triggerId?: string;
    }
    interface Category {
      /** The identifier of the category. */
      categoryId?: string;
      /** The localized name of the category. */
      name?: string;
    }
    interface CloudRepoSourceContext {
      /** An alias, which may be a branch or tag. */
      aliasContext?: AliasContext;
      /** The ID of the repo. */
      repoId?: RepoId;
      /** A revision ID. */
      revisionId?: string;
    }
    interface Command {
      /** Command-line arguments used when executing this command. */
      args?: string[];
      /** Working directory (relative to project source root) used when running this command. */
      dir?: string;
      /** Environment variables set before running this command. */
      env?: string[];
      /** Optional unique identifier for this command, used in wait_for to reference this command as a dependency. */
      id?: string;
      /** Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`. */
      name?: string;
      /** The ID(s) of the command(s) that this command depends on. */
      waitFor?: string[];
    }
    interface Completeness {
      /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
      arguments?: boolean;
      /** If true, the builder claims that recipe.environment is claimed to be complete. */
      environment?: boolean;
      /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
      materials?: boolean;
    }
    interface ComplianceOccurrence {
      nonComplianceReason?: string;
      nonCompliantFiles?: NonCompliantFile[];
      /** The OS and config version the benchmark was run on. */
      version?: ComplianceVersion;
    }
    interface ComplianceVersion {
      /** The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS". */
      benchmarkDocument?: string;
      /** The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to. */
      cpeUri?: string;
      /** The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in. */
      version?: string;
    }
    interface CVSS {
      attackComplexity?: string;
      /** Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. */
      attackVector?: string;
      authentication?: string;
      availabilityImpact?: string;
      /** The base score is a function of the base metric scores. */
      baseScore?: number;
      confidentialityImpact?: string;
      exploitabilityScore?: number;
      impactScore?: number;
      integrityImpact?: string;
      privilegesRequired?: string;
      scope?: string;
      userInteraction?: string;
    }
    interface DeploymentOccurrence {
      /** Address of the runtime element hosting this deployment. */
      address?: string;
      /** Configuration used to create this deployment. */
      config?: string;
      /** Required. Beginning of the lifetime of this deployment. */
      deployTime?: string;
      /** Platform hosting this deployment. */
      platform?: string;
      /** Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name. */
      resourceUri?: string[];
      /** End of the lifetime of this deployment. */
      undeployTime?: string;
      /** Identity of the user that triggered this deployment. */
      userEmail?: string;
    }
    interface DiscoveryOccurrence {
      analysisCompleted?: AnalysisCompleted;
      /** Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors. */
      analysisError?: Status[];
      /** The status of discovery for the resource. */
      analysisStatus?: string;
      /** When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage is output only and populated by the API. */
      analysisStatusError?: Status;
      /** Output only. The time occurrences related to this discovery occurrence were archived. */
      archiveTime?: string;
      /** Whether the resource is continuously analyzed. */
      continuousAnalysis?: string;
      /** The CPE of the resource being scanned. */
      cpe?: string;
      /** The last time this resource was scanned. */
      lastScanTime?: string;
      /** The status of an SBOM generation. */
      sbomStatus?: SBOMStatus;
    }
    interface DSSEAttestationOccurrence {
      /** If doing something security critical, make sure to verify the signatures in this metadata. */
      envelope?: Envelope;
      statement?: InTotoStatement;
    }
    interface Empty {}
    interface Envelope {
      payload?: string;
      payloadType?: string;
      signatures?: EnvelopeSignature[];
    }
    interface EnvelopeSignature {
      keyid?: string;
      sig?: string;
    }
    interface FileHashes {
      /** Required. Collection of file hashes. */
      fileHash?: Hash[];
    }
    interface FileLocation {
      /** For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file. */
      filePath?: string;
      layerDetails?: LayerDetails;
    }
    interface Fingerprint {
      /** Required. The layer ID of the final layer in the Docker image's v1 representation. */
      v1Name?: string;
      /** Required. The ordered list of v2 blobs that represent a given image. */
      v2Blob?: string[];
      /** Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. */
      v2Name?: string;
    }
    interface GerritSourceContext {
      /** An alias, which may be a branch or tag. */
      aliasContext?: AliasContext;
      /** The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project. */
      gerritProject?: string;
      /** The URI of a running Gerrit instance. */
      hostUri?: string;
      /** A revision (commit) ID. */
      revisionId?: string;
    }
    interface GitSourceContext {
      /** Git commit hash. */
      revisionId?: string;
      /** Git repository URL. */
      url?: string;
    }
    interface GrafeasV1BaseImage {
      /** The number of layers that the base image is composed of. */
      layerCount?: number;
      /** The name of the base image. */
      name?: string;
      /** The repository name in which the base image is from. */
      repository?: string;
    }
    interface GrafeasV1FileLocation {
      /** For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file. */
      filePath?: string;
      /** Each package found in a file should have its own layer metadata (that is, information from the origin layer of the package). */
      layerDetails?: GrafeasV1LayerDetails;
    }
    interface GrafeasV1LayerDetails {
      /** The base images the layer is found within. */
      baseImages?: GrafeasV1BaseImage[];
      /** The layer build command that was used to build the layer. This may not be found in all layers depending on how the container image is built. */
      command?: string;
      /** The diff ID (typically a sha256 hash) of the layer in the container image. */
      diffId?: string;
      /** The index of the layer in the container image. */
      index?: number;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder {
      id?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness {
      environment?: boolean;
      materials?: boolean;
      parameters?: boolean;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource {
      digest?: {[P in string]: string};
      entryPoint?: string;
      uri?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation {
      configSource?: GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource;
      environment?: {[P in string]: any};
      parameters?: {[P in string]: any};
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial {
      digest?: {[P in string]: string};
      uri?: string;
    }
    interface GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata {
      buildFinishedOn?: string;
      buildInvocationId?: string;
      buildStartedOn?: string;
      completeness?: GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness;
      reproducible?: boolean;
    }
    interface Hash {
      /** Required. The type of hash that was performed, e.g. "SHA-256". */
      type?: string;
      /** Required. The hash value. */
      value?: string;
    }
    interface Identity {
      /** The revision number of the update. */
      revision?: number;
      /** The revision independent identifier of the update. */
      updateId?: string;
    }
    interface ImageOccurrence {
      /** Output only. This contains the base image URL for the derived image occurrence. */
      baseResourceUrl?: string;
      /** Output only. The number of layers by which this image differs from the associated image basis. */
      distance?: number;
      /** Required. The fingerprint of the derived image. */
      fingerprint?: Fingerprint;
      /** This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer. */
      layerInfo?: Layer[];
    }
    interface InTotoProvenance {
      /** required */
      builderConfig?: BuilderConfig;
      /** The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty. */
      materials?: string[];
      metadata?: Metadata;
      /** Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required */
      recipe?: Recipe;
    }
    interface InTotoSlsaProvenanceV1 {
      /** InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement */
      _type?: string;
      predicate?: SlsaProvenanceV1;
      predicateType?: string;
      subject?: Subject[];
    }
    interface InTotoStatement {
      /** Always `https://in-toto.io/Statement/v0.1`. */
      _type?: string;
      /** `https://slsa.dev/provenance/v0.1` for SlsaProvenance. */
      predicateType?: string;
      provenance?: InTotoProvenance;
      slsaProvenance?: SlsaProvenance;
      slsaProvenanceZeroTwo?: SlsaProvenanceZeroTwo;
      subject?: Subject[];
    }
    interface Justification {
      /** Additional details on why this justification was chosen. */
      details?: string;
      /** The justification type for this vulnerability. */
      justificationType?: string;
    }
    interface Jwt {
      /** The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1 */
      compactJwt?: string;
    }
    interface LanguagePackageDependency {
      package?: string;
      version?: string;
    }
    interface Layer {
      /** The recovered arguments to the Dockerfile directive. */
      arguments?: string;
      /** Required. The recovered Dockerfile directive used to construct this layer. See https://docs.docker.com/engine/reference/builder/ for more information. */
      directive?: string;
    }
    interface LayerDetails {
      /** The base images the layer is found within. */
      baseImages?: BaseImage[];
      /** The layer build command that was used to build the layer. This may not be found in all layers depending on how the container image is built. */
      command?: string;
      /** The diff ID (sha256 hash) of the layer in the container image. */
      diffId?: string;
      /** The index of the layer in the container image. */
      index?: number;
    }
    interface License {
      /** Comments */
      comments?: string;
      /** Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2". */
      expression?: string;
    }
    interface ListOperationsResponse {
      /** The standard List next-page token. */
      nextPageToken?: string;
      /** A list of operations that matches the specified filter in the request. */
      operations?: Operation[];
    }
    interface ListVulnerabilitiesResponse {
      /** A page token that can be used in a subsequent call to ListVulnerabilities to continue retrieving results. */
      nextPageToken?: string;
      /** The list of Vulnerability Occurrences resulting from a scan. */
      occurrences?: Occurrence[];
    }
    interface Location {
      /** Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) */
      cpeUri?: string;
      /** The path from which we gathered that this package/version is installed. */
      path?: string;
      /** Deprecated. The version installed at this location. */
      version?: Version;
    }
    interface Maintainer {
      email?: string;
      kind?: string;
      name?: string;
      url?: string;
    }
    interface Material {
      digest?: {[P in string]: string};
      uri?: string;
    }
    interface Metadata {
      /** The timestamp of when the build completed. */
      buildFinishedOn?: string;
      /** Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec. */
      buildInvocationId?: string;
      /** The timestamp of when the build started. */
      buildStartedOn?: string;
      /** Indicates that the builder claims certain fields in this message to be complete. */
      completeness?: Completeness;
      /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
      reproducible?: boolean;
    }
    interface NonCompliantFile {
      /** Command to display the non-compliant files. */
      displayCommand?: string;
      /** Empty if `display_command` is set. */
      path?: string;
      /** Explains why a file is non compliant for a CIS check. */
      reason?: string;
    }
    interface Occurrence {
      /** Describes an attestation of an artifact. */
      attestation?: AttestationOccurrence;
      /** Describes a verifiable build. */
      build?: BuildOccurrence;
      /** Describes a compliance violation on a linked resource. */
      compliance?: ComplianceOccurrence;
      /** Output only. The time this occurrence was created. */
      createTime?: string;
      /** Describes the deployment of an artifact on a runtime. */
      deployment?: DeploymentOccurrence;
      /** Describes when a resource was discovered. */
      discovery?: DiscoveryOccurrence;
      /** Describes an attestation of an artifact using dsse. */
      dsseAttestation?: DSSEAttestationOccurrence;
      /** https://github.com/secure-systems-lab/dsse */
      envelope?: Envelope;
      /** Describes how this resource derives from the basis in the associated note. */
      image?: ImageOccurrence;
      /** Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests. */
      kind?: string;
      /** Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`. */
      name?: string;
      /** Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests. */
      noteName?: string;
      /** Describes the installation of a package on the linked resource. */
      package?: PackageOccurrence;
      /** A description of actions that can be taken to remedy the note. */
      remediation?: string;
      /** Required. Immutable. A URI that represents the resource for which the occurrence applies. For example, `https://gcr.io/project/image@sha256:123abc` for a Docker image. */
      resourceUri?: string;
      /** Describes a specific SBOM reference occurrences. */
      sbomReference?: SBOMReferenceOccurrence;
      /** Output only. The time this occurrence was last updated. */
      updateTime?: string;
      /** Describes an available package upgrade on the linked resource. */
      upgrade?: UpgradeOccurrence;
      /** Describes a security vulnerability. */
      vulnerability?: VulnerabilityOccurrence;
    }
    interface Operation {
      /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
      done?: boolean;
      /** The error result of the operation in case of failure or cancellation. */
      error?: Status;
      /** Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any. */
      metadata?: {[P in string]: any};
      /** The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`. */
      name?: string;
      /** The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`. */
      response?: {[P in string]: any};
    }
    interface PackageData {
      /** The architecture of the package. */
      architecture?: string;
      /** A bundle containing the binary and source information. */
      binarySourceInfo?: BinarySourceInfo[];
      /** DEPRECATED */
      binaryVersion?: PackageVersion;
      /** The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability may manifest. Examples include distro or storage location for vulnerable jar. */
      cpeUri?: string;
      /** The dependency chain between this package and the user's artifact. List in order from the customer's package under review first, to the current package last. Inclusive of the original package and the current package. */
      dependencyChain?: LanguagePackageDependency[];
      /** The path to the jar file / go binary file. */
      fileLocation?: FileLocation[];
      /** HashDigest stores the SHA512 hash digest of the jar file if the package is of type Maven. This field will be unset for non Maven packages. */
      hashDigest?: string;
      layerDetails?: LayerDetails;
      /** The list of licenses found that are related to a given package. Note that licenses may also be stored on the BinarySourceInfo. If there is no BinarySourceInfo (because there's no concept of source vs binary), then it will be stored here, while if there are BinarySourceInfos, it will be stored there, as one source can have multiple binaries with different licenses. */
      licenses?: string[];
      /** The maintainer of the package. */
      maintainer?: Maintainer;
      /** The OS affected by a vulnerability Used to generate the cpe_uri for OS packages */
      os?: string;
      /** The version of the OS Used to generate the cpe_uri for OS packages */
      osVersion?: string;
      /** The package being analysed for vulnerabilities */
      package?: string;
      /** The type of package: os, maven, go, etc. */
      packageType?: string;
      /** CVEs that this package is no longer vulnerable to go/drydock-dd-custom-binary-scanning */
      patchedCve?: string[];
      /** DEPRECATED */
      sourceVersion?: PackageVersion;
      unused?: string;
      /** The version of the package being analysed */
      version?: string;
    }
    interface PackageIssue {
      /** Required. The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was found in. */
      affectedCpeUri?: string;
      /** Required. The package this vulnerability was found in. */
      affectedPackage?: string;
      /** Required. The version of the package that is installed on the resource affected by this vulnerability. */
      affectedVersion?: Version;
      /** Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available. */
      effectiveSeverity?: string;
      /** The location at which this package was found. */
      fileLocation?: GrafeasV1FileLocation[];
      /** Output only. Whether a fix is available for this package. */
      fixAvailable?: boolean;
      /** The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was fixed in. It is possible for this to be different from the affected_cpe_uri. */
      fixedCpeUri?: string;
      /** The package this vulnerability was fixed in. It is possible for this to be different from the affected_package. */
      fixedPackage?: string;
      /** Required. The version of the package this vulnerability was fixed in. Setting this to VersionKind.MAXIMUM means no fix is yet available. */
      fixedVersion?: Version;
      /** The type of package (e.g. OS, MAVEN, GO). */
      packageType?: string;
    }
    interface PackageOccurrence {
      /** Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages. */
      architecture?: string;
      /** Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages. */
      cpeUri?: string;
      /** Licenses that have been declared by the authors of the package. */
      license?: License;
      /** All of the places within the filesystem versions of this package have been found. */
      location?: Location[];
      /** Required. Output only. The name of the installed package. */
      name?: string;
      /** Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      packageType?: string;
      /** Output only. The version of the package. */
      version?: Version;
    }
    interface PackageVersion {
      /** The licenses associated with this package. Note that this has to go on the PackageVersion level, because we can have cases with images with the same source having different licences. E.g. in Alpine, musl and musl-utils both have the same origin musl, but have different sets of licenses. */
      licenses?: string[];
      name?: string;
      version?: string;
    }
    interface ProjectRepoId {
      /** The ID of the project. */
      projectId?: string;
      /** The name of the repo. Leave empty for the default repo. */
      repoName?: string;
    }
    interface ProvenanceBuilder {
      builderDependencies?: ResourceDescriptor[];
      id?: string;
      version?: {[P in string]: string};
    }
    interface Recipe {
      /** Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Since the arguments field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any". */
      arguments?: Array<{[P in string]: any}>;
      /** Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64. */
      definedInMaterial?: string;
      /** String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use. */
      entryPoint?: string;
      /** Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Since the environment field can greatly vary in structure, depending on the builder and recipe type, this is of form "Any". */
      environment?: Array<{[P in string]: any}>;
      /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
      type?: string;
    }
    interface RelatedUrl {
      /** Label to describe usage of the URL. */
      label?: string;
      /** Specific URL associated with the resource. */
      url?: string;
    }
    interface Remediation {
      /** Contains a comprehensive human-readable discussion of the remediation. */
      details?: string;
      /** The type of remediation that can be applied. */
      remediationType?: string;
      /** Contains the URL where to obtain the remediation. */
      remediationUri?: RelatedUrl;
    }
    interface RepoId {
      /** A combination of a project ID and a repo name. */
      projectRepoId?: ProjectRepoId;
      /** A server-assigned, globally unique identifier. */
      uid?: string;
    }
    interface ResourceDescriptor {
      annotations?: {[P in string]: any};
      content?: string;
      digest?: {[P in string]: string};
      downloadLocation?: string;
      mediaType?: string;
      name?: string;
      uri?: string;
    }
    interface RunDetails {
      builder?: ProvenanceBuilder;
      byproducts?: ResourceDescriptor[];
      metadata?: BuildMetadata;
    }
    interface SbomReferenceIntotoPayload {
      /** Identifier for the schema of the Statement. */
      _type?: string;
      /** Additional parameters of the Predicate. Includes the actual data about the SBOM. */
      predicate?: SbomReferenceIntotoPredicate;
      /** URI identifying the type of the Predicate. */
      predicateType?: string;
      /** Set of software artifacts that the attestation applies to. Each element represents a single software artifact. */
      subject?: Subject[];
    }
    interface SbomReferenceIntotoPredicate {
      /** A map of algorithm to digest of the contents of the SBOM. */
      digest?: {[P in string]: string};
      /** The location of the SBOM. */
      location?: string;
      /** The mime type of the SBOM. */
      mimeType?: string;
      /** The person or system referring this predicate to the consumer. */
      referrerId?: string;
    }
    interface SBOMReferenceOccurrence {
      /** The actual payload that contains the SBOM reference data. */
      payload?: SbomReferenceIntotoPayload;
      /** The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'. */
      payloadType?: string;
      /** The signatures over the payload. */
      signatures?: EnvelopeSignature[];
    }
    interface SBOMStatus {
      /** If there was an error generating an SBOM, this will indicate what that error was. */
      error?: string;
      /** The progress of the SBOM generation. */
      sbomState?: string;
    }
    interface Signature {
      /** The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5" */
      publicKeyId?: string;
      /** The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload. */
      signature?: string;
    }
    interface SlsaBuilder {
      id?: string;
    }
    interface SlsaCompleteness {
      /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
      arguments?: boolean;
      /** If true, the builder claims that recipe.environment is claimed to be complete. */
      environment?: boolean;
      /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
      materials?: boolean;
    }
    interface SlsaMetadata {
      /** The timestamp of when the build completed. */
      buildFinishedOn?: string;
      /** Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec. */
      buildInvocationId?: string;
      /** The timestamp of when the build started. */
      buildStartedOn?: string;
      /** Indicates that the builder claims certain fields in this message to be complete. */
      completeness?: SlsaCompleteness;
      /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
      reproducible?: boolean;
    }
    interface SlsaProvenance {
      /** required */
      builder?: SlsaBuilder;
      /** The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty. */
      materials?: Material[];
      metadata?: SlsaMetadata;
      /** Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit identical output (if the build is reproducible). required */
      recipe?: SlsaRecipe;
    }
    interface SlsaProvenanceV1 {
      buildDefinition?: BuildDefinition;
      runDetails?: RunDetails;
    }
    interface SlsaProvenanceZeroTwo {
      buildConfig?: {[P in string]: any};
      builder?: GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder;
      buildType?: string;
      invocation?: GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation;
      materials?: GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial[];
      metadata?: GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata;
    }
    interface SlsaRecipe {
      /** Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different. */
      arguments?: {[P in string]: any};
      /** Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64. */
      definedInMaterial?: string;
      /** String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use. */
      entryPoint?: string;
      /** Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different. */
      environment?: {[P in string]: any};
      /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
      type?: string;
    }
    interface Source {
      /** If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field. */
      additionalContexts?: SourceContext[];
      /** If provided, the input binary artifacts for the build came from this location. */
      artifactStorageSourceUri?: string;
      /** If provided, the source code used for the build came from this location. */
      context?: SourceContext;
      /** Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file. */
      fileHashes?: {[P in string]: FileHashes};
    }
    interface SourceContext {
      /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
      cloudRepo?: CloudRepoSourceContext;
      /** A SourceContext referring to a Gerrit project. */
      gerrit?: GerritSourceContext;
      /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
      git?: GitSourceContext;
      /** Labels with user defined metadata. */
      labels?: {[P in string]: string};
    }
    interface Status {
      /** The status code, which should be an enum value of google.rpc.Code. */
      code?: number;
      /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
      details?: Array<{[P in string]: any}>;
      /** A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client. */
      message?: string;
    }
    interface Subject {
      /** `"": ""` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet */
      digest?: {[P in string]: string};
      name?: string;
    }
    interface UpgradeDistribution {
      /** The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. For Windows the classification is one of the category_ids listed at https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85) */
      classification?: string;
      /** Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/. */
      cpeUri?: string;
      /** The cve tied to this Upgrade. */
      cve?: string[];
      /** The severity as specified by the upstream operating system. */
      severity?: string;
    }
    interface UpgradeOccurrence {
      /** Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence. */
      distribution?: UpgradeDistribution;
      /** Required for non-Windows OS. The package this Upgrade is for. */
      package?: string;
      /** Required for non-Windows OS. The version of the package in a machine + human readable form. */
      parsedVersion?: Version;
      /** Required for Windows OS. Represents the metadata about the Windows update. */
      windowsUpdate?: WindowsUpdate;
    }
    interface Version {
      /** Used to correct mistakes in the version numbering scheme. */
      epoch?: number;
      /** Human readable version string. This string is of the form :- and is only set when kind is NORMAL. */
      fullName?: string;
      /** Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range. */
      inclusive?: boolean;
      /** Required. Distinguishes between sentinel MIN/MAX versions and normal versions. */
      kind?: string;
      /** Required only when version kind is NORMAL. The main part of the version name. */
      name?: string;
      /** The iteration of the package build from the above version. */
      revision?: string;
    }
    interface VexAssessment {
      /** Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs. */
      cve?: string;
      /** Contains information about the impact of this vulnerability, this will change with time. */
      impacts?: string[];
      /** Justification provides the justification when the state of the assessment if NOT_AFFECTED. */
      justification?: Justification;
      /** The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`. */
      noteName?: string;
      /** Holds a list of references associated with this vulnerability item and assessment. */
      relatedUris?: RelatedUrl[];
      /** Specifies details on how to handle (and presumably, fix) a vulnerability. */
      remediations?: Remediation[];
      /** Provides the state of this Vulnerability assessment. */
      state?: string;
      /** The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc. */
      vulnerabilityId?: string;
    }
    interface VulnerabilityOccurrence {
      /** Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity. */
      cvssScore?: number;
      /** The cvss v2 score for the vulnerability. */
      cvssV2?: CVSS;
      /** The cvss v3 score for the vulnerability. */
      cvssv3?: CVSS;
      /** Output only. CVSS version used to populate cvss_score and severity. */
      cvssVersion?: string;
      /** The distro assigned severity for this vulnerability when it is available, otherwise this is the note provider assigned severity. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues. */
      effectiveSeverity?: string;
      /** Occurrence-specific extra details about the vulnerability. */
      extraDetails?: string;
      /** Output only. Whether at least one of the affected packages has a fix available. */
      fixAvailable?: boolean;
      /** Output only. A detailed description of this vulnerability. */
      longDescription?: string;
      /** Required. The set of affected locations and their fixes (if available) within the associated resource. */
      packageIssue?: PackageIssue[];
      /** Output only. URLs related to this vulnerability. */
      relatedUrls?: RelatedUrl[];
      /** Output only. The note provider assigned severity of this vulnerability. */
      severity?: string;
      /** Output only. A one sentence description of this vulnerability. */
      shortDescription?: string;
      /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
      type?: string;
      vexAssessment?: VexAssessment;
    }
    interface WindowsUpdate {
      /** The list of categories to which the update belongs. */
      categories?: Category[];
      /** The localized description of the update. */
      description?: string;
      /** Required - The unique identifier for the update. */
      identity?: Identity;
      /** The Microsoft Knowledge Base article IDs that are associated with the update. */
      kbArticleIds?: string[];
      /** The last published timestamp of the update. */
      lastPublishedTimestamp?: string;
      /** The hyperlink to the support information for the update. */
      supportUrl?: string;
      /** The localized title of the update. */
      title?: string;
    }
    interface OperationsResource {
      /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
      cancel(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be cancelled. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to be deleted. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
      /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** The standard list filter. */
        filter?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation's parent resource. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The standard list page size. */
        pageSize?: number;
        /** The standard list page token. */
        pageToken?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListOperationsResponse>;
      /** Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done. */
      wait(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** The name of the operation resource to wait on. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used. */
        timeout?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<Operation>;
    }
    interface VulnerabilitiesResource {
      /** Lists vulnerabilities resulting from a successfully completed scan. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** The number of vulnerabilities to retrieve. */
        pageSize?: number;
        /** The page token, resulting from a previous call to ListVulnerabilities. */
        pageToken?: string;
        /** Required. The parent of the collection of Vulnerabilities being requested. Format: projects/[project_name]/locations/[location]/scans/[scan_id] */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListVulnerabilitiesResponse>;
    }
    interface ScansResource {
      /** Initiates an analysis of the provided packages. */
      analyzePackages(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location] */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: AnalyzePackagesRequest;
      }): Request<Operation>;
      analyzePackages(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The parent of the resource for which analysis is requested. Format: projects/[project_name]/locations/[location] */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: AnalyzePackagesRequest,
      ): Request<Operation>;
      vulnerabilities: VulnerabilitiesResource;
    }
    interface LocationsResource {
      operations: OperationsResource;
      scans: ScansResource;
    }
    interface ProjectsResource {
      locations: LocationsResource;
    }

    const projects: ProjectsResource;
  }
}
