/* This is stub file for gapi.client.backupdr-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250910

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://backupdr.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.backupdr */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.backupdr.projects.locations.get({
      name: 'Test string',
    });
    /** Gets the Trial state for a given project */
    await gapi.client.backupdr.projects.locations.getTrial({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.backupdr.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create a BackupPlanAssociation */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.create(
      {
        backupPlanAssociationId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        backupPlan: 'Test string',
        backupPlanRevisionId: 'Test string',
        backupPlanRevisionName: 'Test string',
        cloudSqlInstanceBackupPlanAssociationProperties: {
          instanceCreateTime: 'Test string',
        },
        createTime: 'Test string',
        dataSource: 'Test string',
        name: 'Test string',
        resource: 'Test string',
        resourceType: 'Test string',
        rulesConfigInfo: [
          {
            lastBackupError: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            lastBackupState: 'Test string',
            lastSuccessfulBackupConsistencyTime: 'Test string',
            ruleId: 'Test string',
          },
        ],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single BackupPlanAssociation. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** List BackupPlanAssociations for a given resource type. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.fetchForResourceType(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        resourceType: 'Test string',
      },
    );
    /** Gets details of a single BackupPlanAssociation. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.get({
      name: 'Test string',
    });
    /** Lists BackupPlanAssociations in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a BackupPlanAssociation. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupPlan: 'Test string',
        backupPlanRevisionId: 'Test string',
        backupPlanRevisionName: 'Test string',
        cloudSqlInstanceBackupPlanAssociationProperties: {
          instanceCreateTime: 'Test string',
        },
        createTime: 'Test string',
        dataSource: 'Test string',
        name: 'Test string',
        resource: 'Test string',
        resourceType: 'Test string',
        rulesConfigInfo: [
          {
            lastBackupError: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            lastBackupState: 'Test string',
            lastSuccessfulBackupConsistencyTime: 'Test string',
            ruleId: 'Test string',
          },
        ],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Triggers a new Backup. */
    await gapi.client.backupdr.projects.locations.backupPlanAssociations.triggerBackup(
      {
        name: 'Test string',
      },
      {
        requestId: 'Test string',
        ruleId: 'Test string',
      },
    );
    /** Create a BackupPlan */
    await gapi.client.backupdr.projects.locations.backupPlans.create(
      {
        backupPlanId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        backupRules: [
          {
            backupRetentionDays: 42,
            ruleId: 'Test string',
            standardSchedule: {
              backupWindow: {
                endHourOfDay: 42,
                startHourOfDay: 42,
              },
              daysOfMonth: [42],
              daysOfWeek: ['Test string'],
              hourlyFrequency: 42,
              months: ['Test string'],
              recurrenceType: 'Test string',
              timeZone: 'Test string',
              weekDayOfMonth: {
                dayOfWeek: 'Test string',
                weekOfMonth: 'Test string',
              },
            },
          },
        ],
        backupVault: 'Test string',
        backupVaultServiceAccount: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        logRetentionDays: 'Test string',
        name: 'Test string',
        resourceType: 'Test string',
        revisionId: 'Test string',
        revisionName: 'Test string',
        state: 'Test string',
        supportedResourceTypes: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Deletes a single BackupPlan. */
    await gapi.client.backupdr.projects.locations.backupPlans.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single BackupPlan. */
    await gapi.client.backupdr.projects.locations.backupPlans.get({
      name: 'Test string',
    });
    /** Lists BackupPlans in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupPlans.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update a BackupPlan. */
    await gapi.client.backupdr.projects.locations.backupPlans.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupRules: [
          {
            backupRetentionDays: 42,
            ruleId: 'Test string',
            standardSchedule: {
              backupWindow: {
                endHourOfDay: 42,
                startHourOfDay: 42,
              },
              daysOfMonth: [42],
              daysOfWeek: ['Test string'],
              hourlyFrequency: 42,
              months: ['Test string'],
              recurrenceType: 'Test string',
              timeZone: 'Test string',
              weekDayOfMonth: {
                dayOfWeek: 'Test string',
                weekOfMonth: 'Test string',
              },
            },
          },
        ],
        backupVault: 'Test string',
        backupVaultServiceAccount: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        logRetentionDays: 'Test string',
        name: 'Test string',
        resourceType: 'Test string',
        revisionId: 'Test string',
        revisionName: 'Test string',
        state: 'Test string',
        supportedResourceTypes: ['Test string'],
        updateTime: 'Test string',
      },
    );
    /** Gets details of a single BackupPlanRevision. */
    await gapi.client.backupdr.projects.locations.backupPlans.revisions.get({
      name: 'Test string',
    });
    /** Lists BackupPlanRevisions in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupPlans.revisions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new BackupVault in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupVaults.create(
      {
        backupVaultId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
        validateOnly: true,
      },
      {
        accessRestriction: 'Test string',
        annotations: {
          A: 'Test string',
        },
        backupCount: 'Test string',
        backupMinimumEnforcedRetentionDuration: 'Test string',
        createTime: 'Test string',
        deletable: true,
        description: 'Test string',
        effectiveTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        totalStoredBytes: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a BackupVault. */
    await gapi.client.backupdr.projects.locations.backupVaults.delete({
      allowMissing: true,
      etag: 'Test string',
      force: true,
      ignoreBackupPlanReferences: true,
      name: 'Test string',
      requestId: 'Test string',
      validateOnly: true,
    });
    /** FetchUsableBackupVaults lists usable BackupVaults in a given project and location. Usable BackupVault are the ones that user has backupdr.backupVaults.get permission. */
    await gapi.client.backupdr.projects.locations.backupVaults.fetchUsable({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Gets details of a BackupVault. */
    await gapi.client.backupdr.projects.locations.backupVaults.get({
      name: 'Test string',
      view: 'Test string',
    });
    /** Lists BackupVaults in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupVaults.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the settings of a BackupVault. */
    await gapi.client.backupdr.projects.locations.backupVaults.patch(
      {
        force: true,
        forceUpdateAccessRestriction: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
        validateOnly: true,
      },
      {
        accessRestriction: 'Test string',
        annotations: {
          A: 'Test string',
        },
        backupCount: 'Test string',
        backupMinimumEnforcedRetentionDuration: 'Test string',
        createTime: 'Test string',
        deletable: true,
        description: 'Test string',
        effectiveTime: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        serviceAccount: 'Test string',
        state: 'Test string',
        totalStoredBytes: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Returns the caller's permissions on a BackupVault resource. A caller is not required to have Google IAM permission to make this request. */
    await gapi.client.backupdr.projects.locations.backupVaults.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Internal only. Abandons a backup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.abandonBackup(
      {
        dataSource: 'Test string',
      },
      {
        requestId: 'Test string',
      },
    );
    /** Internal only. Fetch access token for a given data source. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.fetchAccessToken(
      {
        name: 'Test string',
      },
      {
        generationId: 42,
      },
    );
    /** Internal only. Finalize a backup that was started by a call to InitiateBackup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.finalizeBackup(
      {
        dataSource: 'Test string',
      },
      {
        backupId: 'Test string',
        consistencyTime: 'Test string',
        description: 'Test string',
        recoveryRangeEndTime: 'Test string',
        recoveryRangeStartTime: 'Test string',
        requestId: 'Test string',
        retentionDuration: 'Test string',
      },
    );
    /** Gets details of a DataSource. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.get({
      name: 'Test string',
    });
    /** Internal only. Initiates a backup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.initiateBackup(
      {
        dataSource: 'Test string',
      },
      {
        backupId: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Lists DataSources in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates the settings of a DataSource. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.patch(
      {
        allowMissing: true,
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupBlockedByVaultAccessRestriction: true,
        backupConfigInfo: {
          backupApplianceBackupConfig: {
            applicationName: 'Test string',
            backupApplianceId: 'Test string',
            backupApplianceName: 'Test string',
            hostName: 'Test string',
            slaId: 'Test string',
            slpName: 'Test string',
            sltName: 'Test string',
          },
          gcpBackupConfig: {
            backupPlan: 'Test string',
            backupPlanAssociation: 'Test string',
            backupPlanDescription: 'Test string',
            backupPlanRevisionId: 'Test string',
            backupPlanRevisionName: 'Test string',
            backupPlanRules: ['Test string'],
          },
          lastBackupError: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          lastBackupState: 'Test string',
          lastSuccessfulBackupConsistencyTime: 'Test string',
        },
        backupCount: 'Test string',
        configState: 'Test string',
        createTime: 'Test string',
        dataSourceBackupApplianceApplication: {
          applianceId: 'Test string',
          applicationId: 'Test string',
          applicationName: 'Test string',
          backupAppliance: 'Test string',
          hostId: 'Test string',
          hostname: 'Test string',
          type: 'Test string',
        },
        dataSourceGcpResource: {
          cloudSqlInstanceDatasourceProperties: {
            databaseInstalledVersion: 'Test string',
            instanceCreateTime: 'Test string',
            instanceTier: 'Test string',
            name: 'Test string',
          },
          computeInstanceDatasourceProperties: {
            description: 'Test string',
            machineType: 'Test string',
            name: 'Test string',
            totalDiskCount: 'Test string',
            totalDiskSizeGb: 'Test string',
          },
          diskDatasourceProperties: {
            description: 'Test string',
            name: 'Test string',
            sizeGb: 'Test string',
            type: 'Test string',
          },
          gcpResourcename: 'Test string',
          location: 'Test string',
          type: 'Test string',
        },
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        totalStoredBytes: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a DataSource. This is a custom method instead of a standard delete method because external clients will not delete DataSources except for BackupDR backup appliances. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.remove(
      {
        name: 'Test string',
      },
      {
        requestId: 'Test string',
      },
    );
    /** Sets the internal status of a DataSource. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.setInternalStatus(
      {
        dataSource: 'Test string',
      },
      {
        backupConfigState: 'Test string',
        requestId: 'Test string',
        value: 'Test string',
      },
    );
    /** Deletes a Backup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.backups.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets details of a Backup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.backups.get(
      {
        name: 'Test string',
        view: 'Test string',
      },
    );
    /** Lists Backups in a given project and location. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.backups.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        view: 'Test string',
      },
    );
    /** Updates the settings of a Backup. */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.backups.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backupApplianceBackupProperties: {
          finalizeTime: 'Test string',
          generationId: 42,
          recoveryRangeEndTime: 'Test string',
          recoveryRangeStartTime: 'Test string',
        },
        backupApplianceLocks: [
          {
            backupApplianceLockInfo: {
              backupApplianceId: 'Test string',
              backupApplianceName: 'Test string',
              backupImage: 'Test string',
              jobName: 'Test string',
              lockReason: 'Test string',
              slaId: 'Test string',
            },
            lockUntilTime: 'Test string',
            serviceLockInfo: {
              operation: 'Test string',
            },
          },
        ],
        backupType: 'Test string',
        cloudSqlInstanceBackupProperties: {
          databaseInstalledVersion: 'Test string',
          finalBackup: true,
          instanceTier: 'Test string',
          sourceInstance: 'Test string',
        },
        computeInstanceBackupProperties: {
          canIpForward: true,
          description: 'Test string',
          disk: [
            {
              autoDelete: true,
              boot: true,
              deviceName: 'Test string',
              diskEncryptionKey: {
                kmsKeyName: 'Test string',
                kmsKeyServiceAccount: 'Test string',
                rawKey: 'Test string',
                rsaEncryptedKey: 'Test string',
              },
              diskInterface: 'Test string',
              diskSizeGb: 'Test string',
              diskType: 'Test string',
              diskTypeDeprecated: 'Test string',
              guestOsFeature: [
                {
                  type: 'Test string',
                },
              ],
              index: 'Test string',
              initializeParams: {
                diskName: 'Test string',
                replicaZones: ['Test string'],
              },
              kind: 'Test string',
              license: ['Test string'],
              mode: 'Test string',
              savedState: 'Test string',
              source: 'Test string',
              type: 'Test string',
            },
          ],
          guestAccelerator: [
            {
              acceleratorCount: 42,
              acceleratorType: 'Test string',
            },
          ],
          keyRevocationActionType: 'Test string',
          labels: {
            A: 'Test string',
          },
          machineType: 'Test string',
          metadata: {
            items: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          minCpuPlatform: 'Test string',
          networkInterface: [
            {
              accessConfigs: [
                {
                  externalIpv6: 'Test string',
                  externalIpv6PrefixLength: 42,
                  name: 'Test string',
                  natIP: 'Test string',
                  networkTier: 'Test string',
                  publicPtrDomainName: 'Test string',
                  setPublicPtr: true,
                  type: 'Test string',
                },
              ],
              aliasIpRanges: [
                {
                  ipCidrRange: 'Test string',
                  subnetworkRangeName: 'Test string',
                },
              ],
              internalIpv6PrefixLength: 42,
              ipv6AccessConfigs: [
                {
                  externalIpv6: 'Test string',
                  externalIpv6PrefixLength: 42,
                  name: 'Test string',
                  natIP: 'Test string',
                  networkTier: 'Test string',
                  publicPtrDomainName: 'Test string',
                  setPublicPtr: true,
                  type: 'Test string',
                },
              ],
              ipv6AccessType: 'Test string',
              ipv6Address: 'Test string',
              name: 'Test string',
              network: 'Test string',
              networkAttachment: 'Test string',
              networkIP: 'Test string',
              nicType: 'Test string',
              queueCount: 42,
              stackType: 'Test string',
              subnetwork: 'Test string',
            },
          ],
          scheduling: {
            automaticRestart: true,
            instanceTerminationAction: 'Test string',
            localSsdRecoveryTimeout: {
              nanos: 42,
              seconds: 'Test string',
            },
            minNodeCpus: 42,
            nodeAffinities: [
              {
                key: 'Test string',
                operator: 'Test string',
                values: ['Test string'],
              },
            ],
            onHostMaintenance: 'Test string',
            preemptible: true,
            provisioningModel: 'Test string',
          },
          serviceAccount: [
            {
              email: 'Test string',
              scopes: ['Test string'],
            },
          ],
          sourceInstance: 'Test string',
          tags: {
            items: ['Test string'],
          },
        },
        consistencyTime: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        diskBackupProperties: {
          accessMode: 'Test string',
          architecture: 'Test string',
          description: 'Test string',
          enableConfidentialCompute: true,
          guestOsFeature: [
            {
              type: 'Test string',
            },
          ],
          labels: {
            A: 'Test string',
          },
          licenses: ['Test string'],
          physicalBlockSizeBytes: 'Test string',
          provisionedIops: 'Test string',
          provisionedThroughput: 'Test string',
          region: 'Test string',
          replicaZones: ['Test string'],
          sizeGb: 'Test string',
          sourceDisk: 'Test string',
          storagePool: 'Test string',
          type: 'Test string',
          zone: 'Test string',
        },
        enforcedRetentionEndTime: 'Test string',
        etag: 'Test string',
        expireTime: 'Test string',
        gcpBackupPlanInfo: {
          backupPlan: 'Test string',
          backupPlanRevisionId: 'Test string',
          backupPlanRevisionName: 'Test string',
          backupPlanRuleId: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        resourceSizeBytes: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        serviceLocks: [
          {
            backupApplianceLockInfo: {
              backupApplianceId: 'Test string',
              backupApplianceName: 'Test string',
              backupImage: 'Test string',
              jobName: 'Test string',
              lockReason: 'Test string',
              slaId: 'Test string',
            },
            lockUntilTime: 'Test string',
            serviceLockInfo: {
              operation: 'Test string',
            },
          },
        ],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Restore from a Backup */
    await gapi.client.backupdr.projects.locations.backupVaults.dataSources.backups.restore(
      {
        name: 'Test string',
      },
      {
        computeInstanceRestoreProperties: {
          advancedMachineFeatures: {
            enableNestedVirtualization: true,
            enableUefiNetworking: true,
            threadsPerCore: 42,
            visibleCoreCount: 42,
          },
          canIpForward: true,
          confidentialInstanceConfig: {
            enableConfidentialCompute: true,
          },
          deletionProtection: true,
          description: 'Test string',
          disks: [
            {
              autoDelete: true,
              boot: true,
              deviceName: 'Test string',
              diskEncryptionKey: {
                kmsKeyName: 'Test string',
                kmsKeyServiceAccount: 'Test string',
                rawKey: 'Test string',
                rsaEncryptedKey: 'Test string',
              },
              diskInterface: 'Test string',
              diskSizeGb: 'Test string',
              diskType: 'Test string',
              diskTypeDeprecated: 'Test string',
              guestOsFeature: [
                {
                  type: 'Test string',
                },
              ],
              index: 'Test string',
              initializeParams: {
                diskName: 'Test string',
                replicaZones: ['Test string'],
              },
              kind: 'Test string',
              license: ['Test string'],
              mode: 'Test string',
              savedState: 'Test string',
              source: 'Test string',
              type: 'Test string',
            },
          ],
          displayDevice: {
            enableDisplay: true,
          },
          guestAccelerators: [
            {
              acceleratorCount: 42,
              acceleratorType: 'Test string',
            },
          ],
          hostname: 'Test string',
          instanceEncryptionKey: {
            kmsKeyName: 'Test string',
            kmsKeyServiceAccount: 'Test string',
            rawKey: 'Test string',
            rsaEncryptedKey: 'Test string',
          },
          keyRevocationActionType: 'Test string',
          labels: {
            A: 'Test string',
          },
          machineType: 'Test string',
          metadata: {
            items: [
              {
                key: 'Test string',
                value: 'Test string',
              },
            ],
          },
          minCpuPlatform: 'Test string',
          name: 'Test string',
          networkInterfaces: [
            {
              accessConfigs: [
                {
                  externalIpv6: 'Test string',
                  externalIpv6PrefixLength: 42,
                  name: 'Test string',
                  natIP: 'Test string',
                  networkTier: 'Test string',
                  publicPtrDomainName: 'Test string',
                  setPublicPtr: true,
                  type: 'Test string',
                },
              ],
              aliasIpRanges: [
                {
                  ipCidrRange: 'Test string',
                  subnetworkRangeName: 'Test string',
                },
              ],
              internalIpv6PrefixLength: 42,
              ipv6AccessConfigs: [
                {
                  externalIpv6: 'Test string',
                  externalIpv6PrefixLength: 42,
                  name: 'Test string',
                  natIP: 'Test string',
                  networkTier: 'Test string',
                  publicPtrDomainName: 'Test string',
                  setPublicPtr: true,
                  type: 'Test string',
                },
              ],
              ipv6AccessType: 'Test string',
              ipv6Address: 'Test string',
              name: 'Test string',
              network: 'Test string',
              networkAttachment: 'Test string',
              networkIP: 'Test string',
              nicType: 'Test string',
              queueCount: 42,
              stackType: 'Test string',
              subnetwork: 'Test string',
            },
          ],
          networkPerformanceConfig: {
            totalEgressBandwidthTier: 'Test string',
          },
          params: {
            resourceManagerTags: {
              A: 'Test string',
            },
          },
          privateIpv6GoogleAccess: 'Test string',
          reservationAffinity: {
            consumeReservationType: 'Test string',
            key: 'Test string',
            values: ['Test string'],
          },
          resourcePolicies: ['Test string'],
          scheduling: {
            automaticRestart: true,
            instanceTerminationAction: 'Test string',
            localSsdRecoveryTimeout: {
              nanos: 42,
              seconds: 'Test string',
            },
            minNodeCpus: 42,
            nodeAffinities: [
              {
                key: 'Test string',
                operator: 'Test string',
                values: ['Test string'],
              },
            ],
            onHostMaintenance: 'Test string',
            preemptible: true,
            provisioningModel: 'Test string',
          },
          serviceAccounts: [
            {
              email: 'Test string',
              scopes: ['Test string'],
            },
          ],
          tags: {
            items: ['Test string'],
          },
        },
        computeInstanceTargetEnvironment: {
          project: 'Test string',
          zone: 'Test string',
        },
        diskRestoreProperties: {
          accessMode: 'Test string',
          architecture: 'Test string',
          description: 'Test string',
          diskEncryptionKey: {
            kmsKeyName: 'Test string',
            kmsKeyServiceAccount: 'Test string',
            rawKey: 'Test string',
            rsaEncryptedKey: 'Test string',
          },
          enableConfidentialCompute: true,
          guestOsFeature: [
            {
              type: 'Test string',
            },
          ],
          labels: {
            A: 'Test string',
          },
          licenses: ['Test string'],
          name: 'Test string',
          physicalBlockSizeBytes: 'Test string',
          provisionedIops: 'Test string',
          provisionedThroughput: 'Test string',
          resourceManagerTags: {
            A: 'Test string',
          },
          resourcePolicy: ['Test string'],
          sizeGb: 'Test string',
          storagePool: 'Test string',
          type: 'Test string',
        },
        diskTargetEnvironment: {
          project: 'Test string',
          zone: 'Test string',
        },
        regionDiskTargetEnvironment: {
          project: 'Test string',
          region: 'Test string',
          replicaZones: ['Test string'],
        },
        requestId: 'Test string',
      },
    );
    /** Fetch DataSourceReferences for a given project, location and resource type. */
    await gapi.client.backupdr.projects.locations.dataSourceReferences.fetchForResourceType(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
        resourceType: 'Test string',
      },
    );
    /** Gets details of a single DataSourceReference. */
    await gapi.client.backupdr.projects.locations.dataSourceReferences.get({
      name: 'Test string',
    });
    /** Creates a new ManagementServer in a given project and location. */
    await gapi.client.backupdr.projects.locations.managementServers.create(
      {
        managementServerId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        baProxyUri: ['Test string'],
        createTime: 'Test string',
        description: 'Test string',
        etag: 'Test string',
        labels: {
          A: 'Test string',
        },
        managementUri: {
          api: 'Test string',
          webUi: 'Test string',
        },
        name: 'Test string',
        networks: [
          {
            network: 'Test string',
            peeringMode: 'Test string',
          },
        ],
        oauth2ClientId: 'Test string',
        satisfiesPzi: true,
        satisfiesPzs: true,
        state: 'Test string',
        type: 'Test string',
        updateTime: 'Test string',
        workforceIdentityBasedManagementUri: {
          firstPartyManagementUri: 'Test string',
          thirdPartyManagementUri: 'Test string',
        },
        workforceIdentityBasedOauth2ClientId: {
          firstPartyOauth2ClientId: 'Test string',
          thirdPartyOauth2ClientId: 'Test string',
        },
      },
    );
    /** Deletes a single ManagementServer. */
    await gapi.client.backupdr.projects.locations.managementServers.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single ManagementServer. */
    await gapi.client.backupdr.projects.locations.managementServers.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.backupdr.projects.locations.managementServers.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists ManagementServers in a given project and location. */
    await gapi.client.backupdr.projects.locations.managementServers.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Returns the Assured Workloads compliance metadata for a given project. */
    await gapi.client.backupdr.projects.locations.managementServers.msComplianceMetadata(
      {
        parent: 'Test string',
      },
      {
        projectId: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
    await gapi.client.backupdr.projects.locations.managementServers.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.backupdr.projects.locations.managementServers.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.backupdr.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.backupdr.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.backupdr.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.backupdr.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Lists ResourceBackupConfigs. */
    await gapi.client.backupdr.projects.locations.resourceBackupConfigs.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Initializes the service related config for a project. */
    await gapi.client.backupdr.projects.locations.serviceConfig.initialize(
      {
        name: 'Test string',
      },
      {
        cloudSqlInstanceInitializationConfig: {
          edition: 'Test string',
        },
        requestId: 'Test string',
        resourceType: 'Test string',
      },
    );
    /** Subscribes to a trial for a project */
    await gapi.client.backupdr.projects.locations.trial.subscribe(
      {
        parent: 'Test string',
      },
      {},
    );
  }
});
