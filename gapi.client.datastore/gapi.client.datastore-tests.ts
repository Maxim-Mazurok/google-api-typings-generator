/* This is stub file for gapi.client.datastore definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
**/
gapi.load('client', () => {
    /** now we can use gapi.client */
    gapi.client.load('datastore', 'v1', () => {
        /** now we can use gapi.client.datastore */

        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        const client_id = '<<PUT YOUR CLIENT ID HERE>>';
        const scope = [
            /** View and manage your data across Google Cloud Platform services */
            'https://www.googleapis.com/auth/cloud-platform',
            /** View and manage your Google Cloud Datastore data */
            'https://www.googleapis.com/auth/datastore',
        ];
        const immediate = false;
        gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
            if (authResult && !authResult.error) {
                /** handle successful authorization */
                run();
            } else {
                /** handle authorization error */
            }
        });
    });

    async function run() {
        /** Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted. */
        await gapi.client.datastore.projects.allocateIds({
            projectId: "Test string",
        }, {
            keys: [
                {
                    partitionId: {
                        namespaceId: "Test string",
                        projectId: "Test string",
                    },
                    path: [
                        {
                            id: "Test string",
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                }            ],
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Begins a new transaction. */
        await gapi.client.datastore.projects.beginTransaction({
            projectId: "Test string",
        }, {
            transactionOptions: {
                readOnly: {
                },
                readWrite: {
                    previousTransaction: "Test string",
                },
            },
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Commits a transaction, optionally creating, deleting or modifying some entities. */
        await gapi.client.datastore.projects.commit({
            projectId: "Test string",
        }, {
            mode: "Test string",
            mutations: [
                {
                    baseVersion: "Test string",
                    delete: {
                        partitionId: {
                            namespaceId: "Test string",
                            projectId: "Test string",
                        },
                        path: [
                            {
                                id: "Test string",
                                kind: "Test string",
                                name: "Test string",
                            }                        ],
                    },
                    insert: {
                        key: {
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                            path: [
                                {
                                    id: "Test string",
                                    kind: "Test string",
                                    name: "Test string",
                                }                            ],
                        },
                        properties: {
                            A: {
                                arrayValue: {
                                    values: undefined,
                                },
                                blobValue: "Test string",
                                booleanValue: true,
                                doubleValue: 42,
                                entityValue: undefined,
                                excludeFromIndexes: true,
                                geoPointValue: {
                                    latitude: 42,
                                    longitude: 42,
                                },
                                integerValue: "Test string",
                                keyValue: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                meaning: 42,
                                nullValue: "Test string",
                                stringValue: "Test string",
                                timestampValue: "Test string",
                            }                        },
                    },
                    update: {
                        key: {
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                            path: [
                                {
                                    id: "Test string",
                                    kind: "Test string",
                                    name: "Test string",
                                }                            ],
                        },
                        properties: {
                            A: {
                                arrayValue: {
                                    values: undefined,
                                },
                                blobValue: "Test string",
                                booleanValue: true,
                                doubleValue: 42,
                                entityValue: undefined,
                                excludeFromIndexes: true,
                                geoPointValue: {
                                    latitude: 42,
                                    longitude: 42,
                                },
                                integerValue: "Test string",
                                keyValue: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                meaning: 42,
                                nullValue: "Test string",
                                stringValue: "Test string",
                                timestampValue: "Test string",
                            }                        },
                    },
                    upsert: {
                        key: {
                            partitionId: {
                                namespaceId: "Test string",
                                projectId: "Test string",
                            },
                            path: [
                                {
                                    id: "Test string",
                                    kind: "Test string",
                                    name: "Test string",
                                }                            ],
                        },
                        properties: {
                            A: {
                                arrayValue: {
                                    values: undefined,
                                },
                                blobValue: "Test string",
                                booleanValue: true,
                                doubleValue: 42,
                                entityValue: undefined,
                                excludeFromIndexes: true,
                                geoPointValue: {
                                    latitude: 42,
                                    longitude: 42,
                                },
                                integerValue: "Test string",
                                keyValue: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                meaning: 42,
                                nullValue: "Test string",
                                stringValue: "Test string",
                                timestampValue: "Test string",
                            }                        },
                    },
                }            ],
            transaction: "Test string",
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the
         * export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the
         * associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.
         */
        await gapi.client.datastore.projects.export({
            projectId: "Test string",
        }, {
            entityFilter: {
                kinds: [
                    "Test string"                ],
                namespaceIds: [
                    "Test string"                ],
            },
            labels: {
                A: "Test string"            },
            outputUrlPrefix: "Test string",
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via
         * the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.
         */
        await gapi.client.datastore.projects.import({
            projectId: "Test string",
        }, {
            entityFilter: {
                kinds: [
                    "Test string"                ],
                namespaceIds: [
                    "Test string"                ],
            },
            inputUrl: "Test string",
            labels: {
                A: "Test string"            },
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Looks up entities by key. */
        await gapi.client.datastore.projects.lookup({
            projectId: "Test string",
        }, {
            keys: [
                {
                    partitionId: {
                        namespaceId: "Test string",
                        projectId: "Test string",
                    },
                    path: [
                        {
                            id: "Test string",
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                }            ],
            readOptions: {
                readConsistency: "Test string",
                transaction: "Test string",
            },
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore. */
        await gapi.client.datastore.projects.reserveIds({
            projectId: "Test string",
        }, {
            databaseId: "Test string",
            keys: [
                {
                    partitionId: {
                        namespaceId: "Test string",
                        projectId: "Test string",
                    },
                    path: [
                        {
                            id: "Test string",
                            kind: "Test string",
                            name: "Test string",
                        }                    ],
                }            ],
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Rolls back a transaction. */
        await gapi.client.datastore.projects.rollback({
            projectId: "Test string",
        }, {
            transaction: "Test string",
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Queries for entities. */
        await gapi.client.datastore.projects.runQuery({
            projectId: "Test string",
        }, {
            gqlQuery: {
                allowLiterals: true,
                namedBindings: {
                    A: {
                        cursor: "Test string",
                        value: {
                            arrayValue: {
                                values: undefined,
                            },
                            blobValue: "Test string",
                            booleanValue: true,
                            doubleValue: 42,
                            entityValue: {
                                key: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                properties: undefined,
                            },
                            excludeFromIndexes: true,
                            geoPointValue: {
                                latitude: 42,
                                longitude: 42,
                            },
                            integerValue: "Test string",
                            keyValue: {
                                partitionId: {
                                    namespaceId: "Test string",
                                    projectId: "Test string",
                                },
                                path: [
                                    {
                                        id: "Test string",
                                        kind: "Test string",
                                        name: "Test string",
                                    }                                ],
                            },
                            meaning: 42,
                            nullValue: "Test string",
                            stringValue: "Test string",
                            timestampValue: "Test string",
                        },
                    }                },
                positionalBindings: [
                    {
                        cursor: "Test string",
                        value: {
                            arrayValue: {
                                values: undefined,
                            },
                            blobValue: "Test string",
                            booleanValue: true,
                            doubleValue: 42,
                            entityValue: {
                                key: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                properties: undefined,
                            },
                            excludeFromIndexes: true,
                            geoPointValue: {
                                latitude: 42,
                                longitude: 42,
                            },
                            integerValue: "Test string",
                            keyValue: {
                                partitionId: {
                                    namespaceId: "Test string",
                                    projectId: "Test string",
                                },
                                path: [
                                    {
                                        id: "Test string",
                                        kind: "Test string",
                                        name: "Test string",
                                    }                                ],
                            },
                            meaning: 42,
                            nullValue: "Test string",
                            stringValue: "Test string",
                            timestampValue: "Test string",
                        },
                    }                ],
                queryString: "Test string",
            },
            partitionId: {
                namespaceId: "Test string",
                projectId: "Test string",
            },
            query: {
                distinctOn: [
                    {
                        name: "Test string",
                    }                ],
                endCursor: "Test string",
                filter: {
                    compositeFilter: {
                        filters: undefined,
                        op: "Test string",
                    },
                    propertyFilter: {
                        op: "Test string",
                        property: {
                            name: "Test string",
                        },
                        value: {
                            arrayValue: {
                                values: undefined,
                            },
                            blobValue: "Test string",
                            booleanValue: true,
                            doubleValue: 42,
                            entityValue: {
                                key: {
                                    partitionId: {
                                        namespaceId: "Test string",
                                        projectId: "Test string",
                                    },
                                    path: [
                                        {
                                            id: "Test string",
                                            kind: "Test string",
                                            name: "Test string",
                                        }                                    ],
                                },
                                properties: undefined,
                            },
                            excludeFromIndexes: true,
                            geoPointValue: {
                                latitude: 42,
                                longitude: 42,
                            },
                            integerValue: "Test string",
                            keyValue: {
                                partitionId: {
                                    namespaceId: "Test string",
                                    projectId: "Test string",
                                },
                                path: [
                                    {
                                        id: "Test string",
                                        kind: "Test string",
                                        name: "Test string",
                                    }                                ],
                            },
                            meaning: 42,
                            nullValue: "Test string",
                            stringValue: "Test string",
                            timestampValue: "Test string",
                        },
                    },
                },
                kind: [
                    {
                        name: "Test string",
                    }                ],
                limit: 42,
                offset: 42,
                order: [
                    {
                        direction: "Test string",
                        property: {
                            name: "Test string",
                        },
                    }                ],
                projection: [
                    {
                        property: {
                            name: "Test string",
                        },
                    }                ],
                startCursor: "Test string",
            },
            readOptions: {
                readConsistency: "Test string",
                transaction: "Test string",
            },
        });
        /**
         * Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index
         * already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The
         * process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be
         * created.
         */
        await gapi.client.datastore.projects.indexes.create({
            projectId: "Test string",
        }, {
            ancestor: "Test string",
            indexId: "Test string",
            kind: "Test string",
            projectId: "Test string",
            properties: [
                {
                    direction: "Test string",
                    name: "Test string",
                }            ],
            state: "Test string",
        });
        /**
         * Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on
         * completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the
         * `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.
         */
        await gapi.client.datastore.projects.indexes.delete({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Gets an index. */
        await gapi.client.datastore.projects.indexes.get({
            indexId: "Test string",
            projectId: "Test string",
        });
        /** Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results. */
        await gapi.client.datastore.projects.indexes.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            projectId: "Test string",
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.datastore.projects.operations.cancel({
            name: "Test string",
        });
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.datastore.projects.operations.delete({
            name: "Test string",
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.datastore.projects.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/âˆ—/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.datastore.projects.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
    }
});
