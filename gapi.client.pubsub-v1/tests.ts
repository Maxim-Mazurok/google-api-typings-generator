/* This is stub file for gapi.client.pubsub-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220926

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://pubsub.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.pubsub */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
        /** View and manage Pub/Sub topics and subscriptions */
        'https://www.googleapis.com/auth/pubsub',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Creates a schema. */
        await gapi.client.pubsub.projects.schemas.create({
            parent: "Test string",
            schemaId: "Test string",
        }, {
            definition: "Test string",
            name: "Test string",
            revisionCreateTime: "Test string",
            revisionId: "Test string",
            type: "Test string",
        });
        /** Deletes a schema. */
        await gapi.client.pubsub.projects.schemas.delete({
            name: "Test string",
        });
        /** Gets a schema. */
        await gapi.client.pubsub.projects.schemas.get({
            name: "Test string",
            view: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.schemas.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists schemas in a project. */
        await gapi.client.pubsub.projects.schemas.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            view: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.schemas.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.schemas.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Validates a schema. */
        await gapi.client.pubsub.projects.schemas.validate({
            parent: "Test string",
        }, {
            schema: {
                definition: "Test string",
                name: "Test string",
                revisionCreateTime: "Test string",
                revisionId: "Test string",
                type: "Test string",
            },
        });
        /** Validates a message against a schema. */
        await gapi.client.pubsub.projects.schemas.validateMessage({
            parent: "Test string",
        }, {
            encoding: "Test string",
            message: "Test string",
            name: "Test string",
            schema: {
                definition: "Test string",
                name: "Test string",
                revisionCreateTime: "Test string",
                revisionId: "Test string",
                type: "Test string",
            },
        });
        /**
         * Creates a snapshot from the requested subscription. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message
         * acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. If the snapshot already exists,
         * returns `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns `NOT_FOUND`. If the backlog in the subscription is too old -- and the resulting snapshot would expire in
         * less than 1 hour -- then `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time` field. If the name is not provided in the request, the server will assign a random name
         * for this snapshot on the same project as the subscription, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is
         * populated in the returned Snapshot object. Note that for REST API requests, you must specify a name in the request.
         */
        await gapi.client.pubsub.projects.snapshots.create({
            name: "Test string",
        }, {
            labels: {
                A: "Test string"
            },
            subscription: "Test string",
        });
        /**
         * Removes an existing snapshot. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk.
         * That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. When the snapshot is deleted, all messages retained in the
         * snapshot are immediately dropped. After a snapshot is deleted, a new one may be created with the same name, but the new one has no association with the old snapshot or its subscription,
         * unless the same subscription is specified.
         */
        await gapi.client.pubsub.projects.snapshots.delete({
            snapshot: "Test string",
        });
        /**
         * Gets the configuration details of a snapshot. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message
         * acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
         */
        await gapi.client.pubsub.projects.snapshots.get({
            snapshot: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.snapshots.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /**
         * Lists the existing snapshots. Snapshots are used in [Seek]( https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk.
         * That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
         */
        await gapi.client.pubsub.projects.snapshots.list({
            pageSize: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Updates an existing snapshot. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk.
         * That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
         */
        await gapi.client.pubsub.projects.snapshots.patch({
            name: "Test string",
        }, {
            snapshot: {
                expireTime: "Test string",
                labels: {
                    A: "Test string"
                },
                name: "Test string",
                topic: "Test string",
            },
            updateMask: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.snapshots.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.snapshots.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Acknowledges the messages associated with the `ack_ids` in the `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message
         * whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.
         */
        await gapi.client.pubsub.projects.subscriptions.acknowledge({
            subscription: "Test string",
        }, {
            ackIds: [
                "Test string"
            ],
        });
        /**
         * Creates a subscription to a given topic. See the [resource name rules] (https://cloud.google.com/pubsub/docs/admin#resource_names). If the subscription already exists, returns
         * `ALREADY_EXISTS`. If the corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the request, the server will assign a random name for this subscription
         * on the same project as the topic, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned
         * Subscription object. Note that for REST API requests, you must specify a name in the request.
         */
        await gapi.client.pubsub.projects.subscriptions.create({
            name: "Test string",
        }, {
            ackDeadlineSeconds: 42,
            bigqueryConfig: {
                dropUnknownFields: true,
                state: "Test string",
                table: "Test string",
                useTopicSchema: true,
                writeMetadata: true,
            },
            deadLetterPolicy: {
                deadLetterTopic: "Test string",
                maxDeliveryAttempts: 42,
            },
            detached: true,
            enableExactlyOnceDelivery: true,
            enableMessageOrdering: true,
            expirationPolicy: {
                ttl: "Test string",
            },
            filter: "Test string",
            labels: {
                A: "Test string"
            },
            messageRetentionDuration: "Test string",
            name: "Test string",
            pushConfig: {
                attributes: {
                    A: "Test string"
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                pushEndpoint: "Test string",
            },
            retainAckedMessages: true,
            retryPolicy: {
                maximumBackoff: "Test string",
                minimumBackoff: "Test string",
            },
            state: "Test string",
            topic: "Test string",
            topicMessageRetentionDuration: "Test string",
        });
        /**
         * Deletes an existing subscription. All messages retained in the subscription are immediately dropped. Calls to `Pull` after deletion will return `NOT_FOUND`. After a subscription is
         * deleted, a new one may be created with the same name, but the new one has no association with the old subscription or its topic unless the same topic is specified.
         */
        await gapi.client.pubsub.projects.subscriptions.delete({
            subscription: "Test string",
        });
        /**
         * Detaches a subscription from this topic. All messages retained in the subscription are dropped. Subsequent `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the
         * subscription is a push subscription, pushes to the endpoint will stop.
         */
        await gapi.client.pubsub.projects.subscriptions.detach({
            subscription: "Test string",
        });
        /** Gets the configuration details of a subscription. */
        await gapi.client.pubsub.projects.subscriptions.get({
            subscription: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.subscriptions.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists matching subscriptions. */
        await gapi.client.pubsub.projects.subscriptions.list({
            pageSize: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /**
         * Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for
         * redelivery if the processing was interrupted. Note that this does not modify the subscription-level `ackDeadlineSeconds` used for subsequent messages.
         */
        await gapi.client.pubsub.projects.subscriptions.modifyAckDeadline({
            subscription: "Test string",
        }, {
            ackDeadlineSeconds: 42,
            ackIds: [
                "Test string"
            ],
        });
        /**
         * Modifies the `PushConfig` for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty `PushConfig`) or vice versa, or change the
         * endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the `PushConfig`.
         */
        await gapi.client.pubsub.projects.subscriptions.modifyPushConfig({
            subscription: "Test string",
        }, {
            pushConfig: {
                attributes: {
                    A: "Test string"
                },
                oidcToken: {
                    audience: "Test string",
                    serviceAccountEmail: "Test string",
                },
                pushEndpoint: "Test string",
            },
        });
        /** Updates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable. */
        await gapi.client.pubsub.projects.subscriptions.patch({
            name: "Test string",
        }, {
            subscription: {
                ackDeadlineSeconds: 42,
                bigqueryConfig: {
                    dropUnknownFields: true,
                    state: "Test string",
                    table: "Test string",
                    useTopicSchema: true,
                    writeMetadata: true,
                },
                deadLetterPolicy: {
                    deadLetterTopic: "Test string",
                    maxDeliveryAttempts: 42,
                },
                detached: true,
                enableExactlyOnceDelivery: true,
                enableMessageOrdering: true,
                expirationPolicy: {
                    ttl: "Test string",
                },
                filter: "Test string",
                labels: {
                    A: "Test string"
                },
                messageRetentionDuration: "Test string",
                name: "Test string",
                pushConfig: {
                    attributes: {
                        A: "Test string"
                    },
                    oidcToken: {
                        audience: "Test string",
                        serviceAccountEmail: "Test string",
                    },
                    pushEndpoint: "Test string",
                },
                retainAckedMessages: true,
                retryPolicy: {
                    maximumBackoff: "Test string",
                    minimumBackoff: "Test string",
                },
                state: "Test string",
                topic: "Test string",
                topicMessageRetentionDuration: "Test string",
            },
            updateMask: "Test string",
        });
        /** Pulls messages from the server. */
        await gapi.client.pubsub.projects.subscriptions.pull({
            subscription: "Test string",
        }, {
            maxMessages: 42,
            returnImmediately: true,
        });
        /**
         * Seeks an existing subscription to a point in time or to a given snapshot, whichever is provided in the request. Snapshots are used in [Seek]
         * (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages
         * in an existing subscription to the state captured by a snapshot. Note that both the subscription and the snapshot must be on the same topic.
         */
        await gapi.client.pubsub.projects.subscriptions.seek({
            subscription: "Test string",
        }, {
            snapshot: "Test string",
            time: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.subscriptions.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.subscriptions.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates the given topic with the given name. See the [resource name rules] (https://cloud.google.com/pubsub/docs/admin#resource_names). */
        await gapi.client.pubsub.projects.topics.create({
            name: "Test string",
        }, {
            kmsKeyName: "Test string",
            labels: {
                A: "Test string"
            },
            messageRetentionDuration: "Test string",
            messageStoragePolicy: {
                allowedPersistenceRegions: [
                    "Test string"
                ],
            },
            name: "Test string",
            satisfiesPzs: true,
            schemaSettings: {
                encoding: "Test string",
                firstRevisionId: "Test string",
                lastRevisionId: "Test string",
                schema: "Test string",
            },
        });
        /**
         * Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new
         * topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their `topic` field is set to `_deleted-topic_`.
         */
        await gapi.client.pubsub.projects.topics.delete({
            topic: "Test string",
        });
        /** Gets the configuration of a topic. */
        await gapi.client.pubsub.projects.topics.get({
            topic: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.pubsub.projects.topics.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists matching topics. */
        await gapi.client.pubsub.projects.topics.list({
            pageSize: 42,
            pageToken: "Test string",
            project: "Test string",
        });
        /** Updates an existing topic. Note that certain properties of a topic are not modifiable. */
        await gapi.client.pubsub.projects.topics.patch({
            name: "Test string",
        }, {
            topic: {
                kmsKeyName: "Test string",
                labels: {
                    A: "Test string"
                },
                messageRetentionDuration: "Test string",
                messageStoragePolicy: {
                    allowedPersistenceRegions: [
                        "Test string"
                    ],
                },
                name: "Test string",
                satisfiesPzs: true,
                schemaSettings: {
                    encoding: "Test string",
                    firstRevisionId: "Test string",
                    lastRevisionId: "Test string",
                    schema: "Test string",
                },
            },
            updateMask: "Test string",
        });
        /** Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic does not exist. */
        await gapi.client.pubsub.projects.topics.publish({
            topic: "Test string",
        }, {
            messages: [
                {
                    attributes: {
                        A: "Test string"
                    },
                    data: "Test string",
                    messageId: "Test string",
                    orderingKey: "Test string",
                    publishTime: "Test string",
                }
            ],
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.pubsub.projects.topics.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.pubsub.projects.topics.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Lists the names of the snapshots on this topic. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message
         * acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.
         */
        await gapi.client.pubsub.projects.topics.snapshots.list({
            pageSize: 42,
            pageToken: "Test string",
            topic: "Test string",
        });
        /** Lists the names of the attached subscriptions on this topic. */
        await gapi.client.pubsub.projects.topics.subscriptions.list({
            pageSize: 42,
            pageToken: "Test string",
            topic: "Test string",
        });
    }
});
