/* This is stub file for gapi.client.secretmanager-v1beta2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240510

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://secretmanager.googleapis.com/$discovery/rest?version=v1beta2'
  );
  /** now we can use gapi.client.secretmanager */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.secretmanager.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.secretmanager.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new SecretVersion containing secret data and attaches it to an existing Secret. */
    await gapi.client.secretmanager.projects.locations.secrets.addVersion(
      {
        parent: 'Test string',
      },
      {
        payload: {
          data: 'Test string',
          dataCrc32c: 'Test string',
        },
      }
    );
    /** Creates a new Secret containing no SecretVersions. */
    await gapi.client.secretmanager.projects.locations.secrets.create(
      {
        parent: 'Test string',
        secretId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customerManagedEncryption: {
          kmsKeyName: 'Test string',
        },
        etag: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        replication: {
          automatic: {
            customerManagedEncryption: {
              kmsKeyName: 'Test string',
            },
          },
          userManaged: {
            replicas: [
              {
                customerManagedEncryption: {
                  kmsKeyName: 'Test string',
                },
                location: 'Test string',
              },
            ],
          },
        },
        rotation: {
          nextRotationTime: 'Test string',
          rotationPeriod: 'Test string',
        },
        topics: [
          {
            name: 'Test string',
          },
        ],
        ttl: 'Test string',
        versionAliases: {
          A: 'Test string',
        },
        versionDestroyTtl: 'Test string',
      }
    );
    /** Deletes a Secret. */
    await gapi.client.secretmanager.projects.locations.secrets.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets metadata for a given Secret. */
    await gapi.client.secretmanager.projects.locations.secrets.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set. */
    await gapi.client.secretmanager.projects.locations.secrets.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists Secrets. */
    await gapi.client.secretmanager.projects.locations.secrets.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates metadata of an existing Secret. */
    await gapi.client.secretmanager.projects.locations.secrets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customerManagedEncryption: {
          kmsKeyName: 'Test string',
        },
        etag: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        replication: {
          automatic: {
            customerManagedEncryption: {
              kmsKeyName: 'Test string',
            },
          },
          userManaged: {
            replicas: [
              {
                customerManagedEncryption: {
                  kmsKeyName: 'Test string',
                },
                location: 'Test string',
              },
            ],
          },
        },
        rotation: {
          nextRotationTime: 'Test string',
          rotationPeriod: 'Test string',
        },
        topics: [
          {
            name: 'Test string',
          },
        ],
        ttl: 'Test string',
        versionAliases: {
          A: 'Test string',
        },
        versionDestroyTtl: 'Test string',
      }
    );
    /** Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret. */
    await gapi.client.secretmanager.projects.locations.secrets.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.secretmanager.projects.locations.secrets.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Accesses a SecretVersion. This call returns the secret data. `projects/*‍/secrets/*‍/versions/latest` is an alias to the most recently created SecretVersion. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.access({
      name: 'Test string',
    });
    /** Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.destroy(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.disable(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.enable(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Gets metadata for a SecretVersion. `projects/*‍/secrets/*‍/versions/latest` is an alias to the most recently created SecretVersion. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.get({
      name: 'Test string',
    });
    /** Lists SecretVersions. This call does not return secret data. */
    await gapi.client.secretmanager.projects.locations.secrets.versions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates a new SecretVersion containing secret data and attaches it to an existing Secret. */
    await gapi.client.secretmanager.projects.secrets.addVersion(
      {
        parent: 'Test string',
      },
      {
        payload: {
          data: 'Test string',
          dataCrc32c: 'Test string',
        },
      }
    );
    /** Creates a new Secret containing no SecretVersions. */
    await gapi.client.secretmanager.projects.secrets.create(
      {
        parent: 'Test string',
        secretId: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customerManagedEncryption: {
          kmsKeyName: 'Test string',
        },
        etag: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        replication: {
          automatic: {
            customerManagedEncryption: {
              kmsKeyName: 'Test string',
            },
          },
          userManaged: {
            replicas: [
              {
                customerManagedEncryption: {
                  kmsKeyName: 'Test string',
                },
                location: 'Test string',
              },
            ],
          },
        },
        rotation: {
          nextRotationTime: 'Test string',
          rotationPeriod: 'Test string',
        },
        topics: [
          {
            name: 'Test string',
          },
        ],
        ttl: 'Test string',
        versionAliases: {
          A: 'Test string',
        },
        versionDestroyTtl: 'Test string',
      }
    );
    /** Deletes a Secret. */
    await gapi.client.secretmanager.projects.secrets.delete({
      etag: 'Test string',
      name: 'Test string',
    });
    /** Gets metadata for a given Secret. */
    await gapi.client.secretmanager.projects.secrets.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set. */
    await gapi.client.secretmanager.projects.secrets.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists Secrets. */
    await gapi.client.secretmanager.projects.secrets.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates metadata of an existing Secret. */
    await gapi.client.secretmanager.projects.secrets.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        annotations: {
          A: 'Test string',
        },
        createTime: 'Test string',
        customerManagedEncryption: {
          kmsKeyName: 'Test string',
        },
        etag: 'Test string',
        expireTime: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        replication: {
          automatic: {
            customerManagedEncryption: {
              kmsKeyName: 'Test string',
            },
          },
          userManaged: {
            replicas: [
              {
                customerManagedEncryption: {
                  kmsKeyName: 'Test string',
                },
                location: 'Test string',
              },
            ],
          },
        },
        rotation: {
          nextRotationTime: 'Test string',
          rotationPeriod: 'Test string',
        },
        topics: [
          {
            name: 'Test string',
          },
        ],
        ttl: 'Test string',
        versionAliases: {
          A: 'Test string',
        },
        versionDestroyTtl: 'Test string',
      }
    );
    /** Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret. */
    await gapi.client.secretmanager.projects.secrets.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      }
    );
    /** Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.secretmanager.projects.secrets.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Accesses a SecretVersion. This call returns the secret data. `projects/*‍/secrets/*‍/versions/latest` is an alias to the most recently created SecretVersion. */
    await gapi.client.secretmanager.projects.secrets.versions.access({
      name: 'Test string',
    });
    /** Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data. */
    await gapi.client.secretmanager.projects.secrets.versions.destroy(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED. */
    await gapi.client.secretmanager.projects.secrets.versions.disable(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED. */
    await gapi.client.secretmanager.projects.secrets.versions.enable(
      {
        name: 'Test string',
      },
      {
        etag: 'Test string',
      }
    );
    /** Gets metadata for a SecretVersion. `projects/*‍/secrets/*‍/versions/latest` is an alias to the most recently created SecretVersion. */
    await gapi.client.secretmanager.projects.secrets.versions.get({
      name: 'Test string',
    });
    /** Lists SecretVersions. This call does not return secret data. */
    await gapi.client.secretmanager.projects.secrets.versions.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
