/* Type definitions for non-npm package Merchant API lfp_v1 0.0 */
// Project: https://developers.google.com/merchant/api
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://merchantapi.googleapis.com/$discovery/rest?version=lfp_v1
// Revision: 20250815

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Merchant API lfp_v1 */
  function load(
    urlOrObject: 'https://merchantapi.googleapis.com/$discovery/rest?version=lfp_v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'merchantapi', version: 'lfp_v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(
    name: 'merchantapi',
    version: 'lfp_v1',
    callback: () => any,
  ): void;

  namespace merchantapi {
    interface CountrySettings {
      /** True if this merchant has enabled free local listings in MC. */
      freeLocalListingsEnabled?: boolean;
      /** Output only. The verification state of this merchant's instock serving feature. */
      instockServingVerificationState?: string;
      /** Output only. The verification state of this merchant's inventory check. */
      inventoryVerificationState?: string;
      /** True if this merchant has enabled local inventory ads in MC. */
      localInventoryAdsEnabled?: boolean;
      /** Output only. The verification state of this merchant's pickup serving feature. */
      pickupServingVerificationState?: string;
      /** Output only. The product page type selected by this merchant. */
      productPageType?: string;
      /** Required. The [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml) for the country for which these settings are defined. */
      regionCode?: string;
    }
    interface Empty {}
    interface InventoryStats {
      /** Number of entries (understanding entry as a pair of product and store) that were built based on provided inventories/sales and submitted to Google. */
      submittedEntries?: string;
      /** Number of submitted in stock entries. */
      submittedInStockEntries?: string;
      /** Number of products from provided inventories/sales that were created from matches to existing online products provided by the merchant or to the Google catalog. */
      submittedProducts?: string;
      /** Number of entries that were built based on provided inventories/sales and couldn't be submitted to Google due to errors like missing product. */
      unsubmittedEntries?: string;
    }
    interface LfpInventory {
      /** Required. Availability of the product at this store. For accepted attribute values, see the [local product inventory data specification](https://support.google.com/merchants/answer/3061342) */
      availability?: string;
      /** Optional. The time when the inventory is collected. If not set, it will be set to the time when the inventory is submitted. */
      collectionTime?: string;
      /** Required. The two-letter ISO 639-1 language code for the item. */
      contentLanguage?: string;
      /** Optional. The [feed label](https://developers.google.com/shopping-content/guides/products/feed-labels) for the product. If this is not set, it will default to `regionCode`. */
      feedLabel?: string;
      /** Optional. The Global Trade Item Number of the product. */
      gtin?: string;
      /** Output only. Identifier. The name for the `LfpInventory` resource. Format: `accounts/{account}/lfpInventories/{target_merchant}~{store_code}~{offer}` */
      name?: string;
      /** Required. Immutable. A unique identifier for the product. If both inventories and sales are submitted for a merchant, this id should match for the same product. **Note**: if the merchant sells the same product new and used, they should have different IDs. */
      offerId?: string;
      /** Optional. Supported pickup method for this offer. Unless the value is "not supported", this field must be submitted together with `pickupSla`. For accepted attribute values, see the [local product inventory data specification](https://support.google.com/merchants/answer/3061342). */
      pickupMethod?: string;
      /** Optional. Expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the [local product inventory data specification](https://support.google.com/merchants/answer/3061342). */
      pickupSla?: string;
      /** Optional. The current price of the product. */
      price?: Price;
      /** Optional. Quantity of the product available at this store. Must be greater than or equal to zero. */
      quantity?: string;
      /** Required. The [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml) for the country where the product is sold. */
      regionCode?: string;
      /** Required. The identifier of the merchant's store. Either the store code inserted through `InsertLfpStore` or the store code in the Business Profile. */
      storeCode?: string;
      /** Required. The Merchant Center ID of the merchant to submit the inventory for. */
      targetAccount?: string;
    }
    interface LfpMerchantState {
      /** Country-specific settings for the merchant. */
      countrySettings?: CountrySettings[];
      /** The inventory statistics for the merchant. The field will be absent if the merchant has no inventory submitted through LFP. */
      inventoryStats?: InventoryStats;
      /** Number of [GBPs](https://www.google.com/business/) this merchant has access to. */
      linkedGbps?: string;
      /** Identifier. The name of the `LfpMerchantState` resource. Format: `accounts/{account}/lfpMerchantStates/{target_merchant}`. For example, `accounts/123456/lfpMerchantStates/567890`. */
      name?: string;
      /** Output only. The state per store from the specified merchant. The field will be absent if the merchant has no stores submitted through LFP. */
      storeStates?: LfpStoreState[];
    }
    interface LfpSale {
      /** Required. The two-letter ISO 639-1 language code for the item. */
      contentLanguage?: string;
      /** Optional. The [feed label](https://developers.google.com/shopping-content/guides/products/feed-labels) for the product. If this is not set, it will default to `regionCode`. */
      feedLabel?: string;
      /** Required. The Global Trade Item Number of the sold product. */
      gtin?: string;
      /** Output only. Identifier. The name of the `LfpSale` resource. Format: `accounts/{account}/lfpSales/{sale}` */
      name?: string;
      /** Required. A unique identifier for the product. If both inventories and sales are submitted for a merchant, this id should match for the same product. **Note**: if the merchant sells the same product new and used, they should have different IDs. */
      offerId?: string;
      /** Required. The unit price of the product. */
      price?: Price;
      /** Required. The relative change of the available quantity. Negative for items returned. */
      quantity?: string;
      /** Required. The [CLDR territory code](https://github.com/unicode-org/cldr/blob/latest/common/main/en.xml) for the country where the product is sold. */
      regionCode?: string;
      /** Required. The timestamp for the sale. */
      saleTime?: string;
      /** Required. The identifier of the merchant's store. Either a `storeCode` inserted through the API or the code of the store in the Business Profile. */
      storeCode?: string;
      /** Required. The Merchant Center ID of the merchant to submit the sale for. */
      targetAccount?: string;
      /** Output only. System generated globally unique ID for the `LfpSale`. */
      uid?: string;
    }
    interface LfpStore {
      /** Optional. [Google My Business category id](https://support.google.com/business/answer/7249669). */
      gcidCategory?: string[];
      /** Optional. Output only. The state of matching to a Google Business Profile. See matchingStateHint for further details if no match is found. */
      matchingState?: string;
      /** Optional. Output only. The hint of why the matching has failed. This is only set when matchingState=`STORE_MATCHING_STATE_FAILED`. Possible values are: - "`linked-store-not-found`": There aren't any Google Business Profile stores available for matching. - "`store-match-not-found`": The provided `LfpStore` couldn't be matched to any of the connected Google Business Profile stores. Merchant Center account is connected correctly and stores are available on Google Business Profile, but the `LfpStore` location address does not match with Google Business Profile stores' addresses. Update the `LfpStore` address or Google Business Profile store address to match correctly. - "`store-match-unverified`": The provided `LfpStore` couldn't be matched to any of the connected Google Business Profile stores, as the matched Google Business Profile store is unverified. Go through the Google Business Profile verification process to match correctly. */
      matchingStateHint?: string;
      /** Output only. Identifier. The name of the `LfpStore` resource. Format: `accounts/{account}/lfpStores/{target_merchant}~{store_code}` */
      name?: string;
      /** Optional. The store phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. Example: `+15556767888` */
      phoneNumber?: string;
      /** Optional. The [Google Place Id](https://developers.google.com/maps/documentation/places/web-service/place-id#id-overview) of the store location. */
      placeId?: string;
      /** Required. The street address of the store. Example: 1600 Amphitheatre Pkwy, Mountain View, CA 94043, USA. */
      storeAddress?: string;
      /** Required. Immutable. A store identifier that is unique for the target merchant. */
      storeCode?: string;
      /** Optional. The merchant or store name. */
      storeName?: string;
      /** Required. The Merchant Center id of the merchant to submit the store for. */
      targetAccount?: string;
      /** Optional. The website URL for the store or merchant. */
      websiteUri?: string;
    }
    interface LfpStoreState {
      /** Output only. The store matching state. */
      matchingState?: string;
      /** The hint of why the matching has failed (only set if matching_state is FAILED). */
      matchingStateHint?: string;
      /** Required. Immutable. The identifier of this store. */
      storeCode?: string;
    }
    interface ListLfpStoresResponse {
      /** The stores from the specified merchant. */
      lfpStores?: LfpStore[];
      /** A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted, there are no subsequent pages. */
      nextPageToken?: string;
    }
    interface Price {
      /** The price represented as a number in micros (1 million micros is an equivalent to one's currency standard unit, for example, 1 USD = 1000000 micros). */
      amountMicros?: string;
      /** The currency of the price using three-letter acronyms according to [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217). */
      currencyCode?: string;
    }
    interface ProductChange {
      /** The new value of the changed resource or attribute. If empty, it means that the product was deleted. Will have one of these values : (`approved`, `pending`, `disapproved`, ``) */
      newValue?: string;
      /** The old value of the changed resource or attribute. If empty, it means that the product was created. Will have one of these values : (`approved`, `pending`, `disapproved`, ``) */
      oldValue?: string;
      /** Countries that have the change (if applicable). Represented in the ISO 3166 format. */
      regionCode?: string;
      /** Reporting contexts that have the change (if applicable). Currently this field supports only (`SHOPPING_ADS`, `LOCAL_INVENTORY_ADS`, `YOUTUBE_SHOPPING`, `YOUTUBE_CHECKOUT`, `YOUTUBE_AFFILIATE`) from the enum value [ReportingContextEnum](/merchant/api/reference/rest/Shared.Types/ReportingContextEnum) */
      reportingContext?: string;
    }
    interface ProductStatusChangeMessage {
      /** The target account that owns the entity that changed. Format : `accounts/{merchant_id}` */
      account?: string;
      /** The attribute in the resource that changed, in this case it will be always `Status`. */
      attribute?: string;
      /** A message to describe the change that happened to the product */
      changes?: ProductChange[];
      /** The time at which the event was generated. If you want to order the notification messages you receive you should rely on this field not on the order of receiving the notifications. */
      eventTime?: string;
      /** Optional. The product expiration time. This field will not be set if the notification is sent for a product deletion event. */
      expirationTime?: string;
      /** The account that manages the merchant's account. can be the same as merchant id if it is standalone account. Format : `accounts/{service_provider_id}` */
      managingAccount?: string;
      /** The product name. Format: `accounts/{account}/products/{product}` */
      resource?: string;
      /** The product id. */
      resourceId?: string;
      /** The resource that changed, in this case it will always be `Product`. */
      resourceType?: string;
    }
    interface LfpInventoriesResource {
      /** Inserts a `LfpInventory` resource for the given target merchant account. If the resource already exists, it will be replaced. The inventory automatically expires after 30 days. */
      insert(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The LFP provider account. Format: `accounts/{account}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LfpInventory;
      }): Request<LfpInventory>;
      insert(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The LFP provider account. Format: `accounts/{account}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LfpInventory,
      ): Request<LfpInventory>;
    }
    interface LfpMerchantStatesResource {
      /** Gets the LFP state of a merchant */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the state to retrieve. Format: `accounts/{account}/lfpMerchantStates/{target_merchant}`. For example, `accounts/123456/lfpMerchantStates/567890`. */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<LfpMerchantState>;
    }
    interface LfpSalesResource {
      /** Inserts a `LfpSale` for the given merchant. */
      insert(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The LFP provider account. Format: `accounts/{lfp_partner}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LfpSale;
      }): Request<LfpSale>;
      insert(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The LFP provider account. Format: `accounts/{lfp_partner}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LfpSale,
      ): Request<LfpSale>;
    }
    interface LfpStoresResource {
      /** Deletes a store for a target merchant. */
      delete(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the store to delete for the target merchant account. Format: `accounts/{account}/lfpStores/{target_merchant}~{store_code}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<{}>;
      /** Retrieves information about a store. */
      get(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The name of the store to retrieve. Format: `accounts/{account}/lfpStores/{target_merchant}~{store_code}` */
        name: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<LfpStore>;
      /** Inserts a store for the target merchant. If the store with the same store code already exists, it will be replaced. */
      insert(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Required. The LFP provider account Format: `accounts/{account}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LfpStore;
      }): Request<LfpStore>;
      insert(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Required. The LFP provider account Format: `accounts/{account}` */
          parent: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LfpStore,
      ): Request<LfpStore>;
      /** Lists the stores of the target merchant, specified by the filter in `ListLfpStoresRequest`. */
      list(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Optional. The maximum number of `LfpStore` resources for the given account to return. The service returns fewer than this value if the number of stores for the given account is less than the `pageSize`. The default value is 250. The maximum value is 1000; If a value higher than the maximum is specified, then the `pageSize` will default to the maximum. */
        pageSize?: number;
        /** Optional. A page token, received from a previous `ListLfpStoresRequest` call. Provide the page token to retrieve the subsequent page. When paginating, all other parameters provided to `ListLfpStoresRequest` must match the call that provided the page token. The token returned as nextPageToken in the response to the previous request. */
        pageToken?: string;
        /** Required. The LFP partner. Format: `accounts/{account}` */
        parent: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Required. The Merchant Center id of the merchant to list stores for. */
        targetAccount?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<ListLfpStoresResponse>;
    }
    interface AccountsResource {
      lfpInventories: LfpInventoriesResource;
      lfpMerchantStates: LfpMerchantStatesResource;
      lfpSales: LfpSalesResource;
      lfpStores: LfpStoresResource;
    }

    const accounts: AccountsResource;
  }
}
