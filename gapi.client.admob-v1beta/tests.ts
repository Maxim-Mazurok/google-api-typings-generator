/* This is stub file for gapi.client.admob-v1beta definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240425

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://admob.googleapis.com/$discovery/rest?version=v1beta'
  );
  /** now we can use gapi.client.admob */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See your AdMob data */
    'https://www.googleapis.com/auth/admob.readonly',
    /** See your AdMob data */
    'https://www.googleapis.com/auth/admob.report',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about the specified AdMob publisher account. */
    await gapi.client.admob.accounts.get({
      name: 'Test string',
    });
    /** Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672. */
    await gapi.client.admob.accounts.list({
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** List the ad sources. */
    await gapi.client.admob.accounts.adSources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** List the adapters of the ad source. */
    await gapi.client.admob.accounts.adSources.adapters.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Batch create the ad unit mappings under the specific AdMob account. The maximum allowed batch size is 100. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.adUnitMappings.batchCreate(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            adUnitMapping: {
              adapterId: 'Test string',
              adUnitConfigurations: {
                A: 'Test string',
              },
              displayName: 'Test string',
              name: 'Test string',
              state: 'Test string',
            },
            parent: 'Test string',
          },
        ],
      }
    );
    /** Creates an ad unit under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.adUnits.create(
      {
        parent: 'Test string',
      },
      {
        adFormat: 'Test string',
        adTypes: ['Test string'],
        adUnitId: 'Test string',
        appId: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        rewardSettings: {
          unitAmount: 'Test string',
          unitType: 'Test string',
        },
      }
    );
    /** List the ad units under the specified AdMob account. */
    await gapi.client.admob.accounts.adUnits.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Create an ad unit mapping under the specific AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.adUnits.adUnitMappings.create(
      {
        parent: 'Test string',
      },
      {
        adapterId: 'Test string',
        adUnitConfigurations: {
          A: 'Test string',
        },
        displayName: 'Test string',
        name: 'Test string',
        state: 'Test string',
      }
    );
    /** List ad unit mappings under the specified AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.adUnits.adUnitMappings.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates an app under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.apps.create(
      {
        parent: 'Test string',
      },
      {
        appApprovalState: 'Test string',
        appId: 'Test string',
        linkedAppInfo: {
          androidAppStores: ['Test string'],
          appStoreId: 'Test string',
          displayName: 'Test string',
        },
        manualAppInfo: {
          displayName: 'Test string',
        },
        name: 'Test string',
        platform: 'Test string',
      }
    );
    /** List the apps under the specified AdMob account. */
    await gapi.client.admob.accounts.apps.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Generates Campaign Report based on provided specifications. */
    await gapi.client.admob.accounts.campaignReport.generate(
      {
        parent: 'Test string',
      },
      {
        reportSpec: {
          dateRange: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          dimensions: ['Test string'],
          languageCode: 'Test string',
          metrics: ['Test string'],
        },
      }
    );
    /** Create a mediation group under the specific AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.mediationGroups.create(
      {
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        mediationAbExperimentState: 'Test string',
        mediationGroupId: 'Test string',
        mediationGroupLines: {
          A: {
            adSourceId: 'Test string',
            adUnitMappings: {
              A: 'Test string',
            },
            cpmMicros: 'Test string',
            cpmMode: 'Test string',
            displayName: 'Test string',
            experimentVariant: 'Test string',
            id: 'Test string',
            state: 'Test string',
          },
        },
        name: 'Test string',
        state: 'Test string',
        targeting: {
          adUnitIds: ['Test string'],
          excludedRegionCodes: ['Test string'],
          format: 'Test string',
          idfaTargeting: 'Test string',
          platform: 'Test string',
          targetedRegionCodes: ['Test string'],
        },
      }
    );
    /** List mediation groups under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.mediationGroups.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the specified mediation group under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.mediationGroups.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        mediationAbExperimentState: 'Test string',
        mediationGroupId: 'Test string',
        mediationGroupLines: {
          A: {
            adSourceId: 'Test string',
            adUnitMappings: {
              A: 'Test string',
            },
            cpmMicros: 'Test string',
            cpmMode: 'Test string',
            displayName: 'Test string',
            experimentVariant: 'Test string',
            id: 'Test string',
            state: 'Test string',
          },
        },
        name: 'Test string',
        state: 'Test string',
        targeting: {
          adUnitIds: ['Test string'],
          excludedRegionCodes: ['Test string'],
          format: 'Test string',
          idfaTargeting: 'Test string',
          platform: 'Test string',
          targetedRegionCodes: ['Test string'],
        },
      }
    );
    /** Create an A/B testing experiment for a specified AdMob account and a mediation group. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.mediationGroups.mediationAbExperiments.create(
      {
        parent: 'Test string',
      },
      {
        controlMediationLines: [
          {
            mediationGroupLine: {
              adSourceId: 'Test string',
              adUnitMappings: {
                A: 'Test string',
              },
              cpmMicros: 'Test string',
              cpmMode: 'Test string',
              displayName: 'Test string',
              experimentVariant: 'Test string',
              id: 'Test string',
              state: 'Test string',
            },
          },
        ],
        displayName: 'Test string',
        endTime: 'Test string',
        experimentId: 'Test string',
        mediationGroupId: 'Test string',
        name: 'Test string',
        startTime: 'Test string',
        state: 'Test string',
        treatmentMediationLines: [
          {
            mediationGroupLine: {
              adSourceId: 'Test string',
              adUnitMappings: {
                A: 'Test string',
              },
              cpmMicros: 'Test string',
              cpmMode: 'Test string',
              displayName: 'Test string',
              experimentVariant: 'Test string',
              id: 'Test string',
              state: 'Test string',
            },
          },
        ],
        treatmentTrafficPercentage: 'Test string',
        variantLeader: 'Test string',
      }
    );
    /** Stop the mediation A/B experiment and choose a variant. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access. */
    await gapi.client.admob.accounts.mediationGroups.mediationAbExperiments.stop(
      {
        name: 'Test string',
      },
      {
        variantChoice: 'Test string',
      }
    );
    /** Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses. */
    await gapi.client.admob.accounts.mediationReport.generate(
      {
        parent: 'Test string',
      },
      {
        reportSpec: {
          dateRange: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          dimensionFilters: [
            {
              dimension: 'Test string',
              matchesAny: {
                values: ['Test string'],
              },
            },
          ],
          dimensions: ['Test string'],
          localizationSettings: {
            currencyCode: 'Test string',
            languageCode: 'Test string',
          },
          maxReportRows: 42,
          metrics: ['Test string'],
          sortConditions: [
            {
              dimension: 'Test string',
              metric: 'Test string',
              order: 'Test string',
            },
          ],
          timeZone: 'Test string',
        },
      }
    );
    /** Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses. */
    await gapi.client.admob.accounts.networkReport.generate(
      {
        parent: 'Test string',
      },
      {
        reportSpec: {
          dateRange: {
            endDate: {
              day: 42,
              month: 42,
              year: 42,
            },
            startDate: {
              day: 42,
              month: 42,
              year: 42,
            },
          },
          dimensionFilters: [
            {
              dimension: 'Test string',
              matchesAny: {
                values: ['Test string'],
              },
            },
          ],
          dimensions: ['Test string'],
          localizationSettings: {
            currencyCode: 'Test string',
            languageCode: 'Test string',
          },
          maxReportRows: 42,
          metrics: ['Test string'],
          sortConditions: [
            {
              dimension: 'Test string',
              metric: 'Test string',
              order: 'Test string',
            },
          ],
          timeZone: 'Test string',
        },
      }
    );
  }
});
