/* Type definitions for non-npm package Container Analysis API v1alpha1 0.0 */
// Project: https://cloud.google.com/container-analysis/api/reference/rest/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1
// Revision: 20221112

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Container Analysis API v1alpha1 */
    function load(urlOrObject: "https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "containeranalysis", version: "v1alpha1"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "containeranalysis", version: "v1alpha1", callback: () => any): void;

    namespace containeranalysis {
        interface AnalysisCompleted {
            /** type of analysis that were completed on a resource. */
            analysisType?: string[];
        }
        interface Artifact {
            /** Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container. */
            checksum?: string;
            /** Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456 */
            id?: string;
            /**
             * Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as
             * presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in
             * google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.
             */
            name?: string;
            /**
             * Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as
             * presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.
             */
            names?: string[];
        }
        interface Attestation {
            pgpSignedAttestation?: PgpSignedAttestation;
        }
        interface AttestationAuthority {
            hint?: AttestationAuthorityHint;
        }
        interface AttestationAuthorityHint {
            /** The human readable name of this Attestation Authority, for example "qa". */
            humanReadableName?: string;
        }
        interface Basis {
            /** The fingerprint of the base image. */
            fingerprint?: Fingerprint;
            /** The resource_url for the resource representing the basis of associated occurrence images. */
            resourceUrl?: string;
        }
        interface Binding {
            /**
             * The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`,
             * then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which
             * resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            condition?: Expr;
            /**
             * Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on
             * the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service
             * account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific
             * Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example,
             * `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service
             * account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
             * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to
             * `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing
             * a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value
             * reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique
             * identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to
             * `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For
             * example, `google.com` or `example.com`.
             */
            members?: string[];
            /** Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. */
            role?: string;
        }
        interface BuildDetails {
            /** Deprecated. See InTotoStatement for the replacement. In-toto Provenance representation as defined in spec. */
            intotoProvenance?: InTotoProvenance;
            /**
             * In-toto Statement representation as defined in spec. The intoto_statement can contain any type of provenance. The serialized payload of the statement can be stored and signed in the
             * Occurrence's envelope.
             */
            intotoStatement?: InTotoStatement;
            /** The actual provenance */
            provenance?: BuildProvenance;
            /**
             * Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be
             * unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to
             * interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json
             * as well to prevent incompatibilities with future changes.
             */
            provenanceBytes?: string;
        }
        interface BuilderConfig {
            id?: string;
        }
        interface BuildProvenance {
            /** Version string of the builder at the time this build was executed. */
            builderVersion?: string;
            /** Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details. */
            buildOptions?: { [P in string]: string };
            /** Output of the build. */
            builtArtifacts?: Artifact[];
            /** Commands requested by the build. */
            commands?: Command[];
            /** Time at which the build was created. */
            createTime?: string;
            /**
             * E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same
             * end-user for all time.
             */
            creator?: string;
            /** Time at which execution of the build was finished. */
            finishTime?: string;
            /** Unique identifier of the build. */
            id?: string;
            /** Google Cloud Storage bucket where logs were written. */
            logsBucket?: string;
            /** ID of the project. */
            projectId?: string;
            /** Details of the Source input to the build. */
            sourceProvenance?: Source;
            /** Time at which execution of the build was started. */
            startTime?: string;
            /** Trigger identifier if the build was triggered automatically; empty if not. */
            triggerId?: string;
        }
        interface BuildSignature {
            /**
             * An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to
             * an external key (such as a reference to a key in Cloud Key Management Service).
             */
            keyId?: string;
            /** The type of the key, either stored in `public_key` or referenced in `key_id` */
            keyType?: string;
            /**
             * Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field
             * may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of
             * this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are
             * base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`
             */
            publicKey?: string;
            /** Signature of the related `BuildProvenance`, encoded in a base64 string. */
            signature?: string;
        }
        interface BuildStep {
            /**
             * Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take
             * precedence.
             */
            allowExitCodes?: number[];
            /**
             * Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still
             * have a failure status. Error information will be reported in the failure_detail field.
             */
            allowFailure?: boolean;
            /**
             * A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that
             * entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
             */
            args?: string[];
            /**
             * Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be
             * outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the
             * build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
             */
            dir?: string;
            /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
            entrypoint?: string;
            /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
            env?: string[];
            /** Output only. Return code from running the step. */
            exitCode?: number;
            /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
            id?: string;
            /**
             * Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not,
             * the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all
             * of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also
             * have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous
             * build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
             */
            name?: string;
            /** Output only. Stores timing information for pulling this build step's builder image only. */
            pullTiming?: TimeSpan;
            /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
            script?: string;
            /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
            secretEnv?: string[];
            /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
            status?: string;
            /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
            timeout?: string;
            /** Output only. Stores timing information for executing this build step. */
            timing?: TimeSpan;
            /**
             * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their
             * contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
             */
            volumes?: Volume[];
            /**
             * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty,
             * this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
             */
            waitFor?: string[];
        }
        interface BuildType {
            /** Version of the builder which produced this Note. */
            builderVersion?: string;
            /** Signature of the build in Occurrences pointing to the Note containing this `BuilderDetails`. */
            signature?: BuildSignature;
        }
        interface CisBenchmark {
            /** The profile level of this CIS benchmark check. */
            profileLevel?: number;
            /** The severity level of this CIS benchmark check. */
            severity?: string;
        }
        interface Command {
            /** Command-line arguments used when executing this Command. */
            args?: string[];
            /** Working directory (relative to project source root) used when running this Command. */
            dir?: string;
            /** Environment variables set before running this Command. */
            env?: string[];
            /** Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency. */
            id?: string;
            /** Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`. */
            name?: string;
            /** The ID(s) of the Command(s) that this Command depends on. */
            waitFor?: string[];
        }
        interface Completeness {
            /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
            arguments?: boolean;
            /** If true, the builder claims that recipe.environment is claimed to be complete. */
            environment?: boolean;
            /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
            materials?: boolean;
        }
        interface ComplianceNote {
            /** Right now we only have one compliance type, but we may add additional types in the future. */
            cisBenchmark?: CisBenchmark;
            /** A description about this compliance check. */
            description?: string;
            /** A rationale for the existence of this compliance check. */
            rationale?: string;
            /** A description of remediation steps if the compliance check fails. */
            remediation?: string;
            /** Serialized scan instructions with a predefined format. */
            scanInstructions?: string;
            /** The title that identifies this compliance check. */
            title?: string;
            /** The OS and config versions the benchmark applies to. */
            version?: ComplianceVersion[];
        }
        interface ComplianceOccurrence {
            /** The reason for non compliance of these files. */
            nonComplianceReason?: string;
            /** A list of files which are violating compliance checks. */
            nonCompliantFiles?: NonCompliantFile[];
        }
        interface ComplianceVersion {
            /** The name of the document that defines this benchmark, e.g. "CIS Container-Optimized OS". */
            benchmarkDocument?: string;
            /** The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to. */
            cpeUri?: string;
            /** The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in. */
            version?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig {
            /** Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start. */
            approvalRequired?: boolean;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult {
            /** Output only. The time when the approval decision was made. */
            approvalTime?: string;
            /** Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called. */
            approverAccount?: string;
            /** Optional. An optional comment for this manual approval result. */
            comment?: string;
            /** Required. The decision of this manual approval. */
            decision?: string;
            /**
             * Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use
             * case is a link to an external job that approved this Build.
             */
            url?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts {
            /**
             * A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed
             * images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
             */
            images?: string[];
            /**
             * A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be
             * uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
             */
            mavenArtifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact[];
            /**
             * A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the
             * specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results
             * field. If any objects fail to be pushed, the build is marked FAILURE.
             */
            objects?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects;
            /**
             * A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the
             * upload. If any objects fail to be pushed, the build is marked FAILURE.
             */
            pythonPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects {
            /**
             * Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name
             * Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this
             * location as a prefix.
             */
            location?: string;
            /** Path globs used to match files in the build's workspace. */
            paths?: string[];
            /** Output only. Stores timing information for pushing all artifact objects. */
            timing?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact {
            /** Maven `artifactId` value used when uploading the artifact to Artifact Registry. */
            artifactId?: string;
            /** Maven `groupId` value used when uploading the artifact to Artifact Registry. */
            groupId?: string;
            /**
             * Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a
             * relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
             */
            path?: string;
            /**
             * Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with
             * this location as a prefix.
             */
            repository?: string;
            /** Maven `version` value used when uploading the artifact to Artifact Registry. */
            version?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1ArtifactsPythonPackage {
            /** Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file. */
            paths?: string[];
            /**
             * Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact
             * Registry with this location as a prefix.
             */
            repository?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Build {
            /** Output only. Describes this build's approval configuration, status, and result. */
            approval?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval;
            /** Artifacts produced by the build that should be uploaded upon successful completion of all build steps. */
            artifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1Artifacts;
            /** Secrets and secret environment variables. */
            availableSecrets?: ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets;
            /** Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically. */
            buildTriggerId?: string;
            /** Output only. Time at which the request to create the build was received. */
            createTime?: string;
            /** Output only. Contains information about the build when status=FAILURE. */
            failureInfo?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo;
            /** Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution. */
            finishTime?: string;
            /** Output only. Unique identifier of the build. */
            id?: string;
            /**
             * A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed
             * images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
             */
            images?: string[];
            /**
             * Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be
             * of the format `${logs_bucket}/log-${build_id}.txt`.
             */
            logsBucket?: string;
            /** Output only. URL to logs for this build in Google Cloud Console. */
            logUrl?: string;
            /** Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service. */
            name?: string;
            /** Special options for this build. */
            options?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions;
            /** Output only. ID of the project. */
            projectId?: string;
            /**
             * TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from
             * create_time.
             */
            queueTtl?: string;
            /** Output only. Results of the build. */
            results?: ContaineranalysisGoogleDevtoolsCloudbuildV1Results;
            /**
             * Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to
             * configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
             */
            secrets?: ContaineranalysisGoogleDevtoolsCloudbuildV1Secret[];
            /**
             * IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or
             * uniqueId of the service account.
             */
            serviceAccount?: string;
            /** The location of the source files to build. */
            source?: ContaineranalysisGoogleDevtoolsCloudbuildV1Source;
            /** Output only. A permanent fixed identifier for source. */
            sourceProvenance?: ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance;
            /** Output only. Time at which execution of the build was started. */
            startTime?: string;
            /** Output only. Status of the build. */
            status?: string;
            /** Output only. Customer-readable message about the current status. */
            statusDetail?: string;
            /** Required. The operations to be performed on the workspace. */
            steps?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep[];
            /** Substitutions data for `Build` resource. */
            substitutions?: { [P in string]: string };
            /** Tags for annotation of a `Build`. These are not docker tags. */
            tags?: string[];
            /**
             * Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`.
             * `timeout` starts ticking from `startTime`. Default time is ten minutes.
             */
            timeout?: string;
            /**
             * Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images
             * and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
             */
            timing?: { [P in string]: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan };
            /** Output only. Non-fatal problems encountered during the execution of the build. */
            warnings?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildApproval {
            /** Output only. Configuration for manual approval of this build. */
            config?: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalConfig;
            /** Output only. Result of manual approval for this Build. */
            result?: ContaineranalysisGoogleDevtoolsCloudbuildV1ApprovalResult;
            /** Output only. The state of this build's approval. */
            state?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildFailureInfo {
            /** Explains the failure issue in more detail using hard-coded text. */
            detail?: string;
            /** The name of the failure. */
            type?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptions {
            /**
             * Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that
             * this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that
             * request more than the maximum are rejected with an error.
             */
            diskSizeGb?: string;
            /**
             * Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build
             * configuration file.
             */
            dynamicSubstitutions?: boolean;
            /**
             * A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will
             * use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
             */
            env?: string[];
            /** Option to specify the logging mode, which determines if and where build logs are stored. */
            logging?: string;
            /** Option to define build log streaming behavior to Google Cloud Storage. */
            logStreamingOption?: string;
            /** Compute Engine machine type on which to run the build. */
            machineType?: string;
            /**
             * Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for
             * more information.
             */
            pool?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption;
            /** Requested verifiability options. */
            requestedVerifyOption?: string;
            /**
             * A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables
             * will be available to all build steps in this build.
             */
            secretEnv?: string[];
            /** Requested hash for SourceProvenance. */
            sourceProvenanceHash?: string[];
            /**
             * Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build
             * configuration file.
             */
            substitutionOption?: string;
            /**
             * Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their
             * contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it
             * is indicative of a build request with an incorrect configuration.
             */
            volumes?: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[];
            /** This field deprecated; please use `pool.name` instead. */
            workerPool?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildOptionsPoolOption {
            /**
             * The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format
             * projects/{project}/locations/{location}/workerPools/{workerPoolId}
             */
            name?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildStep {
            /**
             * Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take
             * precedence.
             */
            allowExitCodes?: number[];
            /**
             * Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still
             * have a failure status. Error information will be reported in the failure_detail field.
             */
            allowFailure?: boolean;
            /**
             * A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that
             * entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
             */
            args?: string[];
            /**
             * Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be
             * outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the
             * build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
             */
            dir?: string;
            /** Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used. */
            entrypoint?: string;
            /** A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE". */
            env?: string[];
            /** Output only. Return code from running the step. */
            exitCode?: number;
            /** Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency. */
            id?: string;
            /**
             * Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not,
             * the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all
             * of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also
             * have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous
             * build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
             */
            name?: string;
            /** Output only. Stores timing information for pulling this build step's builder image only. */
            pullTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
            /** A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args. */
            script?: string;
            /** A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. */
            secretEnv?: string[];
            /** Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses. */
            status?: string;
            /** Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out. */
            timeout?: string;
            /** Output only. Stores timing information for executing this build step. */
            timing?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
            /**
             * List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their
             * contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
             */
            volumes?: ContaineranalysisGoogleDevtoolsCloudbuildV1Volume[];
            /**
             * The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty,
             * this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
             */
            waitFor?: string[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuildWarning {
            /** The priority for this warning. */
            priority?: string;
            /** Explanation of the warning generated. */
            text?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage {
            /** Docker Registry 2.0 digest. */
            digest?: string;
            /** Name used to push the container image to Google Container Registry, as presented to `docker push`. */
            name?: string;
            /** Output only. Stores timing information for pushing the specified image. */
            pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes {
            /** Collection of file hashes. */
            fileHash?: ContaineranalysisGoogleDevtoolsCloudbuildV1Hash[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Hash {
            /** The type of hash that was performed. */
            type?: string;
            /** The hash value. */
            value?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret {
            /**
             * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
             * Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
             */
            envMap?: { [P in string]: string };
            /** Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*‍/locations/*‍/keyRings/*‍/cryptoKeys/* */
            kmsKeyName?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource {
            /** Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
            branchName?: string;
            /** Explicit commit SHA to build. */
            commitSha?: string;
            /**
             * Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for
             * that step's execution.
             */
            dir?: string;
            /** Only trigger a build if the revision regex does NOT match the revision regex. */
            invertRegex?: boolean;
            /** ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed. */
            projectId?: string;
            /** Name of the Cloud Source Repository. */
            repoName?: string;
            /** Substitutions to use in a triggered build. Should only be used with RunBuildTrigger */
            substitutions?: { [P in string]: string };
            /** Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax */
            tagName?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Results {
            /** Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
            artifactManifest?: string;
            /** Time to push all non-container artifacts to Cloud Storage. */
            artifactTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
            /** List of build step digests, in the order corresponding to build step indices. */
            buildStepImages?: string[];
            /**
             * List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders)
             * can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.
             */
            buildStepOutputs?: string[];
            /** Container images that were built as a part of the build. */
            images?: ContaineranalysisGoogleDevtoolsCloudbuildV1BuiltImage[];
            /** Maven artifacts uploaded to Artifact Registry at the end of the build. */
            mavenArtifacts?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact[];
            /** Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage. */
            numArtifacts?: string;
            /** Python artifacts uploaded to Artifact Registry at the end of the build. */
            pythonPackages?: ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Secret {
            /** Cloud KMS key name to use to decrypt these envs. */
            kmsKeyName?: string;
            /**
             * Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
             * Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
             */
            secretEnv?: { [P in string]: string };
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret {
            /** Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. */
            env?: string;
            /** Resource name of the SecretVersion. In format: projects/*‍/secrets/*‍/versions/* */
            versionName?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Secrets {
            /** Secrets encrypted with KMS key and the associated secret environment variable. */
            inline?: ContaineranalysisGoogleDevtoolsCloudbuildV1InlineSecret[];
            /** Secrets in Secret Manager and associated secret environment variable. */
            secretManager?: ContaineranalysisGoogleDevtoolsCloudbuildV1SecretManagerSecret[];
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Source {
            /** If provided, get the source from this location in a Cloud Source Repository. */
            repoSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
            /** If provided, get the source from this location in Google Cloud Storage. */
            storageSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
            /**
             * If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description
             * [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
             */
            storageSourceManifest?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1SourceProvenance {
            /**
             * Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated
             * if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the
             * build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
             */
            fileHashes?: { [P in string]: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes };
            /** A copy of the build's `source.repo_source`, if exists, with any revisions resolved. */
            resolvedRepoSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1RepoSource;
            /** A copy of the build's `source.storage_source`, if exists, with any generations resolved. */
            resolvedStorageSource?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource;
            /** A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview. */
            resolvedStorageSourceManifest?: ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSource {
            /** Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
            generation?: string;
            /** Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build. */
            object?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1StorageSourceManifest {
            /** Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used. */
            generation?: string;
            /** Google Cloud Storage object containing the source manifest. This object must be a JSON file. */
            object?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan {
            /** End of time span. */
            endTime?: string;
            /** Start of time span. */
            startTime?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedMavenArtifact {
            /** Hash types and values of the Maven Artifact. */
            fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
            /** Output only. Stores timing information for pushing the specified artifact. */
            pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
            /** URI of the uploaded artifact. */
            uri?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1UploadedPythonPackage {
            /** Hash types and values of the Python Artifact. */
            fileHashes?: ContaineranalysisGoogleDevtoolsCloudbuildV1FileHashes;
            /** Output only. Stores timing information for pushing the specified artifact. */
            pushTiming?: ContaineranalysisGoogleDevtoolsCloudbuildV1TimeSpan;
            /** URI of the uploaded artifact. */
            uri?: string;
        }
        interface ContaineranalysisGoogleDevtoolsCloudbuildV1Volume {
            /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
            name?: string;
            /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
            path?: string;
        }
        interface CreateOperationRequest {
            /** The operation to create. */
            operation?: Operation;
            /** The ID to use for this operation. */
            operationId?: string;
        }
        interface CVSS {
            /** Defined in CVSS v3, CVSS v2 */
            attackComplexity?: string;
            /** Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2 */
            attackVector?: string;
            /** Defined in CVSS v2 */
            authentication?: string;
            /** Defined in CVSS v3, CVSS v2 */
            availabilityImpact?: string;
            /** The base score is a function of the base metric scores. */
            baseScore?: number;
            /** Defined in CVSS v3, CVSS v2 */
            confidentialityImpact?: string;
            exploitabilityScore?: number;
            impactScore?: number;
            /** Defined in CVSS v3, CVSS v2 */
            integrityImpact?: string;
            /** Defined in CVSS v3 */
            privilegesRequired?: string;
            /** Defined in CVSS v3 */
            scope?: string;
            /** Defined in CVSS v3 */
            userInteraction?: string;
        }
        interface Deployable {
            /** Resource URI for the artifact being deployed. */
            resourceUri?: string[];
        }
        interface Deployment {
            /** Address of the runtime element hosting this deployment. */
            address?: string;
            /** Configuration used to create this deployment. */
            config?: string;
            /** Beginning of the lifetime of this deployment. */
            deployTime?: string;
            /** Platform hosting this deployment. */
            platform?: string;
            /** Resource URI for the artifact being deployed taken from the deployable field with the same name. */
            resourceUri?: string[];
            /** End of the lifetime of this deployment. */
            undeployTime?: string;
            /** Identity of the user that triggered this deployment. */
            userEmail?: string;
        }
        interface Derived {
            /** Output only. This contains the base image URL for the derived image occurrence. */
            baseResourceUrl?: string;
            /** Output only. The number of layers by which this image differs from the associated image basis. */
            distance?: number;
            /** The fingerprint of the derived image. */
            fingerprint?: Fingerprint;
            /**
             * This contains layer-specific metadata, if populated it has length "distance" and is ordered with [distance] being the layer immediately following the base image and [1] being the
             * final layer.
             */
            layerInfo?: Layer[];
        }
        interface Detail {
            /**
             * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field
             * can be used as a filter in list requests.
             */
            cpeUri?: string;
            /** A vendor-specific description of this note. */
            description?: string;
            /** The fix for this specific package version. */
            fixedLocation?: VulnerabilityLocation;
            /** Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details. */
            isObsolete?: boolean;
            /** The max version of the package in which the vulnerability exists. */
            maxAffectedVersion?: Version;
            /** The min version of the package in which the vulnerability exists. */
            minAffectedVersion?: Version;
            /** The name of the package where the vulnerability was found. This field can be used as a filter in list requests. */
            package?: string;
            /** The type of package; whether native or non native(ruby gems, node.js packages etc) */
            packageType?: string;
            /** The severity (eg: distro assigned severity) for this vulnerability. */
            severityName?: string;
            /** The source from which the information in this Detail was obtained. */
            source?: string;
            /** The vendor of the product. e.g. "google" */
            vendor?: string;
        }
        interface Digest {
            /** `SHA1`, `SHA512` etc. */
            algo?: string;
            /** Value of the digest. */
            digestBytes?: string;
        }
        interface Discovered {
            /** The list of analysis that were completed for a resource. */
            analysisCompleted?: AnalysisCompleted;
            /** Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors. */
            analysisError?: Status[];
            /** The status of discovery for the resource. */
            analysisStatus?: string;
            /** When an error is encountered this will contain a LocalizedMessage under details to show to the user. The LocalizedMessage output only and populated by the API. */
            analysisStatusError?: Status;
            /** The time occurrences related to this discovery occurrence were archived. */
            archiveTime?: string;
            /** Whether the resource is continuously analyzed. */
            continuousAnalysis?: string;
            /** The CPE of the resource being scanned. */
            cpe?: string;
            /** The last time this resource was scanned. */
            lastScanTime?: string;
            /** Output only. An operation that indicates the status of the current scan. This field is deprecated, do not use. */
            operation?: Operation;
        }
        interface Discovery {
            /** The kind of analysis that is handled by this discovery. */
            analysisKind?: string;
        }
        interface Distribution {
            /** The CPU architecture for which packages in this distribution channel were built */
            architecture?: string;
            /** The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
            cpeUri?: string;
            /** The distribution channel-specific description of this package. */
            description?: string;
            /** The latest available version of this package in this distribution channel. */
            latestVersion?: Version;
            /** A freeform string denoting the maintainer of this package. */
            maintainer?: string;
            /** The distribution channel-specific homepage for this package. */
            url?: string;
        }
        interface DocumentNote {
            /** Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields ("SPDX-Metadata") */
            dataLicence?: string;
            /** Provide a reference number that can be used to understand how to parse and interpret the rest of the file */
            spdxVersion?: string;
        }
        interface DocumentOccurrence {
            /** Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard */
            createTime?: string;
            /** A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields */
            creatorComment?: string;
            /** Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name */
            creators?: string[];
            /** A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document */
            documentComment?: string;
            /** Identify any external SPDX documents referenced within this SPDX document */
            externalDocumentRefs?: string[];
            /** Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally */
            id?: string;
            /** A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created */
            licenseListVersion?: string;
            /** Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter */
            namespace?: string;
            /** Identify name of this document as designated by creator */
            title?: string;
        }
        interface DSSEAttestationNote {
            /** DSSEHint hints at the purpose of the attestation authority. */
            hint?: DSSEHint;
        }
        interface DSSEAttestationOccurrence {
            /** If doing something security critical, make sure to verify the signatures in this metadata. */
            envelope?: Envelope;
            statement?: InTotoStatement;
        }
        interface DSSEHint {
            /** Required. The human readable name of this attestation authority, for example "cloudbuild-prod". */
            humanReadableName?: string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Envelope {
            /** The bytes being signed */
            payload?: string;
            /** The type of payload being signed */
            payloadType?: string;
            /** The signatures over the payload */
            signatures?: EnvelopeSignature[];
        }
        interface EnvelopeSignature {
            /** A reference id to the key being used for signing */
            keyid?: string;
            /** The signature itself */
            sig?: string;
        }
        interface Expr {
            /** Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI. */
            description?: string;
            /** Textual representation of an expression in Common Expression Language syntax. */
            expression?: string;
            /** Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file. */
            location?: string;
            /** Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression. */
            title?: string;
        }
        interface ExternalRef {
            /**
             * An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be
             * relevant to the Package
             */
            category?: string;
            /** Human-readable information about the purpose and target of the reference */
            comment?: string;
            /** The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location */
            locator?: string;
            /** Type of category (e.g. 'npm' for the PACKAGE_MANAGER category) */
            type?: string;
        }
        interface FileHashes {
            /** Collection of file hashes. */
            fileHash?: Hash[];
        }
        interface FileLocation {
            /** For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file. */
            filePath?: string;
        }
        interface FileNote {
            /** Provide a unique identifier to match analysis information on each specific file in a package */
            checksum?: string[];
            /** This field provides information about the type of file identified */
            fileType?: string;
            /** Identify the full path and filename that corresponds to the file information in this section */
            title?: string;
        }
        interface FileOccurrence {
            /** This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts */
            attributions?: string[];
            /** This field provides a place for the SPDX file creator to record any general comments about the file */
            comment?: string;
            /** This field provides a place for the SPDX file creator to record file contributors */
            contributors?: string[];
            /** Identify the copyright holder of the file, as well as any dates present */
            copyright?: string;
            /** This field contains the license information actually found in the file, if any */
            filesLicenseInfo?: string[];
            /** Uniquely identify any element in an SPDX document which may be referenced by other elements */
            id?: string;
            /** This field contains the license the SPDX file creator has concluded as governing the file or alternative values if the governing license cannot be determined */
            licenseConcluded?: License;
            /** This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file */
            notice?: string;
        }
        interface Fingerprint {
            /** The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests. */
            v1Name?: string;
            /** The ordered list of v2 blobs that represent a given image. */
            v2Blob?: string[];
            /**
             * Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of the final blob is kept. This field
             * can be used as a filter in list requests.
             */
            v2Name?: string;
        }
        interface GetIamPolicyRequest {
            /** OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`. */
            options?: GetPolicyOptions;
        }
        interface GetPolicyOptions {
            /**
             * Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for
             * policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in
             * the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role
             * bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM
             * documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            requestedPolicyVersion?: number;
        }
        interface GetVulnzOccurrencesSummaryResponse {
            /** A map of how many occurrences were found for each severity. */
            counts?: SeverityCount[];
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1AliasContext {
            /** The alias kind. */
            kind?: string;
            /** The alias name. */
            name?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: GoogleDevtoolsContaineranalysisV1alpha1AliasContext;
            /** The ID of the repo. */
            repoId?: GoogleDevtoolsContaineranalysisV1alpha1RepoId;
            /** A revision ID. */
            revisionId?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext {
            /** An alias, which may be a branch or tag. */
            aliasContext?: GoogleDevtoolsContaineranalysisV1alpha1AliasContext;
            /** The full project name within the host. Projects may be nested, so "project/subproject" is a valid project name. The "repo name" is the hostURI/project. */
            gerritProject?: string;
            /** The URI of a running Gerrit instance. */
            hostUri?: string;
            /** A revision (commit) ID. */
            revisionId?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext {
            /** Required. Git commit hash. */
            revisionId?: string;
            /** Git repository URL. */
            url?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata {
            /** Output only. The time this operation was created. */
            createTime?: string;
            /** Output only. The time that this operation was marked completed or failed. */
            endTime?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId {
            /** The ID of the project. */
            projectId?: string;
            /** The name of the repo. Leave empty for the default repo. */
            repoName?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1RepoId {
            /** A combination of a project ID and a repo name. */
            projectRepoId?: GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId;
            /** A server-assigned, globally unique identifier. */
            uid?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder {
            /** URI indicating the builder’s identity. */
            id?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness {
            /** If true, the builder claims that invocation.environment is complete. */
            environment?: boolean;
            /** If true, the builder claims that materials is complete. */
            materials?: boolean;
            /** If true, the builder claims that invocation.parameters is complete. */
            parameters?: boolean;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource {
            /** Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri. */
            digest?: { [P in string]: string };
            /** String identifying the entry point into the build. */
            entryPoint?: string;
            /** URI indicating the identity of the source of the config. */
            uri?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation {
            /** Describes where the config file that kicked off the build came from. */
            configSource?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource;
            /** Any other builder-controlled inputs necessary for correctly evaluating the build. */
            environment?: { [P in string]: any };
            /** Collection of all external inputs that influenced the build on top of invocation.configSource. */
            parameters?: { [P in string]: any };
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial {
            /** Collection of cryptographic digests for the contents of this artifact. */
            digest?: { [P in string]: string };
            /** The method by which this artifact was referenced during the build. */
            uri?: string;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata {
            /** The timestamp of when the build completed. */
            buildFinishedOn?: string;
            /** Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. */
            buildInvocationId?: string;
            /** The timestamp of when the build started. */
            buildStartedOn?: string;
            /** Indicates that the builder claims certain fields in this message to be complete. */
            completeness?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness;
            /** If true, the builder claims that running invocation on materials will produce bit-for-bit identical output. */
            reproducible?: boolean;
        }
        interface GoogleDevtoolsContaineranalysisV1alpha1SourceContext {
            /** A SourceContext referring to a revision in a Google Cloud Source Repo. */
            cloudRepo?: GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext;
            /** A SourceContext referring to a Gerrit project. */
            gerrit?: GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext;
            /** A SourceContext referring to any third party Git repo (e.g., GitHub). */
            git?: GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext;
            /** Labels with user defined metadata. */
            labels?: { [P in string]: string };
        }
        interface Hash {
            /** The type of hash that was performed. */
            type?: string;
            /** The hash value. */
            value?: string;
        }
        interface Installation {
            /** Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages. */
            architecture?: string;
            /**
             * Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language
             * packages.
             */
            cpeUri?: string;
            /** Licenses that have been declared by the authors of the package. */
            license?: License;
            /** All of the places within the filesystem versions of this package have been found. */
            location?: Location[];
            /** Output only. The name of the installed package. */
            name?: string;
            /** Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
            packageType?: string;
            /** Output only. The version of the package. */
            version?: Version;
        }
        interface InTotoProvenance {
            /** required */
            builderConfig?: BuilderConfig;
            /**
             * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless
             * metadata.completeness.materials is true. Unset or null is equivalent to empty.
             */
            materials?: string[];
            metadata?: Metadata;
            /**
             * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit
             * identical output (if the build is reproducible). required
             */
            recipe?: Recipe;
        }
        interface InTotoStatement {
            /** Always "https://in-toto.io/Statement/v0.1". */
            _type?: string;
            /** "https://slsa.dev/provenance/v0.1" for SlsaProvenance. */
            predicateType?: string;
            /** Generic Grafeas provenance. */
            provenance?: InTotoProvenance;
            /** SLSA 0.1 provenance. */
            slsaProvenance?: SlsaProvenance;
            /** SLSA 0.2 provenance. */
            slsaProvenanceZeroTwo?: SlsaProvenanceZeroTwo;
            /** subject is the subjects of the intoto statement */
            subject?: Subject[];
        }
        interface Layer {
            /** The recovered arguments to the Dockerfile directive. */
            arguments?: string;
            /** The recovered Dockerfile directive used to construct this layer. */
            directive?: string;
        }
        interface License {
            /** Comments */
            comments?: string;
            /**
             * Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license
             * identifiers. Examples: "LGPL-2.1-only OR MIT", "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
             */
            expression?: string;
        }
        interface ListNoteOccurrencesResponse {
            /** Token to receive the next page of notes. */
            nextPageToken?: string;
            /** The occurrences attached to the specified note. */
            occurrences?: Occurrence[];
        }
        interface ListNotesResponse {
            /** The next pagination token in the list response. It should be used as page_token for the following request. An empty value means no more result. */
            nextPageToken?: string;
            /** The occurrences requested */
            notes?: Note[];
        }
        interface ListOccurrencesResponse {
            /** The next pagination token in the list response. It should be used as `page_token` for the following request. An empty value means no more results. */
            nextPageToken?: string;
            /** The occurrences requested. */
            occurrences?: Occurrence[];
        }
        interface ListScanConfigsResponse {
            /** A page token to pass in order to get more scan configs. */
            nextPageToken?: string;
            /** The set of scan configs. */
            scanConfigs?: ScanConfig[];
        }
        interface Location {
            /** Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. */
            cpeUri?: string;
            /** The path from which we gathered that this package/version is installed. */
            path?: string;
            /** Deprecated. The version installed at this location. */
            version?: Version;
        }
        interface Material {
            /** digest is a map from a hash algorithm (e.g. sha256) to the value in the material */
            digest?: { [P in string]: string };
            /** uri is the uri of the material */
            uri?: string;
        }
        interface Metadata {
            /** The timestamp of when the build completed. */
            buildFinishedOn?: string;
            /**
             * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance
             * spec.
             */
            buildInvocationId?: string;
            /** The timestamp of when the build started. */
            buildStartedOn?: string;
            /** Indicates that the builder claims certain fields in this message to be complete. */
            completeness?: Completeness;
            /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
            reproducible?: boolean;
        }
        interface NonCompliantFile {
            /** Command to display the non-compliant files. */
            displayCommand?: string;
            /**
             * display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using
             * 'path'. Empty if `display_command` is set.
             */
            path?: string;
            /** Explains why a file is non compliant for a CIS check. */
            reason?: string;
        }
        interface Note {
            /** A note describing an attestation role. */
            attestationAuthority?: AttestationAuthority;
            /** A note describing a base image. */
            baseImage?: Basis;
            /** Build provenance type for a verifiable build. */
            buildType?: BuildType;
            /** A note describing a compliance check. */
            compliance?: ComplianceNote;
            /** Output only. The time this note was created. This field can be used as a filter in list requests. */
            createTime?: string;
            /** A note describing something that can be deployed. */
            deployable?: Deployable;
            /** A note describing a provider/analysis type. */
            discovery?: Discovery;
            /** A note describing a dsse attestation note. */
            dsseAttestation?: DSSEAttestationNote;
            /** Time of expiration for this note, null if note does not expire. */
            expirationTime?: string;
            /** Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests. */
            kind?: string;
            /** A detailed description of this `Note`. */
            longDescription?: string;
            /** The name of the note in the form "projects/{provider_project_id}/notes/{NOTE_ID}" */
            name?: string;
            /** A note describing a package hosted by various package managers. */
            package?: Package;
            /** URLs associated with this note */
            relatedUrl?: RelatedUrl[];
            /** A note describing a software bill of materials. */
            sbom?: DocumentNote;
            /** A one sentence description of this `Note`. */
            shortDescription?: string;
            /** A note describing an SPDX File. */
            spdxFile?: FileNote;
            /** A note describing an SPDX Package. */
            spdxPackage?: PackageInfoNote;
            /** A note describing a relationship between SPDX elements. */
            spdxRelationship?: RelationshipNote;
            /** Output only. The time this note was last updated. This field can be used as a filter in list requests. */
            updateTime?: string;
            /** A note describing an upgrade. */
            upgrade?: UpgradeNote;
            /** A package vulnerability type of note. */
            vulnerabilityType?: VulnerabilityType;
        }
        interface Occurrence {
            /** Describes an attestation of an artifact. */
            attestation?: Attestation;
            /** Build details for a verifiable build. */
            buildDetails?: BuildDetails;
            /** Describes whether or not a resource passes compliance checks. */
            compliance?: ComplianceOccurrence;
            /** Output only. The time this `Occurrence` was created. */
            createTime?: string;
            /** Describes the deployment of an artifact on a runtime. */
            deployment?: Deployment;
            /** Describes how this resource derives from the basis in the associated note. */
            derivedImage?: Derived;
            /** Describes the initial scan status for this resource. */
            discovered?: Discovered;
            /** This represents a DSSE attestation occurrence */
            dsseAttestation?: DSSEAttestationOccurrence;
            /** https://github.com/secure-systems-lab/dsse */
            envelope?: Envelope;
            /** Describes the installation of a package on the linked resource. */
            installation?: Installation;
            /** Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests. */
            kind?: string;
            /** Output only. The name of the `Occurrence` in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
            name?: string;
            /** An analysis note associated with this image, in the form "providers/{provider_id}/notes/{NOTE_ID}" This field can be used as a filter in list requests. */
            noteName?: string;
            /** A description of actions that can be taken to remedy the `Note` */
            remediation?: string;
            /** The resource for which the `Occurrence` applies. */
            resource?: Resource;
            /**
             * The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list
             * requests.
             */
            resourceUrl?: string;
            /** Describes a specific software bill of materials document. */
            sbom?: DocumentOccurrence;
            /** Describes a specific SPDX File. */
            spdxFile?: FileOccurrence;
            /** Describes a specific SPDX Package. */
            spdxPackage?: PackageInfoOccurrence;
            /** Describes a specific relationship between SPDX elements. */
            spdxRelationship?: RelationshipOccurrence;
            /** Output only. The time this `Occurrence` was last updated. */
            updateTime?: string;
            /** Describes an upgrade. */
            upgrade?: UpgradeOccurrence;
            /** Details of a security vulnerability note. */
            vulnerabilityDetails?: VulnerabilityDetails;
        }
        interface Operation {
            /** If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available. */
            done?: boolean;
            /** The error result of the operation in case of failure or cancellation. */
            error?: Status;
            /**
             * Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such
             * metadata. Any method that returns a long-running operation should document the metadata type, if any.
             */
            metadata?: { [P in string]: any };
            /**
             * The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending
             * with `operations/{unique_id}`.
             */
            name?: string;
            /**
             * The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the
             * original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the
             * original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
             */
            response?: { [P in string]: any };
        }
        interface Package {
            /** The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages. */
            architecture?: string;
            /** The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages. */
            cpeUri?: string;
            /** The description of this package. */
            description?: string;
            /** Hash value, typically a file digest, that allows unique identification a specific package. */
            digest?: Digest[];
            /** The various channels by which a package is distributed. */
            distribution?: Distribution[];
            /** Licenses that have been declared by the authors of the package. */
            license?: License;
            /** A freeform text denoting the maintainer of this package. */
            maintainer?: string;
            /** The name of the package. */
            name?: string;
            /** The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.). */
            packageType?: string;
            /** The homepage for this package. */
            url?: string;
            /** The version of the package. */
            version?: Version;
        }
        interface PackageInfoNote {
            /** Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document */
            analyzed?: boolean;
            /** A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts */
            attribution?: string;
            /** Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file */
            checksum?: string;
            /** Identify the copyright holders of the package, as well as any dates present */
            copyright?: string;
            /** A more detailed description of the package */
            detailedDescription?: string;
            /**
             * This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file
             * was created
             */
            downloadLocation?: string;
            /** ExternalRef */
            externalRefs?: ExternalRef[];
            /**
             * Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses
             * (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found
             */
            filesLicenseInfo?: string[];
            /** Provide a place for the SPDX file creator to record a web site that serves as the package's home page */
            homePage?: string;
            /** List the licenses that have been declared by the authors of the package */
            licenseDeclared?: License;
            /**
             * If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the
             * package originally came
             */
            originator?: string;
            /** The type of package: OS, MAVEN, GO, GO_STDLIB, etc. */
            packageType?: string;
            /** A short description of the package */
            summaryDescription?: string;
            /** Identify the actual distribution source for the package/directory identified in the SPDX file */
            supplier?: string;
            /** Identify the full name of the package as given by the Package Originator */
            title?: string;
            /**
             * This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in
             * the package) that make up each package and that correlates to the data in this SPDX file
             */
            verificationCode?: string;
            /** Identify the version of the package */
            version?: string;
        }
        interface PackageInfoOccurrence {
            /** A place for the SPDX file creator to record any general comments about the package being described */
            comment?: string;
            /** Provide the actual file name of the package, or path of the directory being treated as a package */
            filename?: string;
            /** Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page */
            homePage?: string;
            /** Uniquely identify any element in an SPDX document which may be referenced by other elements */
            id?: string;
            /** package or alternative values, if the governing license cannot be determined */
            licenseConcluded?: License;
            /** Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc. */
            packageType?: string;
            /** Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package */
            sourceInfo?: string;
            /** Output only. A short description of the package */
            summaryDescription?: string;
            /** Output only. Identify the full name of the package as given by the Package Originator */
            title?: string;
            /** Output only. Identify the version of the package */
            version?: string;
        }
        interface PackageIssue {
            /** The location of the vulnerability. */
            affectedLocation?: VulnerabilityLocation;
            /**
             * Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not
             * yet assigned a severity for this vulnerability.
             */
            effectiveSeverity?: string;
            /** The location of the available fix for vulnerability. */
            fixedLocation?: VulnerabilityLocation;
            /** The type of package (e.g. OS, MAVEN, GO). */
            packageType?: string;
            severityName?: string;
        }
        interface PgpSignedAttestation {
            /**
             * Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation
             * payload is a valid instantiation of that type (for example by validating a JSON schema).
             */
            contentType?: string;
            /**
             * The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a
             * 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge "LONG", "SHORT", or other abbreviated
             * key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with
             * --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:......
             * fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.
             */
            pgpKeyId?: string;
            /**
             * The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be
             * attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather
             * than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in
             * `signature.gpg` for the `payload.json` attestation payload.
             */
            signature?: string;
        }
        interface Policy {
            /**
             * Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings`
             * must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a
             * principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another
             * 1,450 principals to the `bindings` in the `Policy`.
             */
            bindings?: Binding[];
            /**
             * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make
             * use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems
             * are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM
             * Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost.
             */
            etag?: string;
            /**
             * Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings
             * must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a
             * policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use
             * IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1`
             * policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave
             * the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
             */
            version?: number;
        }
        interface Recipe {
            /**
             * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be
             * the flags passed to make aside from the target, which is captured in recipe.entryPoint.
             */
            arguments?: Array<{ [P in string]: any }>;
            /**
             * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the
             * Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
             */
            definedInMaterial?: string;
            /**
             * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by
             * recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
             */
            entryPoint?: string;
            /** Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. */
            environment?: Array<{ [P in string]: any }>;
            /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
            type?: string;
        }
        interface RelatedUrl {
            /** Label to describe usage of the URL */
            label?: string;
            /** Specific URL to associate with the note */
            url?: string;
        }
        interface RelationshipNote {
            /** The type of relationship between the source and target SPDX elements */
            type?: string;
        }
        interface RelationshipOccurrence {
            /** A place for the SPDX file creator to record any general comments about the relationship */
            comment?: string;
            /** Also referred to as SPDXRef-A The source SPDX element (file, package, etc) */
            source?: string;
            /**
             * Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are "known unknowns", the use of the keyword NOASSERTION can be used The keywords
             * NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it
             */
            target?: string;
            /** Output only. The type of relationship between the source and target SPDX elements */
            type?: string;
        }
        interface RepoSource {
            /** Name of the branch to build. */
            branchName?: string;
            /** Explicit commit SHA to build. */
            commitSha?: string;
            /** ID of the project that owns the repo. */
            projectId?: string;
            /** Name of the repo. */
            repoName?: string;
            /** Name of the tag to build. */
            tagName?: string;
        }
        interface Resource {
            /** The hash of the resource content. E.g., the Docker digest. */
            contentHash?: Hash;
            /** The name of the resource. E.g., the name of a Docker image - "Debian". */
            name?: string;
            /** The unique URI of the resource. E.g., "https://gcr.io/project/image@sha256:foo" for a Docker image. */
            uri?: string;
        }
        interface ScanConfig {
            /** Output only. The time this scan config was created. */
            createTime?: string;
            /** Output only. A human-readable description of what the `ScanConfig` does. */
            description?: string;
            /** Indicates whether the Scan is enabled. */
            enabled?: boolean;
            /** Output only. The name of the ScanConfig in the form “projects/{project_id}/scanConfigs/{scan_config_id}". */
            name?: string;
            /** Output only. The time this scan config was last updated. */
            updateTime?: string;
        }
        interface SetIamPolicyRequest {
            /**
             * REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud
             * services (such as Projects) might reject them.
             */
            policy?: Policy;
        }
        interface SeverityCount {
            /** The number of occurrences with the severity. */
            count?: string;
            /** The severity of the occurrences. */
            severity?: string;
        }
        interface SlsaBuilder {
            /** id is the id of the slsa provenance builder */
            id?: string;
        }
        interface SlsaCompleteness {
            /** If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe. */
            arguments?: boolean;
            /** If true, the builder claims that recipe.environment is claimed to be complete. */
            environment?: boolean;
            /** If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called "hermetic". */
            materials?: boolean;
        }
        interface SlsaMetadata {
            /** The timestamp of when the build completed. */
            buildFinishedOn?: string;
            /**
             * Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance
             * spec.
             */
            buildInvocationId?: string;
            /** The timestamp of when the build started. */
            buildStartedOn?: string;
            /** Indicates that the builder claims certain fields in this message to be complete. */
            completeness?: SlsaCompleteness;
            /** If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output. */
            reproducible?: boolean;
        }
        interface SlsaProvenance {
            /** builder is the builder of this provenance */
            builder?: SlsaBuilder;
            /**
             * The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless
             * metadata.completeness.materials is true. Unset or null is equivalent to empty.
             */
            materials?: Material[];
            /** metadata is the metadata of the provenance */
            metadata?: SlsaMetadata;
            /**
             * Identifies the configuration used for the build. When combined with materials, this SHOULD fully describe the build, such that re-running this recipe results in bit-for-bit
             * identical output (if the build is reproducible).
             */
            recipe?: SlsaRecipe;
        }
        interface SlsaProvenanceZeroTwo {
            /** Lists the steps in the build. */
            buildConfig?: { [P in string]: any };
            /** Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance. */
            builder?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder;
            /** URI indicating what type of build was performed. */
            buildType?: string;
            /** Identifies the event that kicked off the build. */
            invocation?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation;
            /** The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. */
            materials?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial[];
            /** Other properties of the build. */
            metadata?: GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata;
        }
        interface SlsaRecipe {
            /**
             * Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were "make", then this might be
             * the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.
             */
            arguments?: { [P in string]: any };
            /**
             * Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were "make", then this would point to the source containing the
             * Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.
             */
            definedInMaterial?: string;
            /**
             * String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by
             * recipe.type. For example, if the recipe type were "make", then this would reference the directory in which to run make as well as which target to use.
             */
            entryPoint?: string;
            /**
             * Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on
             * the recipe Type, the structure may be different.
             */
            environment?: { [P in string]: any };
            /** URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials. */
            type?: string;
        }
        interface Source {
            /**
             * If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will
             * not include the context specified in the context field.
             */
            additionalContexts?: GoogleDevtoolsContaineranalysisV1alpha1SourceContext[];
            /** If provided, the input binary artifacts for the build came from this location. */
            artifactStorageSource?: StorageSource;
            /** If provided, the source code used for the build came from this location. */
            context?: GoogleDevtoolsContaineranalysisV1alpha1SourceContext;
            /**
             * Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source
             * and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to
             * that file.
             */
            fileHashes?: { [P in string]: FileHashes };
            /** If provided, get source from this location in a Cloud Repo. */
            repoSource?: RepoSource;
            /** If provided, get the source from this location in Google Cloud Storage. */
            storageSource?: StorageSource;
        }
        interface Status {
            /** The status code, which should be an enum value of google.rpc.Code. */
            code?: number;
            /** A list of messages that carry the error details. There is a common set of message types for APIs to use. */
            details?: Array<{ [P in string]: any }>;
            /**
             * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the
             * client.
             */
            message?: string;
        }
        interface StorageSource {
            /** Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)). */
            bucket?: string;
            /** Google Cloud Storage generation for the object. */
            generation?: string;
            /** Google Cloud Storage object containing source. */
            object?: string;
        }
        interface Subject {
            /** "": "" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet */
            digest?: { [P in string]: string };
            /** name is the name of the Subject used here */
            name?: string;
        }
        interface TestIamPermissionsRequest {
            /**
             * The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM
             * Overview](https://cloud.google.com/iam/docs/overview#permissions).
             */
            permissions?: string[];
        }
        interface TestIamPermissionsResponse {
            /** A subset of `TestPermissionsRequest.permissions` that the caller is allowed. */
            permissions?: string[];
        }
        interface TimeSpan {
            /** End of time span. */
            endTime?: string;
            /** Start of time span. */
            startTime?: string;
        }
        interface UpdateOperationRequest {
            /** The operation to create. */
            operation?: Operation;
            /** The fields to update. */
            updateMask?: string;
        }
        interface UpgradeDistribution {
            /** The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed. */
            classification?: string;
            /** Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/. */
            cpeUri?: string;
            /** The cve that would be resolved by this upgrade. */
            cve?: string[];
            /** The severity as specified by the upstream operating system. */
            severity?: string;
        }
        interface UpgradeNote {
            /** Metadata about the upgrade for each specific operating system. */
            distributions?: UpgradeDistribution[];
            /** Required - The package this Upgrade is for. */
            package?: string;
            /** Required - The version of the package in machine + human readable form. */
            version?: Version;
        }
        interface UpgradeOccurrence {
            /** Metadata about the upgrade for available for the specific operating system for the resource_url. This allows efficient filtering, as well as making it easier to use the occurrence. */
            distribution?: UpgradeDistribution;
            /** Required - The package this Upgrade is for. */
            package?: string;
            /** Required - The version of the package in a machine + human readable form. */
            parsedVersion?: Version;
        }
        interface Version {
            /** Used to correct mistakes in the version numbering scheme. */
            epoch?: number;
            /**
             * Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false
             * would say it's not
             */
            inclusive?: boolean;
            /** Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored. */
            kind?: string;
            /** The main part of the version name. */
            name?: string;
            /** The iteration of the package build from the above version. */
            revision?: string;
        }
        interface Volume {
            /** Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps. */
            name?: string;
            /** Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths. */
            path?: string;
        }
        interface VulnerabilityDetails {
            /** Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity. */
            cvssScore?: number;
            /** The CVSS v3 score of this vulnerability. */
            cvssV3?: CVSS;
            /**
             * The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability.
             * When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from
             * installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be
             * deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.
             */
            effectiveSeverity?: string;
            /** The set of affected locations and their fixes (if available) within the associated resource. */
            packageIssue?: PackageIssue[];
            /** Output only. The note provider assigned Severity of the vulnerability. */
            severity?: string;
            /**
             * The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different
             * package types.
             */
            type?: string;
        }
        interface VulnerabilityLocation {
            /**
             * The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list
             * requests.
             */
            cpeUri?: string;
            /** The file location at which this package was found. */
            fileLocation?: FileLocation[];
            /** The package being described. */
            package?: string;
            /** The version of the package being described. This field can be used as a filter in list requests. */
            version?: Version;
        }
        interface VulnerabilityType {
            /** The CVSS score for this Vulnerability. */
            cvssScore?: number;
            /** The full description of the CVSS for version 2. */
            cvssV2?: CVSS;
            /** A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html */
            cwe?: string[];
            /** All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in. */
            details?: Detail[];
            /** Note provider assigned impact of the vulnerability */
            severity?: string;
        }
        interface OccurrencesResource {
            /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNoteOccurrencesResponse>;
        }
        interface NotesResource {
            /** Creates a new `Note`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name?: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name?: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /** Deletes the given `Note` from the system. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Note`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Lists all `Notes` for a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNotesResponse>;
            /** Updates an existing `Note`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
                 * this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            occurrences: OccurrencesResource;
        }
        interface OccurrencesResource {
            /** Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "projects/{project_id}". @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id}" */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Occurrence;
            }): Request<Occurrence>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "projects/{project_id}". @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id}" */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Occurrence): Request<Occurrence>;
            /** Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence in the form of "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Occurrence`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Occurrence>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Gets the `Note` attached to the given `Occurrence`. */
            getNotes(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence in the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /** Gets a summary of the number and severity of occurrences. */
            getVulnerabilitySummary(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This contains the project Id for example: projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<GetVulnzOccurrencesSummaryResponse>;
            /** Lists active `Occurrences` for a given project matching the filters. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The kind of occurrences to filter on. */
                kind?: string;
                /** The name field contains the project Id. For example: "projects/{project_id} @Deprecated */
                name?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of occurrences to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This contains the project Id for example: projects/{project_id}. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListOccurrencesResponse>;
            /** Updates an existing occurrence. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence. Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Occurrence;
            }): Request<Occurrence>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the occurrence. Should be of the form "projects/{project_id}/occurrences/{OCCURRENCE_ID}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Occurrence): Request<Occurrence>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
                 * this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
        }
        interface OperationsResource {
            /** Creates a new `Operation`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The project Id that this operation should be created under. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: CreateOperationRequest;
            }): Request<Operation>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The project Id that this operation should be created under. */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: CreateOperationRequest): Request<Operation>;
            /** Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation. Should be of the form "projects/{provider_id}/operations/{operation_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: UpdateOperationRequest;
            }): Request<Operation>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the Operation. Should be of the form "projects/{provider_id}/operations/{operation_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: UpdateOperationRequest): Request<Operation>;
        }
        interface ScanConfigsResource {
            /** Gets a specific scan configuration for a project. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the ScanConfig in the form projects/{project_id}/scanConfigs/{scan_config_id} */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ScanConfig>;
            /** Lists scan configurations for a project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** The number of items to return. */
                pageSize?: number;
                /** The page token to use for the next request. */
                pageToken?: string;
                /** This containers the project Id i.e.: projects/{project_id} */
                parent: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListScanConfigsResponse>;
            /** Updates the scan configuration to a new value. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: ScanConfig;
            }): Request<ScanConfig>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The scan config to update of the form projects/{project_id}/scanConfigs/{scan_config_id}. */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: ScanConfig): Request<ScanConfig>;
        }
        interface ProjectsResource {
            notes: NotesResource;
            occurrences: OccurrencesResource;
            operations: OperationsResource;
            scanConfigs: ScanConfigsResource;
        }
        interface OccurrencesResource {
            /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the note name for example: "provider/{provider_id}/notes/{note_id}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNoteOccurrencesResponse>;
        }
        interface NotesResource {
            /** Creates a new `Note`. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the project. Should be of the form "providers/{provider_id}". @Deprecated */
                name: string;
                /** The ID to use for this note. */
                noteId?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** This field contains the project Id for example: "projects/{project_id} */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /** Deletes the given `Note` from the system. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<{}>;
            /** Returns the requested `Note`. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note in the form of "providers/{provider_id}/notes/{NOTE_ID}" */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<Note>;
            /**
             * Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error.
             * Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error
             * otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes
             */
            getIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: GetIamPolicyRequest): Request<Policy>;
            /** Lists all `Notes` for a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** The filter expression. */
                filter?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name field will contain the project Id for example: "providers/{provider_id} @Deprecated */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Number of notes to return in the list. */
                pageSize?: number;
                /** Token to provide to skip to a particular spot in the list. */
                pageToken?: string;
                /** This field contains the project Id for example: "projects/{PROJECT_ID}". */
                parent?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): Request<ListNotesResponse>;
            /** Updates an existing `Note`. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Note;
            }): Request<Note>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** The name of the note. Should be of the form "projects/{provider_id}/notes/{note_id}". */
                name: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** The fields to update. */
                updateMask?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Note): Request<Note>;
            /**
             * Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if
             * the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call
             * this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or
             * `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats:
             * `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes
             */
            setIamPolicy(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this
                 * field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: SetIamPolicyRequest): Request<Policy>;
            /**
             * Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the
             * containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission
             * on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and
             * `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`
             */
            testIamPermissions(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for
                 * this field.
                 */
                resource: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: TestIamPermissionsRequest): Request<TestIamPermissionsResponse>;
            occurrences: OccurrencesResource;
        }
        interface ProvidersResource {
            notes: NotesResource;
        }

        const projects: ProjectsResource;

        const providers: ProvidersResource;
    }
}
