/* This is stub file for gapi.client.containeranalysis-v1alpha1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240927

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://containeranalysis.googleapis.com/$discovery/rest?version=v1alpha1'
  );
  /** now we can use gapi.client.containeranalysis */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a new `Note`. */
    await gapi.client.containeranalysis.projects.notes.create(
      {
        name: 'Test string',
        noteId: 'Test string',
        parent: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        buildType: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        compliance: {
          cisBenchmark: {
            profileLevel: 42,
            severity: 'Test string',
          },
          description: 'Test string',
          impact: 'Test string',
          rationale: 'Test string',
          remediation: 'Test string',
          scanInstructions: 'Test string',
          title: 'Test string',
          version: [
            {
              benchmarkDocument: 'Test string',
              cpeUri: 'Test string',
              version: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        dsseAttestation: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        expirationTime: 'Test string',
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distributions: [
            {
              classification: 'Test string',
              cpeUri: 'Test string',
              cve: ['Test string'],
              severity: 'Test string',
            },
          ],
          package: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            id: 'Test string',
            identifierHelper: {
              field: 'Test string',
              genericUri: 'Test string',
            },
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
        vulnerabilityType: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
        },
      }
    );
    /** Deletes the given `Note` from the system. */
    await gapi.client.containeranalysis.projects.notes.delete({
      name: 'Test string',
    });
    /** Returns the requested `Note`. */
    await gapi.client.containeranalysis.projects.notes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes */
    await gapi.client.containeranalysis.projects.notes.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Lists all `Notes` for a given project. */
    await gapi.client.containeranalysis.projects.notes.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing `Note`. */
    await gapi.client.containeranalysis.projects.notes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        buildType: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        compliance: {
          cisBenchmark: {
            profileLevel: 42,
            severity: 'Test string',
          },
          description: 'Test string',
          impact: 'Test string',
          rationale: 'Test string',
          remediation: 'Test string',
          scanInstructions: 'Test string',
          title: 'Test string',
          version: [
            {
              benchmarkDocument: 'Test string',
              cpeUri: 'Test string',
              version: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        dsseAttestation: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        expirationTime: 'Test string',
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distributions: [
            {
              classification: 'Test string',
              cpeUri: 'Test string',
              cve: ['Test string'],
              severity: 'Test string',
            },
          ],
          package: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            id: 'Test string',
            identifierHelper: {
              field: 'Test string',
              genericUri: 'Test string',
            },
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
        vulnerabilityType: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
        },
      }
    );
    /** Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes */
    await gapi.client.containeranalysis.projects.notes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes` */
    await gapi.client.containeranalysis.projects.notes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
    await gapi.client.containeranalysis.projects.notes.occurrences.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource. */
    await gapi.client.containeranalysis.projects.occurrences.create(
      {
        name: 'Test string',
        parent: 'Test string',
      },
      {
        attestation: {
          pgpSignedAttestation: {
            contentType: 'Test string',
            pgpKeyId: 'Test string',
            signature: 'Test string',
          },
        },
        buildDetails: {
          intotoProvenance: {
            builderConfig: {
              id: 'Test string',
            },
            materials: ['Test string'],
            metadata: {
              buildFinishedOn: 'Test string',
              buildInvocationId: 'Test string',
              buildStartedOn: 'Test string',
              completeness: {
                arguments: true,
                environment: true,
                materials: true,
              },
              reproducible: true,
            },
            recipe: {
              arguments: [
                {
                  A: 42,
                },
              ],
              definedInMaterial: 'Test string',
              entryPoint: 'Test string',
              environment: [
                {
                  A: 42,
                },
              ],
              type: 'Test string',
            },
          },
          inTotoSlsaProvenanceV1: {
            _type: 'Test string',
            predicate: {
              buildDefinition: {
                buildType: 'Test string',
                externalParameters: {
                  A: 42,
                },
                internalParameters: {
                  A: 42,
                },
                resolvedDependencies: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              runDetails: {
                builder: {
                  builderDependencies: [
                    {
                      annotations: {
                        A: 42,
                      },
                      content: 'Test string',
                      digest: {
                        A: 'Test string',
                      },
                      downloadLocation: 'Test string',
                      mediaType: 'Test string',
                      name: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  id: 'Test string',
                  version: {
                    A: 'Test string',
                  },
                },
                byproducts: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
                metadata: {
                  finishedOn: 'Test string',
                  invocationId: 'Test string',
                  startedOn: 'Test string',
                },
              },
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          intotoStatement: {
            _type: 'Test string',
            predicateType: 'Test string',
            provenance: {
              builderConfig: {
                id: 'Test string',
              },
              materials: ['Test string'],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: [
                  {
                    A: 42,
                  },
                ],
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: [
                  {
                    A: 42,
                  },
                ],
                type: 'Test string',
              },
            },
            slsaProvenance: {
              builder: {
                id: 'Test string',
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: {
                  A: 42,
                },
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: {
                  A: 42,
                },
                type: 'Test string',
              },
            },
            slsaProvenanceZeroTwo: {
              buildConfig: {
                A: 42,
              },
              builder: {
                id: 'Test string',
              },
              buildType: 'Test string',
              invocation: {
                configSource: {
                  digest: {
                    A: 'Test string',
                  },
                  entryPoint: 'Test string',
                  uri: 'Test string',
                },
                environment: {
                  A: 42,
                },
                parameters: {
                  A: 42,
                },
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  environment: true,
                  materials: true,
                  parameters: true,
                },
                reproducible: true,
              },
            },
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          provenance: {
            builderVersion: 'Test string',
            buildOptions: {
              A: 'Test string',
            },
            builtArtifacts: [
              {
                checksum: 'Test string',
                id: 'Test string',
                name: 'Test string',
                names: ['Test string'],
              },
            ],
            commands: [
              {
                args: ['Test string'],
                dir: 'Test string',
                env: ['Test string'],
                id: 'Test string',
                name: 'Test string',
                waitFor: ['Test string'],
              },
            ],
            createTime: 'Test string',
            creator: 'Test string',
            finishTime: 'Test string',
            id: 'Test string',
            logsBucket: 'Test string',
            projectId: 'Test string',
            sourceProvenance: {
              additionalContexts: [
                {
                  cloudRepo: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    repoId: {
                      projectRepoId: {
                        projectId: 'Test string',
                        repoName: 'Test string',
                      },
                      uid: 'Test string',
                    },
                    revisionId: 'Test string',
                  },
                  gerrit: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    gerritProject: 'Test string',
                    hostUri: 'Test string',
                    revisionId: 'Test string',
                  },
                  git: {
                    revisionId: 'Test string',
                    url: 'Test string',
                  },
                  labels: {
                    A: 'Test string',
                  },
                },
              ],
              artifactStorageSource: {
                bucket: 'Test string',
                generation: 'Test string',
                object: 'Test string',
              },
              context: {
                cloudRepo: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  repoId: {
                    projectRepoId: {
                      projectId: 'Test string',
                      repoName: 'Test string',
                    },
                    uid: 'Test string',
                  },
                  revisionId: 'Test string',
                },
                gerrit: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  gerritProject: 'Test string',
                  hostUri: 'Test string',
                  revisionId: 'Test string',
                },
                git: {
                  revisionId: 'Test string',
                  url: 'Test string',
                },
                labels: {
                  A: 'Test string',
                },
              },
              fileHashes: {
                A: {
                  fileHash: [
                    {
                      type: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
              },
              repoSource: {
                branchName: 'Test string',
                commitSha: 'Test string',
                projectId: 'Test string',
                repoName: 'Test string',
                tagName: 'Test string',
              },
              storageSource: {
                bucket: 'Test string',
                generation: 'Test string',
                object: 'Test string',
              },
            },
            startTime: 'Test string',
            triggerId: 'Test string',
          },
          provenanceBytes: 'Test string',
        },
        compliance: {
          nonComplianceReason: 'Test string',
          nonCompliantFiles: [
            {
              displayCommand: 'Test string',
              path: 'Test string',
              reason: 'Test string',
            },
          ],
          version: {
            benchmarkDocument: 'Test string',
            cpeUri: 'Test string',
            version: 'Test string',
          },
        },
        createTime: 'Test string',
        deployment: {
          address: 'Test string',
          config: 'Test string',
          deployTime: 'Test string',
          platform: 'Test string',
          resourceUri: ['Test string'],
          undeployTime: 'Test string',
          userEmail: 'Test string',
        },
        derivedImage: {
          baseResourceUrl: 'Test string',
          distance: 42,
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          layerInfo: [
            {
              arguments: 'Test string',
              directive: 'Test string',
            },
          ],
        },
        discovered: {
          analysisCompleted: {
            analysisType: ['Test string'],
          },
          analysisError: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          analysisStatus: 'Test string',
          analysisStatusError: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          archiveTime: 'Test string',
          continuousAnalysis: 'Test string',
          cpe: 'Test string',
          lastScanTime: 'Test string',
          operation: {
            done: true,
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            metadata: {
              A: 42,
            },
            name: 'Test string',
            response: {
              A: 42,
            },
          },
          sbomStatus: {
            error: 'Test string',
            sbomState: 'Test string',
          },
          vulnerabilityAttestation: {
            error: 'Test string',
            lastAttemptTime: 'Test string',
            state: 'Test string',
          },
        },
        dsseAttestation: {
          envelope: {
            payload: 'Test string',
            payloadType: 'Test string',
            signatures: [
              {
                keyid: 'Test string',
                sig: 'Test string',
              },
            ],
          },
          statement: {
            _type: 'Test string',
            predicateType: 'Test string',
            provenance: {
              builderConfig: {
                id: 'Test string',
              },
              materials: ['Test string'],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: [
                  {
                    A: 42,
                  },
                ],
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: [
                  {
                    A: 42,
                  },
                ],
                type: 'Test string',
              },
            },
            slsaProvenance: {
              builder: {
                id: 'Test string',
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: {
                  A: 42,
                },
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: {
                  A: 42,
                },
                type: 'Test string',
              },
            },
            slsaProvenanceZeroTwo: {
              buildConfig: {
                A: 42,
              },
              builder: {
                id: 'Test string',
              },
              buildType: 'Test string',
              invocation: {
                configSource: {
                  digest: {
                    A: 'Test string',
                  },
                  entryPoint: 'Test string',
                  uri: 'Test string',
                },
                environment: {
                  A: 42,
                },
                parameters: {
                  A: 42,
                },
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  environment: true,
                  materials: true,
                  parameters: true,
                },
                reproducible: true,
              },
            },
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
        },
        envelope: {
          payload: 'Test string',
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        installation: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          location: [
            {
              cpeUri: 'Test string',
              path: 'Test string',
              version: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
            },
          ],
          name: 'Test string',
          packageType: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        kind: 'Test string',
        name: 'Test string',
        noteName: 'Test string',
        remediation: 'Test string',
        resource: {
          contentHash: {
            type: 'Test string',
            value: 'Test string',
          },
          name: 'Test string',
          uri: 'Test string',
        },
        resourceUrl: 'Test string',
        sbom: {
          createTime: 'Test string',
          creatorComment: 'Test string',
          creators: ['Test string'],
          documentComment: 'Test string',
          externalDocumentRefs: ['Test string'],
          id: 'Test string',
          licenseListVersion: 'Test string',
          namespace: 'Test string',
          title: 'Test string',
        },
        sbomReference: {
          payload: {
            _type: 'Test string',
            predicate: {
              digest: {
                A: 'Test string',
              },
              location: 'Test string',
              mimeType: 'Test string',
              referrerId: 'Test string',
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        spdxFile: {
          attributions: ['Test string'],
          comment: 'Test string',
          contributors: ['Test string'],
          copyright: 'Test string',
          filesLicenseInfo: ['Test string'],
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          notice: 'Test string',
        },
        spdxPackage: {
          comment: 'Test string',
          filename: 'Test string',
          homePage: 'Test string',
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          packageType: 'Test string',
          sourceInfo: 'Test string',
          summaryDescription: 'Test string',
          title: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          comment: 'Test string',
          source: 'Test string',
          target: 'Test string',
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distribution: {
            classification: 'Test string',
            cpeUri: 'Test string',
            cve: ['Test string'],
            severity: 'Test string',
          },
          package: 'Test string',
          parsedVersion: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityDetails: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          effectiveSeverity: 'Test string',
          extraDetails: 'Test string',
          packageIssue: [
            {
              affectedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              effectiveSeverity: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              packageType: 'Test string',
              severityName: 'Test string',
            },
          ],
          severity: 'Test string',
          type: 'Test string',
          vexAssessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            noteName: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
        },
      }
    );
    /** Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource. */
    await gapi.client.containeranalysis.projects.occurrences.delete({
      name: 'Test string',
    });
    /** Returns the requested `Occurrence`. */
    await gapi.client.containeranalysis.projects.occurrences.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes */
    await gapi.client.containeranalysis.projects.occurrences.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Gets the `Note` attached to the given `Occurrence`. */
    await gapi.client.containeranalysis.projects.occurrences.getNotes({
      name: 'Test string',
    });
    /** Gets a summary of the number and severity of occurrences. */
    await gapi.client.containeranalysis.projects.occurrences.getVulnerabilitySummary(
      {
        filter: 'Test string',
        parent: 'Test string',
      }
    );
    /** Lists active `Occurrences` for a given project matching the filters. */
    await gapi.client.containeranalysis.projects.occurrences.list({
      filter: 'Test string',
      kind: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing occurrence. */
    await gapi.client.containeranalysis.projects.occurrences.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attestation: {
          pgpSignedAttestation: {
            contentType: 'Test string',
            pgpKeyId: 'Test string',
            signature: 'Test string',
          },
        },
        buildDetails: {
          intotoProvenance: {
            builderConfig: {
              id: 'Test string',
            },
            materials: ['Test string'],
            metadata: {
              buildFinishedOn: 'Test string',
              buildInvocationId: 'Test string',
              buildStartedOn: 'Test string',
              completeness: {
                arguments: true,
                environment: true,
                materials: true,
              },
              reproducible: true,
            },
            recipe: {
              arguments: [
                {
                  A: 42,
                },
              ],
              definedInMaterial: 'Test string',
              entryPoint: 'Test string',
              environment: [
                {
                  A: 42,
                },
              ],
              type: 'Test string',
            },
          },
          inTotoSlsaProvenanceV1: {
            _type: 'Test string',
            predicate: {
              buildDefinition: {
                buildType: 'Test string',
                externalParameters: {
                  A: 42,
                },
                internalParameters: {
                  A: 42,
                },
                resolvedDependencies: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              runDetails: {
                builder: {
                  builderDependencies: [
                    {
                      annotations: {
                        A: 42,
                      },
                      content: 'Test string',
                      digest: {
                        A: 'Test string',
                      },
                      downloadLocation: 'Test string',
                      mediaType: 'Test string',
                      name: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                  id: 'Test string',
                  version: {
                    A: 'Test string',
                  },
                },
                byproducts: [
                  {
                    annotations: {
                      A: 42,
                    },
                    content: 'Test string',
                    digest: {
                      A: 'Test string',
                    },
                    downloadLocation: 'Test string',
                    mediaType: 'Test string',
                    name: 'Test string',
                    uri: 'Test string',
                  },
                ],
                metadata: {
                  finishedOn: 'Test string',
                  invocationId: 'Test string',
                  startedOn: 'Test string',
                },
              },
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          intotoStatement: {
            _type: 'Test string',
            predicateType: 'Test string',
            provenance: {
              builderConfig: {
                id: 'Test string',
              },
              materials: ['Test string'],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: [
                  {
                    A: 42,
                  },
                ],
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: [
                  {
                    A: 42,
                  },
                ],
                type: 'Test string',
              },
            },
            slsaProvenance: {
              builder: {
                id: 'Test string',
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: {
                  A: 42,
                },
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: {
                  A: 42,
                },
                type: 'Test string',
              },
            },
            slsaProvenanceZeroTwo: {
              buildConfig: {
                A: 42,
              },
              builder: {
                id: 'Test string',
              },
              buildType: 'Test string',
              invocation: {
                configSource: {
                  digest: {
                    A: 'Test string',
                  },
                  entryPoint: 'Test string',
                  uri: 'Test string',
                },
                environment: {
                  A: 42,
                },
                parameters: {
                  A: 42,
                },
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  environment: true,
                  materials: true,
                  parameters: true,
                },
                reproducible: true,
              },
            },
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          provenance: {
            builderVersion: 'Test string',
            buildOptions: {
              A: 'Test string',
            },
            builtArtifacts: [
              {
                checksum: 'Test string',
                id: 'Test string',
                name: 'Test string',
                names: ['Test string'],
              },
            ],
            commands: [
              {
                args: ['Test string'],
                dir: 'Test string',
                env: ['Test string'],
                id: 'Test string',
                name: 'Test string',
                waitFor: ['Test string'],
              },
            ],
            createTime: 'Test string',
            creator: 'Test string',
            finishTime: 'Test string',
            id: 'Test string',
            logsBucket: 'Test string',
            projectId: 'Test string',
            sourceProvenance: {
              additionalContexts: [
                {
                  cloudRepo: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    repoId: {
                      projectRepoId: {
                        projectId: 'Test string',
                        repoName: 'Test string',
                      },
                      uid: 'Test string',
                    },
                    revisionId: 'Test string',
                  },
                  gerrit: {
                    aliasContext: {
                      kind: 'Test string',
                      name: 'Test string',
                    },
                    gerritProject: 'Test string',
                    hostUri: 'Test string',
                    revisionId: 'Test string',
                  },
                  git: {
                    revisionId: 'Test string',
                    url: 'Test string',
                  },
                  labels: {
                    A: 'Test string',
                  },
                },
              ],
              artifactStorageSource: {
                bucket: 'Test string',
                generation: 'Test string',
                object: 'Test string',
              },
              context: {
                cloudRepo: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  repoId: {
                    projectRepoId: {
                      projectId: 'Test string',
                      repoName: 'Test string',
                    },
                    uid: 'Test string',
                  },
                  revisionId: 'Test string',
                },
                gerrit: {
                  aliasContext: {
                    kind: 'Test string',
                    name: 'Test string',
                  },
                  gerritProject: 'Test string',
                  hostUri: 'Test string',
                  revisionId: 'Test string',
                },
                git: {
                  revisionId: 'Test string',
                  url: 'Test string',
                },
                labels: {
                  A: 'Test string',
                },
              },
              fileHashes: {
                A: {
                  fileHash: [
                    {
                      type: 'Test string',
                      value: 'Test string',
                    },
                  ],
                },
              },
              repoSource: {
                branchName: 'Test string',
                commitSha: 'Test string',
                projectId: 'Test string',
                repoName: 'Test string',
                tagName: 'Test string',
              },
              storageSource: {
                bucket: 'Test string',
                generation: 'Test string',
                object: 'Test string',
              },
            },
            startTime: 'Test string',
            triggerId: 'Test string',
          },
          provenanceBytes: 'Test string',
        },
        compliance: {
          nonComplianceReason: 'Test string',
          nonCompliantFiles: [
            {
              displayCommand: 'Test string',
              path: 'Test string',
              reason: 'Test string',
            },
          ],
          version: {
            benchmarkDocument: 'Test string',
            cpeUri: 'Test string',
            version: 'Test string',
          },
        },
        createTime: 'Test string',
        deployment: {
          address: 'Test string',
          config: 'Test string',
          deployTime: 'Test string',
          platform: 'Test string',
          resourceUri: ['Test string'],
          undeployTime: 'Test string',
          userEmail: 'Test string',
        },
        derivedImage: {
          baseResourceUrl: 'Test string',
          distance: 42,
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          layerInfo: [
            {
              arguments: 'Test string',
              directive: 'Test string',
            },
          ],
        },
        discovered: {
          analysisCompleted: {
            analysisType: ['Test string'],
          },
          analysisError: [
            {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
          ],
          analysisStatus: 'Test string',
          analysisStatusError: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          archiveTime: 'Test string',
          continuousAnalysis: 'Test string',
          cpe: 'Test string',
          lastScanTime: 'Test string',
          operation: {
            done: true,
            error: {
              code: 42,
              details: [
                {
                  A: 42,
                },
              ],
              message: 'Test string',
            },
            metadata: {
              A: 42,
            },
            name: 'Test string',
            response: {
              A: 42,
            },
          },
          sbomStatus: {
            error: 'Test string',
            sbomState: 'Test string',
          },
          vulnerabilityAttestation: {
            error: 'Test string',
            lastAttemptTime: 'Test string',
            state: 'Test string',
          },
        },
        dsseAttestation: {
          envelope: {
            payload: 'Test string',
            payloadType: 'Test string',
            signatures: [
              {
                keyid: 'Test string',
                sig: 'Test string',
              },
            ],
          },
          statement: {
            _type: 'Test string',
            predicateType: 'Test string',
            provenance: {
              builderConfig: {
                id: 'Test string',
              },
              materials: ['Test string'],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: [
                  {
                    A: 42,
                  },
                ],
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: [
                  {
                    A: 42,
                  },
                ],
                type: 'Test string',
              },
            },
            slsaProvenance: {
              builder: {
                id: 'Test string',
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  arguments: true,
                  environment: true,
                  materials: true,
                },
                reproducible: true,
              },
              recipe: {
                arguments: {
                  A: 42,
                },
                definedInMaterial: 'Test string',
                entryPoint: 'Test string',
                environment: {
                  A: 42,
                },
                type: 'Test string',
              },
            },
            slsaProvenanceZeroTwo: {
              buildConfig: {
                A: 42,
              },
              builder: {
                id: 'Test string',
              },
              buildType: 'Test string',
              invocation: {
                configSource: {
                  digest: {
                    A: 'Test string',
                  },
                  entryPoint: 'Test string',
                  uri: 'Test string',
                },
                environment: {
                  A: 42,
                },
                parameters: {
                  A: 42,
                },
              },
              materials: [
                {
                  digest: {
                    A: 'Test string',
                  },
                  uri: 'Test string',
                },
              ],
              metadata: {
                buildFinishedOn: 'Test string',
                buildInvocationId: 'Test string',
                buildStartedOn: 'Test string',
                completeness: {
                  environment: true,
                  materials: true,
                  parameters: true,
                },
                reproducible: true,
              },
            },
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
        },
        envelope: {
          payload: 'Test string',
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        installation: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          location: [
            {
              cpeUri: 'Test string',
              path: 'Test string',
              version: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
            },
          ],
          name: 'Test string',
          packageType: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        kind: 'Test string',
        name: 'Test string',
        noteName: 'Test string',
        remediation: 'Test string',
        resource: {
          contentHash: {
            type: 'Test string',
            value: 'Test string',
          },
          name: 'Test string',
          uri: 'Test string',
        },
        resourceUrl: 'Test string',
        sbom: {
          createTime: 'Test string',
          creatorComment: 'Test string',
          creators: ['Test string'],
          documentComment: 'Test string',
          externalDocumentRefs: ['Test string'],
          id: 'Test string',
          licenseListVersion: 'Test string',
          namespace: 'Test string',
          title: 'Test string',
        },
        sbomReference: {
          payload: {
            _type: 'Test string',
            predicate: {
              digest: {
                A: 'Test string',
              },
              location: 'Test string',
              mimeType: 'Test string',
              referrerId: 'Test string',
            },
            predicateType: 'Test string',
            subject: [
              {
                digest: {
                  A: 'Test string',
                },
                name: 'Test string',
              },
            ],
          },
          payloadType: 'Test string',
          signatures: [
            {
              keyid: 'Test string',
              sig: 'Test string',
            },
          ],
        },
        spdxFile: {
          attributions: ['Test string'],
          comment: 'Test string',
          contributors: ['Test string'],
          copyright: 'Test string',
          filesLicenseInfo: ['Test string'],
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          notice: 'Test string',
        },
        spdxPackage: {
          comment: 'Test string',
          filename: 'Test string',
          homePage: 'Test string',
          id: 'Test string',
          licenseConcluded: {
            comments: 'Test string',
            expression: 'Test string',
          },
          packageType: 'Test string',
          sourceInfo: 'Test string',
          summaryDescription: 'Test string',
          title: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          comment: 'Test string',
          source: 'Test string',
          target: 'Test string',
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distribution: {
            classification: 'Test string',
            cpeUri: 'Test string',
            cve: ['Test string'],
            severity: 'Test string',
          },
          package: 'Test string',
          parsedVersion: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityDetails: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssV3: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          effectiveSeverity: 'Test string',
          extraDetails: 'Test string',
          packageIssue: [
            {
              affectedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              effectiveSeverity: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              packageType: 'Test string',
              severityName: 'Test string',
            },
          ],
          severity: 'Test string',
          type: 'Test string',
          vexAssessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            noteName: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
        },
      }
    );
    /** Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes */
    await gapi.client.containeranalysis.projects.occurrences.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes` */
    await gapi.client.containeranalysis.projects.occurrences.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Creates a new `Operation`. */
    await gapi.client.containeranalysis.projects.operations.create(
      {
        parent: 'Test string',
      },
      {
        operation: {
          done: true,
          error: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          metadata: {
            A: 42,
          },
          name: 'Test string',
          response: {
            A: 42,
          },
        },
        operationId: 'Test string',
      }
    );
    /** Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result. */
    await gapi.client.containeranalysis.projects.operations.patch(
      {
        name: 'Test string',
      },
      {
        operation: {
          done: true,
          error: {
            code: 42,
            details: [
              {
                A: 42,
              },
            ],
            message: 'Test string',
          },
          metadata: {
            A: 42,
          },
          name: 'Test string',
          response: {
            A: 42,
          },
        },
        updateMask: 'Test string',
      }
    );
    /** Gets a specific scan configuration for a project. */
    await gapi.client.containeranalysis.projects.scanConfigs.get({
      name: 'Test string',
    });
    /** Lists scan configurations for a project. */
    await gapi.client.containeranalysis.projects.scanConfigs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the scan configuration to a new value. */
    await gapi.client.containeranalysis.projects.scanConfigs.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        enabled: true,
        name: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a new `Note`. */
    await gapi.client.containeranalysis.providers.notes.create(
      {
        name: 'Test string',
        noteId: 'Test string',
        parent: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        buildType: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        compliance: {
          cisBenchmark: {
            profileLevel: 42,
            severity: 'Test string',
          },
          description: 'Test string',
          impact: 'Test string',
          rationale: 'Test string',
          remediation: 'Test string',
          scanInstructions: 'Test string',
          title: 'Test string',
          version: [
            {
              benchmarkDocument: 'Test string',
              cpeUri: 'Test string',
              version: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        dsseAttestation: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        expirationTime: 'Test string',
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distributions: [
            {
              classification: 'Test string',
              cpeUri: 'Test string',
              cve: ['Test string'],
              severity: 'Test string',
            },
          ],
          package: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            id: 'Test string',
            identifierHelper: {
              field: 'Test string',
              genericUri: 'Test string',
            },
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
        vulnerabilityType: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
        },
      }
    );
    /** Deletes the given `Note` from the system. */
    await gapi.client.containeranalysis.providers.notes.delete({
      name: 'Test string',
    });
    /** Returns the requested `Note`. */
    await gapi.client.containeranalysis.providers.notes.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes */
    await gapi.client.containeranalysis.providers.notes.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      }
    );
    /** Lists all `Notes` for a given project. */
    await gapi.client.containeranalysis.providers.notes.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates an existing `Note`. */
    await gapi.client.containeranalysis.providers.notes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        attestationAuthority: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        baseImage: {
          fingerprint: {
            v1Name: 'Test string',
            v2Blob: ['Test string'],
            v2Name: 'Test string',
          },
          resourceUrl: 'Test string',
        },
        buildType: {
          builderVersion: 'Test string',
          signature: {
            keyId: 'Test string',
            keyType: 'Test string',
            publicKey: 'Test string',
            signature: 'Test string',
          },
        },
        compliance: {
          cisBenchmark: {
            profileLevel: 42,
            severity: 'Test string',
          },
          description: 'Test string',
          impact: 'Test string',
          rationale: 'Test string',
          remediation: 'Test string',
          scanInstructions: 'Test string',
          title: 'Test string',
          version: [
            {
              benchmarkDocument: 'Test string',
              cpeUri: 'Test string',
              version: 'Test string',
            },
          ],
        },
        createTime: 'Test string',
        deployable: {
          resourceUri: ['Test string'],
        },
        discovery: {
          analysisKind: 'Test string',
        },
        dsseAttestation: {
          hint: {
            humanReadableName: 'Test string',
          },
        },
        expirationTime: 'Test string',
        kind: 'Test string',
        longDescription: 'Test string',
        name: 'Test string',
        package: {
          architecture: 'Test string',
          cpeUri: 'Test string',
          description: 'Test string',
          digest: [
            {
              algo: 'Test string',
              digestBytes: 'Test string',
            },
          ],
          distribution: [
            {
              architecture: 'Test string',
              cpeUri: 'Test string',
              description: 'Test string',
              latestVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              maintainer: 'Test string',
              url: 'Test string',
            },
          ],
          license: {
            comments: 'Test string',
            expression: 'Test string',
          },
          maintainer: 'Test string',
          name: 'Test string',
          packageType: 'Test string',
          url: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        relatedUrl: [
          {
            label: 'Test string',
            url: 'Test string',
          },
        ],
        sbom: {
          dataLicence: 'Test string',
          spdxVersion: 'Test string',
        },
        sbomReference: {
          format: 'Test string',
          version: 'Test string',
        },
        shortDescription: 'Test string',
        spdxFile: {
          checksum: ['Test string'],
          fileType: 'Test string',
          title: 'Test string',
        },
        spdxPackage: {
          analyzed: true,
          attribution: 'Test string',
          checksum: 'Test string',
          copyright: 'Test string',
          detailedDescription: 'Test string',
          downloadLocation: 'Test string',
          externalRefs: [
            {
              category: 'Test string',
              comment: 'Test string',
              locator: 'Test string',
              type: 'Test string',
            },
          ],
          filesLicenseInfo: ['Test string'],
          homePage: 'Test string',
          licenseDeclared: {
            comments: 'Test string',
            expression: 'Test string',
          },
          originator: 'Test string',
          packageType: 'Test string',
          summaryDescription: 'Test string',
          supplier: 'Test string',
          title: 'Test string',
          verificationCode: 'Test string',
          version: 'Test string',
        },
        spdxRelationship: {
          type: 'Test string',
        },
        updateTime: 'Test string',
        upgrade: {
          distributions: [
            {
              classification: 'Test string',
              cpeUri: 'Test string',
              cve: ['Test string'],
              severity: 'Test string',
            },
          ],
          package: 'Test string',
          version: {
            epoch: 42,
            inclusive: true,
            kind: 'Test string',
            name: 'Test string',
            revision: 'Test string',
          },
        },
        vulnerabilityAssessment: {
          assessment: {
            cve: 'Test string',
            impacts: ['Test string'],
            justification: {
              details: 'Test string',
              justificationType: 'Test string',
            },
            longDescription: 'Test string',
            relatedUris: [
              {
                label: 'Test string',
                uri: 'Test string',
              },
            ],
            remediations: [
              {
                details: 'Test string',
                remediationType: 'Test string',
                remediationUri: {
                  label: 'Test string',
                  uri: 'Test string',
                },
              },
            ],
            shortDescription: 'Test string',
            state: 'Test string',
            vulnerabilityId: 'Test string',
          },
          languageCode: 'Test string',
          longDescription: 'Test string',
          product: {
            id: 'Test string',
            identifierHelper: {
              field: 'Test string',
              genericUri: 'Test string',
            },
            name: 'Test string',
          },
          publisher: {
            issuingAuthority: 'Test string',
            name: 'Test string',
            publisherNamespace: 'Test string',
          },
          shortDescription: 'Test string',
          title: 'Test string',
        },
        vulnerabilityType: {
          cvssScore: 42,
          cvssV2: {
            attackComplexity: 'Test string',
            attackVector: 'Test string',
            authentication: 'Test string',
            availabilityImpact: 'Test string',
            baseScore: 42,
            confidentialityImpact: 'Test string',
            exploitabilityScore: 42,
            impactScore: 42,
            integrityImpact: 'Test string',
            privilegesRequired: 'Test string',
            scope: 'Test string',
            userInteraction: 'Test string',
          },
          cvssVersion: 'Test string',
          cwe: ['Test string'],
          details: [
            {
              cpeUri: 'Test string',
              description: 'Test string',
              fixedLocation: {
                cpeUri: 'Test string',
                fileLocation: [
                  {
                    filePath: 'Test string',
                  },
                ],
                package: 'Test string',
                version: {
                  epoch: 42,
                  inclusive: true,
                  kind: 'Test string',
                  name: 'Test string',
                  revision: 'Test string',
                },
              },
              isObsolete: true,
              maxAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              minAffectedVersion: {
                epoch: 42,
                inclusive: true,
                kind: 'Test string',
                name: 'Test string',
                revision: 'Test string',
              },
              package: 'Test string',
              packageType: 'Test string',
              severityName: 'Test string',
              source: 'Test string',
              vendor: 'Test string',
            },
          ],
          severity: 'Test string',
        },
      }
    );
    /** Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes */
    await gapi.client.containeranalysis.providers.notes.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
      }
    );
    /** Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, "storage.objects.list" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes` */
    await gapi.client.containeranalysis.providers.notes.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      }
    );
    /** Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects. */
    await gapi.client.containeranalysis.providers.notes.occurrences.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
