/* This is stub file for gapi.client.dialogflow-v3beta1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250116

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://dialogflow.googleapis.com/$discovery/rest?version=v3beta1'
  );
  /** now we can use gapi.client.dialogflow */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View, manage and query your Dialogflow agents */
    'https://www.googleapis.com/auth/dialogflow',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.dialogflow.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.dialogflow.projects.locations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates an agent in the specified location. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.create(
      {
        parent: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        answerFeedbackSettings: {
          enableAnswerFeedback: true,
        },
        avatarUri: 'Test string',
        bigqueryExportSettings: {
          bigqueryTable: 'Test string',
          enabled: true,
        },
        clientCertificateSettings: {
          passphrase: 'Test string',
          privateKey: 'Test string',
          sslCertificate: 'Test string',
        },
        defaultLanguageCode: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        enableMultiLanguageTraining: true,
        enableSpellCorrection: true,
        enableStackdriverLogging: true,
        genAppBuilderSettings: {
          engine: 'Test string',
        },
        gitIntegrationSettings: {
          githubSettings: {
            accessToken: 'Test string',
            branches: ['Test string'],
            displayName: 'Test string',
            repositoryUri: 'Test string',
            trackingBranch: 'Test string',
          },
        },
        locked: true,
        name: 'Test string',
        personalizationSettings: {
          defaultEndUserMetadata: {
            A: 42,
          },
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        securitySettings: 'Test string',
        speechToTextSettings: {
          enableSpeechAdaptation: true,
        },
        startFlow: 'Test string',
        startPlaybook: 'Test string',
        supportedLanguageCodes: ['Test string'],
        textToSpeechSettings: {
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        timeZone: 'Test string',
      }
    );
    /** Deletes the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.delete({
      name: 'Test string',
    });
    /** Exports the specified agent to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse */
    await gapi.client.dialogflow.projects.locations.agents.export(
      {
        name: 'Test string',
      },
      {
        agentUri: 'Test string',
        dataFormat: 'Test string',
        environment: 'Test string',
        gitDestination: {
          commitMessage: 'Test string',
          trackingBranch: 'Test string',
        },
        includeBigqueryExportSettings: true,
      }
    );
    /** Retrieves the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.get({
      name: 'Test string',
    });
    /** Gets the generative settings for the agent. */
    await gapi.client.dialogflow.projects.locations.agents.getGenerativeSettings(
      {
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Gets the latest agent validation result. Agent validation is performed when ValidateAgent is called. */
    await gapi.client.dialogflow.projects.locations.agents.getValidationResult({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all agents in the specified location. */
    await gapi.client.dialogflow.projects.locations.agents.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        answerFeedbackSettings: {
          enableAnswerFeedback: true,
        },
        avatarUri: 'Test string',
        bigqueryExportSettings: {
          bigqueryTable: 'Test string',
          enabled: true,
        },
        clientCertificateSettings: {
          passphrase: 'Test string',
          privateKey: 'Test string',
          sslCertificate: 'Test string',
        },
        defaultLanguageCode: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        enableMultiLanguageTraining: true,
        enableSpellCorrection: true,
        enableStackdriverLogging: true,
        genAppBuilderSettings: {
          engine: 'Test string',
        },
        gitIntegrationSettings: {
          githubSettings: {
            accessToken: 'Test string',
            branches: ['Test string'],
            displayName: 'Test string',
            repositoryUri: 'Test string',
            trackingBranch: 'Test string',
          },
        },
        locked: true,
        name: 'Test string',
        personalizationSettings: {
          defaultEndUserMetadata: {
            A: 42,
          },
        },
        satisfiesPzi: true,
        satisfiesPzs: true,
        securitySettings: 'Test string',
        speechToTextSettings: {
          enableSpeechAdaptation: true,
        },
        startFlow: 'Test string',
        startPlaybook: 'Test string',
        supportedLanguageCodes: ['Test string'],
        textToSpeechSettings: {
          synthesizeSpeechConfigs: {
            A: {
              effectsProfileId: ['Test string'],
              pitch: 42,
              speakingRate: 42,
              voice: {
                name: 'Test string',
                ssmlGender: 'Test string',
              },
              volumeGainDb: 42,
            },
          },
        },
        timeZone: 'Test string',
      }
    );
    /** Restores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.restore(
      {
        name: 'Test string',
      },
      {
        agentContent: 'Test string',
        agentUri: 'Test string',
        gitSource: {
          trackingBranch: 'Test string',
        },
        restoreOption: 'Test string',
      }
    );
    /** Updates the generative settings for the agent. */
    await gapi.client.dialogflow.projects.locations.agents.updateGenerativeSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        fallbackSettings: {
          promptTemplates: [
            {
              displayName: 'Test string',
              frozen: true,
              promptText: 'Test string',
            },
          ],
          selectedPrompt: 'Test string',
        },
        generativeSafetySettings: {
          bannedPhrases: [
            {
              languageCode: 'Test string',
              text: 'Test string',
            },
          ],
          defaultBannedPhraseMatchStrategy: 'Test string',
        },
        knowledgeConnectorSettings: {
          agent: 'Test string',
          agentIdentity: 'Test string',
          agentScope: 'Test string',
          business: 'Test string',
          businessDescription: 'Test string',
          disableDataStoreFallback: true,
        },
        languageCode: 'Test string',
        llmModelSettings: {
          model: 'Test string',
          promptText: 'Test string',
        },
        name: 'Test string',
      }
    );
    /** Validates the specified agent and creates or updates validation results. The agent in draft version is validated. Please call this API after the training is completed to get the complete validation results. */
    await gapi.client.dialogflow.projects.locations.agents.validate(
      {
        name: 'Test string',
      },
      {
        languageCode: 'Test string',
      }
    );
    /** Retrieves the specified Changelog. */
    await gapi.client.dialogflow.projects.locations.agents.changelogs.get({
      name: 'Test string',
    });
    /** Returns the list of Changelogs. */
    await gapi.client.dialogflow.projects.locations.agents.changelogs.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes the specified conversation. */
    await gapi.client.dialogflow.projects.locations.agents.conversations.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified conversation. */
    await gapi.client.dialogflow.projects.locations.agents.conversations.get({
      name: 'Test string',
    });
    /** Returns the list of all conversations. */
    await gapi.client.dialogflow.projects.locations.agents.conversations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Creates an entity type in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        excludedPhrases: [
          {
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
        redact: true,
      }
    );
    /** Deletes the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.delete({
      force: true,
      name: 'Test string',
    });
    /** Exports the selected entity types. */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.export(
      {
        parent: 'Test string',
      },
      {
        dataFormat: 'Test string',
        entityTypes: ['Test string'],
        entityTypesContentInline: true,
        entityTypesUri: 'Test string',
        languageCode: 'Test string',
      }
    );
    /** Retrieves the specified entity type. */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Imports the specified entitytypes into the agent. */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.import(
      {
        parent: 'Test string',
      },
      {
        entityTypesContent: {
          content: 'Test string',
        },
        entityTypesUri: 'Test string',
        mergeOption: 'Test string',
        targetEntityType: 'Test string',
      }
    );
    /** Returns the list of all entity types in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.entityTypes.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        autoExpansionMode: 'Test string',
        displayName: 'Test string',
        enableFuzzyExtraction: true,
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        excludedPhrases: [
          {
            value: 'Test string',
          },
        ],
        kind: 'Test string',
        name: 'Test string',
        redact: true,
      }
    );
    /** Creates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment */
    await gapi.client.dialogflow.projects.locations.agents.environments.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        testCasesConfig: {
          enableContinuousRun: true,
          enablePredeploymentRun: true,
          testCases: ['Test string'],
        },
        updateTime: 'Test string',
        versionConfigs: [
          {
            version: 'Test string',
          },
        ],
        webhookConfig: {
          webhookOverrides: [
            {
              disabled: true,
              displayName: 'Test string',
              genericWebService: {
                allowedCaCerts: ['Test string'],
                httpMethod: 'Test string',
                oauthConfig: {
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  scopes: ['Test string'],
                  tokenEndpoint: 'Test string',
                },
                parameterMapping: {
                  A: 'Test string',
                },
                password: 'Test string',
                requestBody: 'Test string',
                requestHeaders: {
                  A: 'Test string',
                },
                serviceAgentAuth: 'Test string',
                uri: 'Test string',
                username: 'Test string',
                webhookType: 'Test string',
              },
              name: 'Test string',
              serviceDirectory: {
                genericWebService: {
                  allowedCaCerts: ['Test string'],
                  httpMethod: 'Test string',
                  oauthConfig: {
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    scopes: ['Test string'],
                    tokenEndpoint: 'Test string',
                  },
                  parameterMapping: {
                    A: 'Test string',
                  },
                  password: 'Test string',
                  requestBody: 'Test string',
                  requestHeaders: {
                    A: 'Test string',
                  },
                  serviceAgentAuth: 'Test string',
                  uri: 'Test string',
                  username: 'Test string',
                  webhookType: 'Test string',
                },
                service: 'Test string',
              },
              timeout: 'Test string',
            },
          ],
        },
      }
    );
    /** Deletes the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.delete({
      name: 'Test string',
    });
    /** Deploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse */
    await gapi.client.dialogflow.projects.locations.agents.environments.deployFlow(
      {
        environment: 'Test string',
      },
      {
        flowVersion: 'Test string',
      }
    );
    /** Retrieves the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.get({
      name: 'Test string',
    });
    /** Returns the list of all environments in the specified Agent. */
    await gapi.client.dialogflow.projects.locations.agents.environments.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Looks up the history of the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.lookupEnvironmentHistory(
      {
        name: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
      }
    );
    /** Updates the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment */
    await gapi.client.dialogflow.projects.locations.agents.environments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        testCasesConfig: {
          enableContinuousRun: true,
          enablePredeploymentRun: true,
          testCases: ['Test string'],
        },
        updateTime: 'Test string',
        versionConfigs: [
          {
            version: 'Test string',
          },
        ],
        webhookConfig: {
          webhookOverrides: [
            {
              disabled: true,
              displayName: 'Test string',
              genericWebService: {
                allowedCaCerts: ['Test string'],
                httpMethod: 'Test string',
                oauthConfig: {
                  clientId: 'Test string',
                  clientSecret: 'Test string',
                  scopes: ['Test string'],
                  tokenEndpoint: 'Test string',
                },
                parameterMapping: {
                  A: 'Test string',
                },
                password: 'Test string',
                requestBody: 'Test string',
                requestHeaders: {
                  A: 'Test string',
                },
                serviceAgentAuth: 'Test string',
                uri: 'Test string',
                username: 'Test string',
                webhookType: 'Test string',
              },
              name: 'Test string',
              serviceDirectory: {
                genericWebService: {
                  allowedCaCerts: ['Test string'],
                  httpMethod: 'Test string',
                  oauthConfig: {
                    clientId: 'Test string',
                    clientSecret: 'Test string',
                    scopes: ['Test string'],
                    tokenEndpoint: 'Test string',
                  },
                  parameterMapping: {
                    A: 'Test string',
                  },
                  password: 'Test string',
                  requestBody: 'Test string',
                  requestHeaders: {
                    A: 'Test string',
                  },
                  serviceAgentAuth: 'Test string',
                  uri: 'Test string',
                  username: 'Test string',
                  webhookType: 'Test string',
                },
                service: 'Test string',
              },
              timeout: 'Test string',
            },
          ],
        },
      }
    );
    /** Kicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse */
    await gapi.client.dialogflow.projects.locations.agents.environments.runContinuousTest(
      {
        environment: 'Test string',
      },
      {}
    );
    /** Fetches a list of continuous test results for a given environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.continuousTestResults.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Retrieves the specified Deployment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.deployments.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all deployments in the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.deployments.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates an Experiment in the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        definition: {
          condition: 'Test string',
          versionVariants: {
            variants: [
              {
                isControlGroup: true,
                trafficAllocation: 42,
                version: 'Test string',
              },
            ],
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        endTime: 'Test string',
        experimentLength: 'Test string',
        lastUpdateTime: 'Test string',
        name: 'Test string',
        result: {
          lastUpdateTime: 'Test string',
          versionMetrics: [
            {
              metrics: [
                {
                  confidenceInterval: {
                    confidenceLevel: 42,
                    lowerBound: 42,
                    ratio: 42,
                    upperBound: 42,
                  },
                  count: 42,
                  countType: 'Test string',
                  ratio: 42,
                  type: 'Test string',
                },
              ],
              sessionCount: 42,
              version: 'Test string',
            },
          ],
        },
        rolloutConfig: {
          failureCondition: 'Test string',
          rolloutCondition: 'Test string',
          rolloutSteps: [
            {
              displayName: 'Test string',
              minDuration: 'Test string',
              trafficPercent: 42,
            },
          ],
        },
        rolloutFailureReason: 'Test string',
        rolloutState: {
          startTime: 'Test string',
          step: 'Test string',
          stepIndex: 42,
        },
        startTime: 'Test string',
        state: 'Test string',
        variantsHistory: [
          {
            updateTime: 'Test string',
            versionVariants: {
              variants: [
                {
                  isControlGroup: true,
                  trafficAllocation: 42,
                  version: 'Test string',
                },
              ],
            },
          },
        ],
      }
    );
    /** Deletes the specified Experiment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified Experiment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all experiments in the specified Environment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified Experiment. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        definition: {
          condition: 'Test string',
          versionVariants: {
            variants: [
              {
                isControlGroup: true,
                trafficAllocation: 42,
                version: 'Test string',
              },
            ],
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        endTime: 'Test string',
        experimentLength: 'Test string',
        lastUpdateTime: 'Test string',
        name: 'Test string',
        result: {
          lastUpdateTime: 'Test string',
          versionMetrics: [
            {
              metrics: [
                {
                  confidenceInterval: {
                    confidenceLevel: 42,
                    lowerBound: 42,
                    ratio: 42,
                    upperBound: 42,
                  },
                  count: 42,
                  countType: 'Test string',
                  ratio: 42,
                  type: 'Test string',
                },
              ],
              sessionCount: 42,
              version: 'Test string',
            },
          ],
        },
        rolloutConfig: {
          failureCondition: 'Test string',
          rolloutCondition: 'Test string',
          rolloutSteps: [
            {
              displayName: 'Test string',
              minDuration: 'Test string',
              trafficPercent: 42,
            },
          ],
        },
        rolloutFailureReason: 'Test string',
        rolloutState: {
          startTime: 'Test string',
          step: 'Test string',
          stepIndex: 42,
        },
        startTime: 'Test string',
        state: 'Test string',
        variantsHistory: [
          {
            updateTime: 'Test string',
            versionVariants: {
              variants: [
                {
                  isControlGroup: true,
                  trafficAllocation: 42,
                  version: 'Test string',
                },
              ],
            },
          },
        ],
      }
    );
    /** Starts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.start(
      {
        name: 'Test string',
      },
      {}
    );
    /** Stops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE. */
    await gapi.client.dialogflow.projects.locations.agents.environments.experiments.stop(
      {
        name: 'Test string',
      },
      {}
    );
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version). */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        session: 'Test string',
      }
    );
    /** Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.fulfillIntent(
      {
        session: 'Test string',
      },
      {
        match: {
          confidence: 42,
          event: 'Test string',
          intent: {
            description: 'Test string',
            displayName: 'Test string',
            isFallback: true,
            labels: {
              A: 'Test string',
            },
            name: 'Test string',
            parameters: [
              {
                entityType: 'Test string',
                id: 'Test string',
                isList: true,
                redact: true,
              },
            ],
            priority: 42,
            trainingPhrases: [
              {
                id: 'Test string',
                parts: [
                  {
                    parameterId: 'Test string',
                    text: 'Test string',
                  },
                ],
                repeatCount: 42,
              },
            ],
          },
          matchType: 'Test string',
          parameters: {
            A: 42,
          },
          resolvedInput: 'Test string',
        },
        matchIntentRequest: {
          persistParameterChanges: true,
          queryInput: {
            audio: {
              audio: 'Test string',
              config: {
                audioEncoding: 'Test string',
                bargeInConfig: {
                  noBargeInDuration: 'Test string',
                  totalDuration: 'Test string',
                },
                enableWordInfo: true,
                model: 'Test string',
                modelVariant: 'Test string',
                optOutConformerModelMigration: true,
                phraseHints: ['Test string'],
                sampleRateHertz: 42,
                singleUtterance: true,
              },
            },
            dtmf: {
              digits: 'Test string',
              finishDigit: 'Test string',
            },
            event: {
              event: 'Test string',
            },
            intent: {
              intent: 'Test string',
            },
            languageCode: 'Test string',
            text: {
              text: 'Test string',
            },
            toolCallResult: {
              action: 'Test string',
              error: {
                message: 'Test string',
              },
              outputParameters: {
                A: 42,
              },
              tool: 'Test string',
            },
          },
          queryParams: {
            analyzeQueryTextSentiment: true,
            channel: 'Test string',
            currentPage: 'Test string',
            currentPlaybook: 'Test string',
            disableWebhook: true,
            endUserMetadata: {
              A: 42,
            },
            flowVersions: ['Test string'],
            geoLocation: {
              latitude: 42,
              longitude: 42,
            },
            llmModelSettings: {
              model: 'Test string',
              promptText: 'Test string',
            },
            parameters: {
              A: 42,
            },
            payload: {
              A: 42,
            },
            populateDataStoreConnectionSignals: true,
            searchConfig: {
              boostSpecs: [
                {
                  dataStores: ['Test string'],
                  spec: [
                    {
                      conditionBoostSpecs: [
                        {
                          boost: 42,
                          boostControlSpec: {
                            attributeType: 'Test string',
                            controlPoints: [
                              {
                                attributeValue: 'Test string',
                                boostAmount: 42,
                              },
                            ],
                            fieldName: 'Test string',
                            interpolationType: 'Test string',
                          },
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                },
              ],
              filterSpecs: [
                {
                  dataStores: ['Test string'],
                  filter: 'Test string',
                },
              ],
            },
            sessionEntityTypes: [
              {
                entities: [
                  {
                    synonyms: ['Test string'],
                    value: 'Test string',
                  },
                ],
                entityOverrideMode: 'Test string',
                name: 'Test string',
              },
            ],
            sessionTtl: 'Test string',
            timeZone: 'Test string',
            webhookHeaders: {
              A: 'Test string',
            },
          },
        },
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
      }
    );
    /** Returns preliminary intent match results, doesn't change the session status. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.matchIntent(
      {
        session: 'Test string',
      },
      {
        persistParameterChanges: true,
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Processes a natural language query and returns structured, actionable data as a result through server-side streaming. Server-side streaming allows Dialogflow to send [partial responses](https://cloud.google.com/dialogflow/cx/docs/concept/fulfillment#partial-response) earlier in a single request. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.serverStreamingDetectIntent(
      {
        session: 'Test string',
      },
      {
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        session: 'Test string',
      }
    );
    /** Creates a session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.entityTypes.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.entityTypes.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all session entity types in the specified session. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.entityTypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.environments.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        eventHandlers: [
          {
            event: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            targetPlaybook: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
        knowledgeConnectorSettings: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          enabled: true,
          targetFlow: 'Test string',
          targetPage: 'Test string',
          triggerFulfillment: {
            advancedSettings: {
              audioExportGcsDestination: {
                uri: 'Test string',
              },
              dtmfSettings: {
                enabled: true,
                endpointingTimeoutDuration: 'Test string',
                finishDigit: 'Test string',
                interdigitTimeoutDuration: 'Test string',
                maxDigits: 42,
              },
              loggingSettings: {
                enableConsentBasedRedaction: true,
                enableInteractionLogging: true,
                enableStackdriverLogging: true,
              },
              speechSettings: {
                endpointerSensitivity: 42,
                models: {
                  A: 'Test string',
                },
                noSpeechTimeout: 'Test string',
                useTimeoutBasedEndpointing: true,
              },
            },
            conditionalCases: [
              {
                cases: [
                  {
                    caseContent: [
                      {
                        additionalCases: undefined,
                        message: {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      },
                    ],
                    condition: 'Test string',
                  },
                ],
              },
            ],
            enableGenerativeFallback: true,
            messages: [
              {
                channel: 'Test string',
                conversationSuccess: {
                  metadata: {
                    A: 42,
                  },
                },
                endInteraction: {},
                knowledgeInfoCard: {},
                liveAgentHandoff: {
                  metadata: {
                    A: 42,
                  },
                },
                mixedAudio: {
                  segments: [
                    {
                      allowPlaybackInterruption: true,
                      audio: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                },
                outputAudioText: {
                  allowPlaybackInterruption: true,
                  ssml: 'Test string',
                  text: 'Test string',
                },
                payload: {
                  A: 42,
                },
                playAudio: {
                  allowPlaybackInterruption: true,
                  audioUri: 'Test string',
                },
                telephonyTransferCall: {
                  phoneNumber: 'Test string',
                },
                text: {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
                toolCall: {
                  action: 'Test string',
                  inputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
            ],
            returnPartialResponses: true,
            setParameterActions: [
              {
                parameter: 'Test string',
                value: 42,
              },
            ],
            tag: 'Test string',
            webhook: 'Test string',
          },
        },
        locked: true,
        multiLanguageSettings: {
          enableMultiLanguageDetection: true,
          supportedResponseLanguageCodes: ['Test string'],
        },
        name: 'Test string',
        nluSettings: {
          classificationThreshold: 42,
          modelTrainingMode: 'Test string',
          modelType: 'Test string',
        },
        transitionRouteGroups: ['Test string'],
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes a specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.delete({
      force: true,
      name: 'Test string',
    });
    /** Exports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported. */
    await gapi.client.dialogflow.projects.locations.agents.flows.export(
      {
        name: 'Test string',
      },
      {
        flowUri: 'Test string',
        includeReferencedFlows: true,
      }
    );
    /** Retrieves the specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Gets the latest flow validation result. Flow validation is performed when ValidateFlow is called. */
    await gapi.client.dialogflow.projects.locations.agents.flows.getValidationResult(
      {
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Imports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.import(
      {
        parent: 'Test string',
      },
      {
        flowContent: 'Test string',
        flowImportStrategy: {
          globalImportStrategy: 'Test string',
        },
        flowUri: 'Test string',
        importOption: 'Test string',
      }
    );
    /** Returns the list of all flows in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.flows.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        eventHandlers: [
          {
            event: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            targetPlaybook: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
        knowledgeConnectorSettings: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          enabled: true,
          targetFlow: 'Test string',
          targetPage: 'Test string',
          triggerFulfillment: {
            advancedSettings: {
              audioExportGcsDestination: {
                uri: 'Test string',
              },
              dtmfSettings: {
                enabled: true,
                endpointingTimeoutDuration: 'Test string',
                finishDigit: 'Test string',
                interdigitTimeoutDuration: 'Test string',
                maxDigits: 42,
              },
              loggingSettings: {
                enableConsentBasedRedaction: true,
                enableInteractionLogging: true,
                enableStackdriverLogging: true,
              },
              speechSettings: {
                endpointerSensitivity: 42,
                models: {
                  A: 'Test string',
                },
                noSpeechTimeout: 'Test string',
                useTimeoutBasedEndpointing: true,
              },
            },
            conditionalCases: [
              {
                cases: [
                  {
                    caseContent: [
                      {
                        additionalCases: undefined,
                        message: {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      },
                    ],
                    condition: 'Test string',
                  },
                ],
              },
            ],
            enableGenerativeFallback: true,
            messages: [
              {
                channel: 'Test string',
                conversationSuccess: {
                  metadata: {
                    A: 42,
                  },
                },
                endInteraction: {},
                knowledgeInfoCard: {},
                liveAgentHandoff: {
                  metadata: {
                    A: 42,
                  },
                },
                mixedAudio: {
                  segments: [
                    {
                      allowPlaybackInterruption: true,
                      audio: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                },
                outputAudioText: {
                  allowPlaybackInterruption: true,
                  ssml: 'Test string',
                  text: 'Test string',
                },
                payload: {
                  A: 42,
                },
                playAudio: {
                  allowPlaybackInterruption: true,
                  audioUri: 'Test string',
                },
                telephonyTransferCall: {
                  phoneNumber: 'Test string',
                },
                text: {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
                toolCall: {
                  action: 'Test string',
                  inputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
            ],
            returnPartialResponses: true,
            setParameterActions: [
              {
                parameter: 'Test string',
                value: 42,
              },
            ],
            tag: 'Test string',
            webhook: 'Test string',
          },
        },
        locked: true,
        multiLanguageSettings: {
          enableMultiLanguageDetection: true,
          supportedResponseLanguageCodes: ['Test string'],
        },
        name: 'Test string',
        nluSettings: {
          classificationThreshold: 42,
          modelTrainingMode: 'Test string',
          modelType: 'Test string',
        },
        transitionRouteGroups: ['Test string'],
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Trains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.train(
      {
        name: 'Test string',
      },
      {}
    );
    /** Validates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results. */
    await gapi.client.dialogflow.projects.locations.agents.flows.validate(
      {
        name: 'Test string',
      },
      {
        languageCode: 'Test string',
      }
    );
    /** Creates a page in the specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.pages.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        entryFulfillment: {
          advancedSettings: {
            audioExportGcsDestination: {
              uri: 'Test string',
            },
            dtmfSettings: {
              enabled: true,
              endpointingTimeoutDuration: 'Test string',
              finishDigit: 'Test string',
              interdigitTimeoutDuration: 'Test string',
              maxDigits: 42,
            },
            loggingSettings: {
              enableConsentBasedRedaction: true,
              enableInteractionLogging: true,
              enableStackdriverLogging: true,
            },
            speechSettings: {
              endpointerSensitivity: 42,
              models: {
                A: 'Test string',
              },
              noSpeechTimeout: 'Test string',
              useTimeoutBasedEndpointing: true,
            },
          },
          conditionalCases: [
            {
              cases: [
                {
                  caseContent: [
                    {
                      additionalCases: undefined,
                      message: {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    },
                  ],
                  condition: 'Test string',
                },
              ],
            },
          ],
          enableGenerativeFallback: true,
          messages: [
            {
              channel: 'Test string',
              conversationSuccess: {
                metadata: {
                  A: 42,
                },
              },
              endInteraction: {},
              knowledgeInfoCard: {},
              liveAgentHandoff: {
                metadata: {
                  A: 42,
                },
              },
              mixedAudio: {
                segments: [
                  {
                    allowPlaybackInterruption: true,
                    audio: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              outputAudioText: {
                allowPlaybackInterruption: true,
                ssml: 'Test string',
                text: 'Test string',
              },
              payload: {
                A: 42,
              },
              playAudio: {
                allowPlaybackInterruption: true,
                audioUri: 'Test string',
              },
              telephonyTransferCall: {
                phoneNumber: 'Test string',
              },
              text: {
                allowPlaybackInterruption: true,
                text: ['Test string'],
              },
              toolCall: {
                action: 'Test string',
                inputParameters: {
                  A: 42,
                },
                tool: 'Test string',
              },
            },
          ],
          returnPartialResponses: true,
          setParameterActions: [
            {
              parameter: 'Test string',
              value: 42,
            },
          ],
          tag: 'Test string',
          webhook: 'Test string',
        },
        eventHandlers: [
          {
            event: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            targetPlaybook: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
        form: {
          parameters: [
            {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              defaultValue: 42,
              displayName: 'Test string',
              entityType: 'Test string',
              fillBehavior: {
                initialPromptFulfillment: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  conditionalCases: [
                    {
                      cases: [
                        {
                          caseContent: [
                            {
                              additionalCases: undefined,
                              message: {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            },
                          ],
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                  enableGenerativeFallback: true,
                  messages: [
                    {
                      channel: 'Test string',
                      conversationSuccess: {
                        metadata: {
                          A: 42,
                        },
                      },
                      endInteraction: {},
                      knowledgeInfoCard: {},
                      liveAgentHandoff: {
                        metadata: {
                          A: 42,
                        },
                      },
                      mixedAudio: {
                        segments: [
                          {
                            allowPlaybackInterruption: true,
                            audio: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      outputAudioText: {
                        allowPlaybackInterruption: true,
                        ssml: 'Test string',
                        text: 'Test string',
                      },
                      payload: {
                        A: 42,
                      },
                      playAudio: {
                        allowPlaybackInterruption: true,
                        audioUri: 'Test string',
                      },
                      telephonyTransferCall: {
                        phoneNumber: 'Test string',
                      },
                      text: {
                        allowPlaybackInterruption: true,
                        text: ['Test string'],
                      },
                      toolCall: {
                        action: 'Test string',
                        inputParameters: {
                          A: 42,
                        },
                        tool: 'Test string',
                      },
                    },
                  ],
                  returnPartialResponses: true,
                  setParameterActions: [
                    {
                      parameter: 'Test string',
                      value: 42,
                    },
                  ],
                  tag: 'Test string',
                  webhook: 'Test string',
                },
                repromptEventHandlers: [
                  {
                    event: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    targetPlaybook: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
              },
              isList: true,
              redact: true,
              required: true,
            },
          ],
        },
        knowledgeConnectorSettings: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          enabled: true,
          targetFlow: 'Test string',
          targetPage: 'Test string',
          triggerFulfillment: {
            advancedSettings: {
              audioExportGcsDestination: {
                uri: 'Test string',
              },
              dtmfSettings: {
                enabled: true,
                endpointingTimeoutDuration: 'Test string',
                finishDigit: 'Test string',
                interdigitTimeoutDuration: 'Test string',
                maxDigits: 42,
              },
              loggingSettings: {
                enableConsentBasedRedaction: true,
                enableInteractionLogging: true,
                enableStackdriverLogging: true,
              },
              speechSettings: {
                endpointerSensitivity: 42,
                models: {
                  A: 'Test string',
                },
                noSpeechTimeout: 'Test string',
                useTimeoutBasedEndpointing: true,
              },
            },
            conditionalCases: [
              {
                cases: [
                  {
                    caseContent: [
                      {
                        additionalCases: undefined,
                        message: {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      },
                    ],
                    condition: 'Test string',
                  },
                ],
              },
            ],
            enableGenerativeFallback: true,
            messages: [
              {
                channel: 'Test string',
                conversationSuccess: {
                  metadata: {
                    A: 42,
                  },
                },
                endInteraction: {},
                knowledgeInfoCard: {},
                liveAgentHandoff: {
                  metadata: {
                    A: 42,
                  },
                },
                mixedAudio: {
                  segments: [
                    {
                      allowPlaybackInterruption: true,
                      audio: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                },
                outputAudioText: {
                  allowPlaybackInterruption: true,
                  ssml: 'Test string',
                  text: 'Test string',
                },
                payload: {
                  A: 42,
                },
                playAudio: {
                  allowPlaybackInterruption: true,
                  audioUri: 'Test string',
                },
                telephonyTransferCall: {
                  phoneNumber: 'Test string',
                },
                text: {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
                toolCall: {
                  action: 'Test string',
                  inputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
            ],
            returnPartialResponses: true,
            setParameterActions: [
              {
                parameter: 'Test string',
                value: 42,
              },
            ],
            tag: 'Test string',
            webhook: 'Test string',
          },
        },
        name: 'Test string',
        transitionRouteGroups: ['Test string'],
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes the specified page. */
    await gapi.client.dialogflow.projects.locations.agents.flows.pages.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified page. */
    await gapi.client.dialogflow.projects.locations.agents.flows.pages.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all pages in the specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.pages.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified page. */
    await gapi.client.dialogflow.projects.locations.agents.flows.pages.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        advancedSettings: {
          audioExportGcsDestination: {
            uri: 'Test string',
          },
          dtmfSettings: {
            enabled: true,
            endpointingTimeoutDuration: 'Test string',
            finishDigit: 'Test string',
            interdigitTimeoutDuration: 'Test string',
            maxDigits: 42,
          },
          loggingSettings: {
            enableConsentBasedRedaction: true,
            enableInteractionLogging: true,
            enableStackdriverLogging: true,
          },
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
        },
        description: 'Test string',
        displayName: 'Test string',
        entryFulfillment: {
          advancedSettings: {
            audioExportGcsDestination: {
              uri: 'Test string',
            },
            dtmfSettings: {
              enabled: true,
              endpointingTimeoutDuration: 'Test string',
              finishDigit: 'Test string',
              interdigitTimeoutDuration: 'Test string',
              maxDigits: 42,
            },
            loggingSettings: {
              enableConsentBasedRedaction: true,
              enableInteractionLogging: true,
              enableStackdriverLogging: true,
            },
            speechSettings: {
              endpointerSensitivity: 42,
              models: {
                A: 'Test string',
              },
              noSpeechTimeout: 'Test string',
              useTimeoutBasedEndpointing: true,
            },
          },
          conditionalCases: [
            {
              cases: [
                {
                  caseContent: [
                    {
                      additionalCases: undefined,
                      message: {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    },
                  ],
                  condition: 'Test string',
                },
              ],
            },
          ],
          enableGenerativeFallback: true,
          messages: [
            {
              channel: 'Test string',
              conversationSuccess: {
                metadata: {
                  A: 42,
                },
              },
              endInteraction: {},
              knowledgeInfoCard: {},
              liveAgentHandoff: {
                metadata: {
                  A: 42,
                },
              },
              mixedAudio: {
                segments: [
                  {
                    allowPlaybackInterruption: true,
                    audio: 'Test string',
                    uri: 'Test string',
                  },
                ],
              },
              outputAudioText: {
                allowPlaybackInterruption: true,
                ssml: 'Test string',
                text: 'Test string',
              },
              payload: {
                A: 42,
              },
              playAudio: {
                allowPlaybackInterruption: true,
                audioUri: 'Test string',
              },
              telephonyTransferCall: {
                phoneNumber: 'Test string',
              },
              text: {
                allowPlaybackInterruption: true,
                text: ['Test string'],
              },
              toolCall: {
                action: 'Test string',
                inputParameters: {
                  A: 42,
                },
                tool: 'Test string',
              },
            },
          ],
          returnPartialResponses: true,
          setParameterActions: [
            {
              parameter: 'Test string',
              value: 42,
            },
          ],
          tag: 'Test string',
          webhook: 'Test string',
        },
        eventHandlers: [
          {
            event: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            targetPlaybook: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
        form: {
          parameters: [
            {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              defaultValue: 42,
              displayName: 'Test string',
              entityType: 'Test string',
              fillBehavior: {
                initialPromptFulfillment: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  conditionalCases: [
                    {
                      cases: [
                        {
                          caseContent: [
                            {
                              additionalCases: undefined,
                              message: {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            },
                          ],
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                  enableGenerativeFallback: true,
                  messages: [
                    {
                      channel: 'Test string',
                      conversationSuccess: {
                        metadata: {
                          A: 42,
                        },
                      },
                      endInteraction: {},
                      knowledgeInfoCard: {},
                      liveAgentHandoff: {
                        metadata: {
                          A: 42,
                        },
                      },
                      mixedAudio: {
                        segments: [
                          {
                            allowPlaybackInterruption: true,
                            audio: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      outputAudioText: {
                        allowPlaybackInterruption: true,
                        ssml: 'Test string',
                        text: 'Test string',
                      },
                      payload: {
                        A: 42,
                      },
                      playAudio: {
                        allowPlaybackInterruption: true,
                        audioUri: 'Test string',
                      },
                      telephonyTransferCall: {
                        phoneNumber: 'Test string',
                      },
                      text: {
                        allowPlaybackInterruption: true,
                        text: ['Test string'],
                      },
                      toolCall: {
                        action: 'Test string',
                        inputParameters: {
                          A: 42,
                        },
                        tool: 'Test string',
                      },
                    },
                  ],
                  returnPartialResponses: true,
                  setParameterActions: [
                    {
                      parameter: 'Test string',
                      value: 42,
                    },
                  ],
                  tag: 'Test string',
                  webhook: 'Test string',
                },
                repromptEventHandlers: [
                  {
                    event: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    targetPlaybook: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
              },
              isList: true,
              redact: true,
              required: true,
            },
          ],
        },
        knowledgeConnectorSettings: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          enabled: true,
          targetFlow: 'Test string',
          targetPage: 'Test string',
          triggerFulfillment: {
            advancedSettings: {
              audioExportGcsDestination: {
                uri: 'Test string',
              },
              dtmfSettings: {
                enabled: true,
                endpointingTimeoutDuration: 'Test string',
                finishDigit: 'Test string',
                interdigitTimeoutDuration: 'Test string',
                maxDigits: 42,
              },
              loggingSettings: {
                enableConsentBasedRedaction: true,
                enableInteractionLogging: true,
                enableStackdriverLogging: true,
              },
              speechSettings: {
                endpointerSensitivity: 42,
                models: {
                  A: 'Test string',
                },
                noSpeechTimeout: 'Test string',
                useTimeoutBasedEndpointing: true,
              },
            },
            conditionalCases: [
              {
                cases: [
                  {
                    caseContent: [
                      {
                        additionalCases: undefined,
                        message: {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      },
                    ],
                    condition: 'Test string',
                  },
                ],
              },
            ],
            enableGenerativeFallback: true,
            messages: [
              {
                channel: 'Test string',
                conversationSuccess: {
                  metadata: {
                    A: 42,
                  },
                },
                endInteraction: {},
                knowledgeInfoCard: {},
                liveAgentHandoff: {
                  metadata: {
                    A: 42,
                  },
                },
                mixedAudio: {
                  segments: [
                    {
                      allowPlaybackInterruption: true,
                      audio: 'Test string',
                      uri: 'Test string',
                    },
                  ],
                },
                outputAudioText: {
                  allowPlaybackInterruption: true,
                  ssml: 'Test string',
                  text: 'Test string',
                },
                payload: {
                  A: 42,
                },
                playAudio: {
                  allowPlaybackInterruption: true,
                  audioUri: 'Test string',
                },
                telephonyTransferCall: {
                  phoneNumber: 'Test string',
                },
                text: {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
                toolCall: {
                  action: 'Test string',
                  inputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
            ],
            returnPartialResponses: true,
            setParameterActions: [
              {
                parameter: 'Test string',
                value: 42,
              },
            ],
            tag: 'Test string',
            webhook: 'Test string',
          },
        },
        name: 'Test string',
        transitionRouteGroups: ['Test string'],
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.transitionRouteGroups.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.transitionRouteGroups.delete(
      {
        force: true,
        name: 'Test string',
      }
    );
    /** Retrieves the specified TransitionRouteGroup. */
    await gapi.client.dialogflow.projects.locations.agents.flows.transitionRouteGroups.get(
      {
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Returns the list of all transition route groups in the specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.transitionRouteGroups.list(
      {
        languageCode: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.flows.transitionRouteGroups.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Compares the specified base version with target version. */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.compareVersions(
      {
        baseVersion: 'Test string',
      },
      {
        languageCode: 'Test string',
        targetVersion: 'Test string',
      }
    );
    /** Creates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        nluSettings: {
          classificationThreshold: 42,
          modelTrainingMode: 'Test string',
          modelType: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Deletes the specified Version. */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified Version. */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.get({
      name: 'Test string',
    });
    /** Returns the list of all versions in the specified Flow. */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Loads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.load(
      {
        name: 'Test string',
      },
      {
        allowOverrideAgentResources: true,
      }
    );
    /** Updates the specified Version. */
    await gapi.client.dialogflow.projects.locations.agents.flows.versions.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        name: 'Test string',
        nluSettings: {
          classificationThreshold: 42,
          modelTrainingMode: 'Test string',
          modelType: 'Test string',
        },
        state: 'Test string',
      }
    );
    /** Creates a generator in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.generators.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        llmModelSettings: {
          model: 'Test string',
          promptText: 'Test string',
        },
        modelParameter: {
          maxDecodeSteps: 42,
          temperature: 42,
          topK: 42,
          topP: 42,
        },
        name: 'Test string',
        placeholders: [
          {
            id: 'Test string',
            name: 'Test string',
          },
        ],
        promptText: {
          text: 'Test string',
        },
      }
    );
    /** Deletes the specified generators. */
    await gapi.client.dialogflow.projects.locations.agents.generators.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified generator. */
    await gapi.client.dialogflow.projects.locations.agents.generators.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Returns the list of all generators in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.generators.list({
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the specified generator. */
    await gapi.client.dialogflow.projects.locations.agents.generators.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        llmModelSettings: {
          model: 'Test string',
          promptText: 'Test string',
        },
        modelParameter: {
          maxDecodeSteps: 42,
          temperature: 42,
          topK: 42,
          topP: 42,
        },
        name: 'Test string',
        placeholders: [
          {
            id: 'Test string',
            name: 'Test string',
          },
        ],
        promptText: {
          text: 'Test string',
        },
      }
    );
    /** Creates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.intents.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        isFallback: true,
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parameters: [
          {
            entityType: 'Test string',
            id: 'Test string',
            isList: true,
            redact: true,
          },
        ],
        priority: 42,
        trainingPhrases: [
          {
            id: 'Test string',
            parts: [
              {
                parameterId: 'Test string',
                text: 'Test string',
              },
            ],
            repeatCount: 42,
          },
        ],
      }
    );
    /** Deletes the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.intents.delete({
      name: 'Test string',
    });
    /** Exports the selected intents. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportIntentsMetadata - `response`: ExportIntentsResponse */
    await gapi.client.dialogflow.projects.locations.agents.intents.export(
      {
        parent: 'Test string',
      },
      {
        dataFormat: 'Test string',
        intents: ['Test string'],
        intentsContentInline: true,
        intentsUri: 'Test string',
      }
    );
    /** Retrieves the specified intent. */
    await gapi.client.dialogflow.projects.locations.agents.intents.get({
      languageCode: 'Test string',
      name: 'Test string',
    });
    /** Imports the specified intents into the agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportIntentsMetadata - `response`: ImportIntentsResponse */
    await gapi.client.dialogflow.projects.locations.agents.intents.import(
      {
        parent: 'Test string',
      },
      {
        intentsContent: {
          content: 'Test string',
        },
        intentsUri: 'Test string',
        mergeOption: 'Test string',
      }
    );
    /** Returns the list of all intents in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.intents.list({
      intentView: 'Test string',
      languageCode: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.intents.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        description: 'Test string',
        displayName: 'Test string',
        isFallback: true,
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        parameters: [
          {
            entityType: 'Test string',
            id: 'Test string',
            isList: true,
            redact: true,
          },
        ],
        priority: 42,
        trainingPhrases: [
          {
            id: 'Test string',
            parts: [
              {
                parameterId: 'Test string',
                text: 'Test string',
              },
            ],
            repeatCount: 42,
          },
        ],
      }
    );
    /** Creates a playbook in a specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.create(
      {
        parent: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        goal: 'Test string',
        inputParameterDefinitions: [
          {
            description: 'Test string',
            name: 'Test string',
            type: 'Test string',
            typeSchema: {
              inlineSchema: {
                items: undefined,
                type: 'Test string',
              },
              schemaReference: {
                schema: 'Test string',
                tool: 'Test string',
              },
            },
          },
        ],
        instruction: {
          guidelines: 'Test string',
          steps: [
            {
              steps: undefined,
              text: 'Test string',
            },
          ],
        },
        llmModelSettings: {
          model: 'Test string',
          promptText: 'Test string',
        },
        name: 'Test string',
        outputParameterDefinitions: [
          {
            description: 'Test string',
            name: 'Test string',
            type: 'Test string',
            typeSchema: {
              inlineSchema: {
                items: undefined,
                type: 'Test string',
              },
              schemaReference: {
                schema: 'Test string',
                tool: 'Test string',
              },
            },
          },
        ],
        referencedFlows: ['Test string'],
        referencedPlaybooks: ['Test string'],
        referencedTools: ['Test string'],
        speechSettings: {
          endpointerSensitivity: 42,
          models: {
            A: 'Test string',
          },
          noSpeechTimeout: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        tokenCount: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes a specified playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.delete({
      name: 'Test string',
    });
    /** Exports the specified playbook to a binary file. Note that resources (e.g. examples, tools) that the playbook references will also be exported. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.export(
      {
        name: 'Test string',
      },
      {
        dataFormat: 'Test string',
        playbookUri: 'Test string',
      }
    );
    /** Retrieves the specified Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.get({
      name: 'Test string',
    });
    /** Imports the specified playbook to the specified agent from a binary file. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.import(
      {
        parent: 'Test string',
      },
      {
        importStrategy: {
          mainPlaybookImportStrategy: 'Test string',
          nestedResourceImportStrategy: 'Test string',
          toolImportStrategy: 'Test string',
        },
        playbookContent: 'Test string',
        playbookUri: 'Test string',
      }
    );
    /** Returns a list of playbooks in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        displayName: 'Test string',
        goal: 'Test string',
        inputParameterDefinitions: [
          {
            description: 'Test string',
            name: 'Test string',
            type: 'Test string',
            typeSchema: {
              inlineSchema: {
                items: undefined,
                type: 'Test string',
              },
              schemaReference: {
                schema: 'Test string',
                tool: 'Test string',
              },
            },
          },
        ],
        instruction: {
          guidelines: 'Test string',
          steps: [
            {
              steps: undefined,
              text: 'Test string',
            },
          ],
        },
        llmModelSettings: {
          model: 'Test string',
          promptText: 'Test string',
        },
        name: 'Test string',
        outputParameterDefinitions: [
          {
            description: 'Test string',
            name: 'Test string',
            type: 'Test string',
            typeSchema: {
              inlineSchema: {
                items: undefined,
                type: 'Test string',
              },
              schemaReference: {
                schema: 'Test string',
                tool: 'Test string',
              },
            },
          },
        ],
        referencedFlows: ['Test string'],
        referencedPlaybooks: ['Test string'],
        referencedTools: ['Test string'],
        speechSettings: {
          endpointerSensitivity: 42,
          models: {
            A: 'Test string',
          },
          noSpeechTimeout: 'Test string',
          useTimeoutBasedEndpointing: true,
        },
        tokenCount: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates an example in the specified playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.examples.create(
      {
        parent: 'Test string',
      },
      {
        actions: [
          {
            agentUtterance: {
              text: 'Test string',
            },
            flowInvocation: {
              displayName: 'Test string',
              flow: 'Test string',
              flowState: 'Test string',
              inputActionParameters: {
                A: 42,
              },
              outputActionParameters: {
                A: 42,
              },
            },
            playbookInvocation: {
              displayName: 'Test string',
              playbook: 'Test string',
              playbookInput: {
                actionParameters: {
                  A: 42,
                },
                precedingConversationSummary: 'Test string',
              },
              playbookOutput: {
                actionParameters: {
                  A: 42,
                },
                executionSummary: 'Test string',
              },
              playbookState: 'Test string',
            },
            toolUse: {
              action: 'Test string',
              displayName: 'Test string',
              inputActionParameters: {
                A: 42,
              },
              outputActionParameters: {
                A: 42,
              },
              tool: 'Test string',
            },
            userUtterance: {
              text: 'Test string',
            },
          },
        ],
        conversationState: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        playbookInput: {
          actionParameters: {
            A: 42,
          },
          precedingConversationSummary: 'Test string',
        },
        playbookOutput: {
          actionParameters: {
            A: 42,
          },
          executionSummary: 'Test string',
        },
        tokenCount: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified example. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.examples.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified example. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.examples.get(
      {
        name: 'Test string',
      }
    );
    /** Returns a list of examples in the specified playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.examples.list(
      {
        languageCode: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Update the specified example. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.examples.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        actions: [
          {
            agentUtterance: {
              text: 'Test string',
            },
            flowInvocation: {
              displayName: 'Test string',
              flow: 'Test string',
              flowState: 'Test string',
              inputActionParameters: {
                A: 42,
              },
              outputActionParameters: {
                A: 42,
              },
            },
            playbookInvocation: {
              displayName: 'Test string',
              playbook: 'Test string',
              playbookInput: {
                actionParameters: {
                  A: 42,
                },
                precedingConversationSummary: 'Test string',
              },
              playbookOutput: {
                actionParameters: {
                  A: 42,
                },
                executionSummary: 'Test string',
              },
              playbookState: 'Test string',
            },
            toolUse: {
              action: 'Test string',
              displayName: 'Test string',
              inputActionParameters: {
                A: 42,
              },
              outputActionParameters: {
                A: 42,
              },
              tool: 'Test string',
            },
            userUtterance: {
              text: 'Test string',
            },
          },
        ],
        conversationState: 'Test string',
        createTime: 'Test string',
        description: 'Test string',
        displayName: 'Test string',
        languageCode: 'Test string',
        name: 'Test string',
        playbookInput: {
          actionParameters: {
            A: 42,
          },
          precedingConversationSummary: 'Test string',
        },
        playbookOutput: {
          actionParameters: {
            A: 42,
          },
          executionSummary: 'Test string',
        },
        tokenCount: 'Test string',
        updateTime: 'Test string',
      }
    );
    /** Creates a version for the specified Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.versions.create(
      {
        parent: 'Test string',
      },
      {
        description: 'Test string',
        examples: [
          {
            actions: [
              {
                agentUtterance: {
                  text: 'Test string',
                },
                flowInvocation: {
                  displayName: 'Test string',
                  flow: 'Test string',
                  flowState: 'Test string',
                  inputActionParameters: {
                    A: 42,
                  },
                  outputActionParameters: {
                    A: 42,
                  },
                },
                playbookInvocation: {
                  displayName: 'Test string',
                  playbook: 'Test string',
                  playbookInput: {
                    actionParameters: {
                      A: 42,
                    },
                    precedingConversationSummary: 'Test string',
                  },
                  playbookOutput: {
                    actionParameters: {
                      A: 42,
                    },
                    executionSummary: 'Test string',
                  },
                  playbookState: 'Test string',
                },
                toolUse: {
                  action: 'Test string',
                  displayName: 'Test string',
                  inputActionParameters: {
                    A: 42,
                  },
                  outputActionParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
                userUtterance: {
                  text: 'Test string',
                },
              },
            ],
            conversationState: 'Test string',
            createTime: 'Test string',
            description: 'Test string',
            displayName: 'Test string',
            languageCode: 'Test string',
            name: 'Test string',
            playbookInput: {
              actionParameters: {
                A: 42,
              },
              precedingConversationSummary: 'Test string',
            },
            playbookOutput: {
              actionParameters: {
                A: 42,
              },
              executionSummary: 'Test string',
            },
            tokenCount: 'Test string',
            updateTime: 'Test string',
          },
        ],
        name: 'Test string',
        playbook: {
          createTime: 'Test string',
          displayName: 'Test string',
          goal: 'Test string',
          inputParameterDefinitions: [
            {
              description: 'Test string',
              name: 'Test string',
              type: 'Test string',
              typeSchema: {
                inlineSchema: {
                  items: undefined,
                  type: 'Test string',
                },
                schemaReference: {
                  schema: 'Test string',
                  tool: 'Test string',
                },
              },
            },
          ],
          instruction: {
            guidelines: 'Test string',
            steps: [
              {
                steps: undefined,
                text: 'Test string',
              },
            ],
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          name: 'Test string',
          outputParameterDefinitions: [
            {
              description: 'Test string',
              name: 'Test string',
              type: 'Test string',
              typeSchema: {
                inlineSchema: {
                  items: undefined,
                  type: 'Test string',
                },
                schemaReference: {
                  schema: 'Test string',
                  tool: 'Test string',
                },
              },
            },
          ],
          referencedFlows: ['Test string'],
          referencedPlaybooks: ['Test string'],
          referencedTools: ['Test string'],
          speechSettings: {
            endpointerSensitivity: 42,
            models: {
              A: 'Test string',
            },
            noSpeechTimeout: 'Test string',
            useTimeoutBasedEndpointing: true,
          },
          tokenCount: 'Test string',
          updateTime: 'Test string',
        },
        updateTime: 'Test string',
      }
    );
    /** Deletes the specified version of the Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.versions.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified version of the Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.versions.get(
      {
        name: 'Test string',
      }
    );
    /** Lists versions for the specified Playbook. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.versions.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Retrieves the specified version of the Playbook and stores it as the current playbook draft, returning the playbook with resources updated. */
    await gapi.client.dialogflow.projects.locations.agents.playbooks.versions.restore(
      {
        name: 'Test string',
      },
      {}
    );
    /** Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version). */
    await gapi.client.dialogflow.projects.locations.agents.sessions.detectIntent(
      {
        session: 'Test string',
      },
      {
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        session: 'Test string',
      }
    );
    /** Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.fulfillIntent(
      {
        session: 'Test string',
      },
      {
        match: {
          confidence: 42,
          event: 'Test string',
          intent: {
            description: 'Test string',
            displayName: 'Test string',
            isFallback: true,
            labels: {
              A: 'Test string',
            },
            name: 'Test string',
            parameters: [
              {
                entityType: 'Test string',
                id: 'Test string',
                isList: true,
                redact: true,
              },
            ],
            priority: 42,
            trainingPhrases: [
              {
                id: 'Test string',
                parts: [
                  {
                    parameterId: 'Test string',
                    text: 'Test string',
                  },
                ],
                repeatCount: 42,
              },
            ],
          },
          matchType: 'Test string',
          parameters: {
            A: 42,
          },
          resolvedInput: 'Test string',
        },
        matchIntentRequest: {
          persistParameterChanges: true,
          queryInput: {
            audio: {
              audio: 'Test string',
              config: {
                audioEncoding: 'Test string',
                bargeInConfig: {
                  noBargeInDuration: 'Test string',
                  totalDuration: 'Test string',
                },
                enableWordInfo: true,
                model: 'Test string',
                modelVariant: 'Test string',
                optOutConformerModelMigration: true,
                phraseHints: ['Test string'],
                sampleRateHertz: 42,
                singleUtterance: true,
              },
            },
            dtmf: {
              digits: 'Test string',
              finishDigit: 'Test string',
            },
            event: {
              event: 'Test string',
            },
            intent: {
              intent: 'Test string',
            },
            languageCode: 'Test string',
            text: {
              text: 'Test string',
            },
            toolCallResult: {
              action: 'Test string',
              error: {
                message: 'Test string',
              },
              outputParameters: {
                A: 42,
              },
              tool: 'Test string',
            },
          },
          queryParams: {
            analyzeQueryTextSentiment: true,
            channel: 'Test string',
            currentPage: 'Test string',
            currentPlaybook: 'Test string',
            disableWebhook: true,
            endUserMetadata: {
              A: 42,
            },
            flowVersions: ['Test string'],
            geoLocation: {
              latitude: 42,
              longitude: 42,
            },
            llmModelSettings: {
              model: 'Test string',
              promptText: 'Test string',
            },
            parameters: {
              A: 42,
            },
            payload: {
              A: 42,
            },
            populateDataStoreConnectionSignals: true,
            searchConfig: {
              boostSpecs: [
                {
                  dataStores: ['Test string'],
                  spec: [
                    {
                      conditionBoostSpecs: [
                        {
                          boost: 42,
                          boostControlSpec: {
                            attributeType: 'Test string',
                            controlPoints: [
                              {
                                attributeValue: 'Test string',
                                boostAmount: 42,
                              },
                            ],
                            fieldName: 'Test string',
                            interpolationType: 'Test string',
                          },
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                },
              ],
              filterSpecs: [
                {
                  dataStores: ['Test string'],
                  filter: 'Test string',
                },
              ],
            },
            sessionEntityTypes: [
              {
                entities: [
                  {
                    synonyms: ['Test string'],
                    value: 'Test string',
                  },
                ],
                entityOverrideMode: 'Test string',
                name: 'Test string',
              },
            ],
            sessionTtl: 'Test string',
            timeZone: 'Test string',
            webhookHeaders: {
              A: 'Test string',
            },
          },
        },
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
      }
    );
    /** Returns preliminary intent match results, doesn't change the session status. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.matchIntent(
      {
        session: 'Test string',
      },
      {
        persistParameterChanges: true,
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
      }
    );
    /** Processes a natural language query and returns structured, actionable data as a result through server-side streaming. Server-side streaming allows Dialogflow to send [partial responses](https://cloud.google.com/dialogflow/cx/docs/concept/fulfillment#partial-response) earlier in a single request. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.serverStreamingDetectIntent(
      {
        session: 'Test string',
      },
      {
        outputAudioConfig: {
          audioEncoding: 'Test string',
          sampleRateHertz: 42,
          synthesizeSpeechConfig: {
            effectsProfileId: ['Test string'],
            pitch: 42,
            speakingRate: 42,
            voice: {
              name: 'Test string',
              ssmlGender: 'Test string',
            },
            volumeGainDb: 42,
          },
        },
        queryInput: {
          audio: {
            audio: 'Test string',
            config: {
              audioEncoding: 'Test string',
              bargeInConfig: {
                noBargeInDuration: 'Test string',
                totalDuration: 'Test string',
              },
              enableWordInfo: true,
              model: 'Test string',
              modelVariant: 'Test string',
              optOutConformerModelMigration: true,
              phraseHints: ['Test string'],
              sampleRateHertz: 42,
              singleUtterance: true,
            },
          },
          dtmf: {
            digits: 'Test string',
            finishDigit: 'Test string',
          },
          event: {
            event: 'Test string',
          },
          intent: {
            intent: 'Test string',
          },
          languageCode: 'Test string',
          text: {
            text: 'Test string',
          },
          toolCallResult: {
            action: 'Test string',
            error: {
              message: 'Test string',
            },
            outputParameters: {
              A: 42,
            },
            tool: 'Test string',
          },
        },
        queryParams: {
          analyzeQueryTextSentiment: true,
          channel: 'Test string',
          currentPage: 'Test string',
          currentPlaybook: 'Test string',
          disableWebhook: true,
          endUserMetadata: {
            A: 42,
          },
          flowVersions: ['Test string'],
          geoLocation: {
            latitude: 42,
            longitude: 42,
          },
          llmModelSettings: {
            model: 'Test string',
            promptText: 'Test string',
          },
          parameters: {
            A: 42,
          },
          payload: {
            A: 42,
          },
          populateDataStoreConnectionSignals: true,
          searchConfig: {
            boostSpecs: [
              {
                dataStores: ['Test string'],
                spec: [
                  {
                    conditionBoostSpecs: [
                      {
                        boost: 42,
                        boostControlSpec: {
                          attributeType: 'Test string',
                          controlPoints: [
                            {
                              attributeValue: 'Test string',
                              boostAmount: 42,
                            },
                          ],
                          fieldName: 'Test string',
                          interpolationType: 'Test string',
                        },
                        condition: 'Test string',
                      },
                    ],
                  },
                ],
              },
            ],
            filterSpecs: [
              {
                dataStores: ['Test string'],
                filter: 'Test string',
              },
            ],
          },
          sessionEntityTypes: [
            {
              entities: [
                {
                  synonyms: ['Test string'],
                  value: 'Test string',
                },
              ],
              entityOverrideMode: 'Test string',
              name: 'Test string',
            },
          ],
          sessionTtl: 'Test string',
          timeZone: 'Test string',
          webhookHeaders: {
            A: 'Test string',
          },
        },
        session: 'Test string',
      }
    );
    /** Updates the feedback received from the user for a single turn of the bot response. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.submitAnswerFeedback(
      {
        session: 'Test string',
      },
      {
        answerFeedback: {
          customRating: 'Test string',
          rating: 'Test string',
          ratingReason: {
            feedback: 'Test string',
            reasonLabels: ['Test string'],
          },
        },
        responseId: 'Test string',
        updateMask: 'Test string',
      }
    );
    /** Creates a session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.entityTypes.create(
      {
        parent: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Deletes the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.entityTypes.delete(
      {
        name: 'Test string',
      }
    );
    /** Retrieves the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.entityTypes.get(
      {
        name: 'Test string',
      }
    );
    /** Returns the list of all session entity types in the specified session. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.entityTypes.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified session entity type. */
    await gapi.client.dialogflow.projects.locations.agents.sessions.entityTypes.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        entities: [
          {
            synonyms: ['Test string'],
            value: 'Test string',
          },
        ],
        entityOverrideMode: 'Test string',
        name: 'Test string',
      }
    );
    /** Batch deletes test cases. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.batchDelete(
      {
        parent: 'Test string',
      },
      {
        names: ['Test string'],
      }
    );
    /** Kicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse */
    await gapi.client.dialogflow.projects.locations.agents.testCases.batchRun(
      {
        parent: 'Test string',
      },
      {
        environment: 'Test string',
        testCases: ['Test string'],
      }
    );
    /** Calculates the test coverage for an agent. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.calculateCoverage(
      {
        agent: 'Test string',
        type: 'Test string',
      }
    );
    /** Creates a test case for the given agent. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.create(
      {
        parent: 'Test string',
      },
      {
        creationTime: 'Test string',
        displayName: 'Test string',
        lastTestResult: {
          conversationTurns: [
            {
              userInput: {
                enableSentimentAnalysis: true,
                injectedParameters: {
                  A: 42,
                },
                input: {
                  audio: {
                    audio: 'Test string',
                    config: {
                      audioEncoding: 'Test string',
                      bargeInConfig: {
                        noBargeInDuration: 'Test string',
                        totalDuration: 'Test string',
                      },
                      enableWordInfo: true,
                      model: 'Test string',
                      modelVariant: 'Test string',
                      optOutConformerModelMigration: true,
                      phraseHints: ['Test string'],
                      sampleRateHertz: 42,
                      singleUtterance: true,
                    },
                  },
                  dtmf: {
                    digits: 'Test string',
                    finishDigit: 'Test string',
                  },
                  event: {
                    event: 'Test string',
                  },
                  intent: {
                    intent: 'Test string',
                  },
                  languageCode: 'Test string',
                  text: {
                    text: 'Test string',
                  },
                  toolCallResult: {
                    action: 'Test string',
                    error: {
                      message: 'Test string',
                    },
                    outputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
                isWebhookEnabled: true,
              },
              virtualAgentOutput: {
                currentPage: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  entryFulfillment: {
                    advancedSettings: {
                      audioExportGcsDestination: {
                        uri: 'Test string',
                      },
                      dtmfSettings: {
                        enabled: true,
                        endpointingTimeoutDuration: 'Test string',
                        finishDigit: 'Test string',
                        interdigitTimeoutDuration: 'Test string',
                        maxDigits: 42,
                      },
                      loggingSettings: {
                        enableConsentBasedRedaction: true,
                        enableInteractionLogging: true,
                        enableStackdriverLogging: true,
                      },
                      speechSettings: {
                        endpointerSensitivity: 42,
                        models: {
                          A: 'Test string',
                        },
                        noSpeechTimeout: 'Test string',
                        useTimeoutBasedEndpointing: true,
                      },
                    },
                    conditionalCases: [
                      {
                        cases: [
                          {
                            caseContent: [
                              {
                                additionalCases: undefined,
                                message: {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              },
                            ],
                            condition: 'Test string',
                          },
                        ],
                      },
                    ],
                    enableGenerativeFallback: true,
                    messages: [
                      {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    ],
                    returnPartialResponses: true,
                    setParameterActions: [
                      {
                        parameter: 'Test string',
                        value: 42,
                      },
                    ],
                    tag: 'Test string',
                    webhook: 'Test string',
                  },
                  eventHandlers: [
                    {
                      event: 'Test string',
                      name: 'Test string',
                      targetFlow: 'Test string',
                      targetPage: 'Test string',
                      targetPlaybook: 'Test string',
                      triggerFulfillment: {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        conditionalCases: [
                          {
                            cases: [
                              {
                                caseContent: [
                                  {
                                    additionalCases: undefined,
                                    message: {
                                      channel: 'Test string',
                                      conversationSuccess: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      endInteraction: {},
                                      knowledgeInfoCard: {},
                                      liveAgentHandoff: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      mixedAudio: {
                                        segments: [
                                          {
                                            allowPlaybackInterruption: true,
                                            audio: 'Test string',
                                            uri: 'Test string',
                                          },
                                        ],
                                      },
                                      outputAudioText: {
                                        allowPlaybackInterruption: true,
                                        ssml: 'Test string',
                                        text: 'Test string',
                                      },
                                      payload: {
                                        A: 42,
                                      },
                                      playAudio: {
                                        allowPlaybackInterruption: true,
                                        audioUri: 'Test string',
                                      },
                                      telephonyTransferCall: {
                                        phoneNumber: 'Test string',
                                      },
                                      text: {
                                        allowPlaybackInterruption: true,
                                        text: ['Test string'],
                                      },
                                      toolCall: {
                                        action: 'Test string',
                                        inputParameters: {
                                          A: 42,
                                        },
                                        tool: 'Test string',
                                      },
                                    },
                                  },
                                ],
                                condition: 'Test string',
                              },
                            ],
                          },
                        ],
                        enableGenerativeFallback: true,
                        messages: [
                          {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        ],
                        returnPartialResponses: true,
                        setParameterActions: [
                          {
                            parameter: 'Test string',
                            value: 42,
                          },
                        ],
                        tag: 'Test string',
                        webhook: 'Test string',
                      },
                    },
                  ],
                  form: {
                    parameters: [
                      {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        defaultValue: 42,
                        displayName: 'Test string',
                        entityType: 'Test string',
                        fillBehavior: {
                          initialPromptFulfillment: {
                            advancedSettings: {
                              audioExportGcsDestination: {
                                uri: 'Test string',
                              },
                              dtmfSettings: {
                                enabled: true,
                                endpointingTimeoutDuration: 'Test string',
                                finishDigit: 'Test string',
                                interdigitTimeoutDuration: 'Test string',
                                maxDigits: 42,
                              },
                              loggingSettings: {
                                enableConsentBasedRedaction: true,
                                enableInteractionLogging: true,
                                enableStackdriverLogging: true,
                              },
                              speechSettings: {
                                endpointerSensitivity: 42,
                                models: {
                                  A: 'Test string',
                                },
                                noSpeechTimeout: 'Test string',
                                useTimeoutBasedEndpointing: true,
                              },
                            },
                            conditionalCases: [
                              {
                                cases: [
                                  {
                                    caseContent: [
                                      {
                                        additionalCases: undefined,
                                        message: {
                                          channel: 'Test string',
                                          conversationSuccess: {
                                            metadata: {
                                              A: 42,
                                            },
                                          },
                                          endInteraction: {},
                                          knowledgeInfoCard: {},
                                          liveAgentHandoff: {
                                            metadata: {
                                              A: 42,
                                            },
                                          },
                                          mixedAudio: {
                                            segments: [
                                              {
                                                allowPlaybackInterruption: true,
                                                audio: 'Test string',
                                                uri: 'Test string',
                                              },
                                            ],
                                          },
                                          outputAudioText: {
                                            allowPlaybackInterruption: true,
                                            ssml: 'Test string',
                                            text: 'Test string',
                                          },
                                          payload: {
                                            A: 42,
                                          },
                                          playAudio: {
                                            allowPlaybackInterruption: true,
                                            audioUri: 'Test string',
                                          },
                                          telephonyTransferCall: {
                                            phoneNumber: 'Test string',
                                          },
                                          text: {
                                            allowPlaybackInterruption: true,
                                            text: ['Test string'],
                                          },
                                          toolCall: {
                                            action: 'Test string',
                                            inputParameters: {
                                              A: 42,
                                            },
                                            tool: 'Test string',
                                          },
                                        },
                                      },
                                    ],
                                    condition: 'Test string',
                                  },
                                ],
                              },
                            ],
                            enableGenerativeFallback: true,
                            messages: [
                              {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            ],
                            returnPartialResponses: true,
                            setParameterActions: [
                              {
                                parameter: 'Test string',
                                value: 42,
                              },
                            ],
                            tag: 'Test string',
                            webhook: 'Test string',
                          },
                          repromptEventHandlers: [
                            {
                              event: 'Test string',
                              name: 'Test string',
                              targetFlow: 'Test string',
                              targetPage: 'Test string',
                              targetPlaybook: 'Test string',
                              triggerFulfillment: {
                                advancedSettings: {
                                  audioExportGcsDestination: {
                                    uri: 'Test string',
                                  },
                                  dtmfSettings: {
                                    enabled: true,
                                    endpointingTimeoutDuration: 'Test string',
                                    finishDigit: 'Test string',
                                    interdigitTimeoutDuration: 'Test string',
                                    maxDigits: 42,
                                  },
                                  loggingSettings: {
                                    enableConsentBasedRedaction: true,
                                    enableInteractionLogging: true,
                                    enableStackdriverLogging: true,
                                  },
                                  speechSettings: {
                                    endpointerSensitivity: 42,
                                    models: {
                                      A: 'Test string',
                                    },
                                    noSpeechTimeout: 'Test string',
                                    useTimeoutBasedEndpointing: true,
                                  },
                                },
                                conditionalCases: [
                                  {
                                    cases: [
                                      {
                                        caseContent: [
                                          {
                                            additionalCases: undefined,
                                            message: {
                                              channel: 'Test string',
                                              conversationSuccess: {
                                                metadata: {
                                                  A: 42,
                                                },
                                              },
                                              endInteraction: {},
                                              knowledgeInfoCard: {},
                                              liveAgentHandoff: {
                                                metadata: {
                                                  A: 42,
                                                },
                                              },
                                              mixedAudio: {
                                                segments: [
                                                  {
                                                    allowPlaybackInterruption:
                                                      true,
                                                    audio: 'Test string',
                                                    uri: 'Test string',
                                                  },
                                                ],
                                              },
                                              outputAudioText: {
                                                allowPlaybackInterruption: true,
                                                ssml: 'Test string',
                                                text: 'Test string',
                                              },
                                              payload: {
                                                A: 42,
                                              },
                                              playAudio: {
                                                allowPlaybackInterruption: true,
                                                audioUri: 'Test string',
                                              },
                                              telephonyTransferCall: {
                                                phoneNumber: 'Test string',
                                              },
                                              text: {
                                                allowPlaybackInterruption: true,
                                                text: ['Test string'],
                                              },
                                              toolCall: {
                                                action: 'Test string',
                                                inputParameters: {
                                                  A: 42,
                                                },
                                                tool: 'Test string',
                                              },
                                            },
                                          },
                                        ],
                                        condition: 'Test string',
                                      },
                                    ],
                                  },
                                ],
                                enableGenerativeFallback: true,
                                messages: [
                                  {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                ],
                                returnPartialResponses: true,
                                setParameterActions: [
                                  {
                                    parameter: 'Test string',
                                    value: 42,
                                  },
                                ],
                                tag: 'Test string',
                                webhook: 'Test string',
                              },
                            },
                          ],
                        },
                        isList: true,
                        redact: true,
                        required: true,
                      },
                    ],
                  },
                  knowledgeConnectorSettings: {
                    dataStoreConnections: [
                      {
                        dataStore: 'Test string',
                        dataStoreType: 'Test string',
                      },
                    ],
                    enabled: true,
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                  name: 'Test string',
                  transitionRouteGroups: ['Test string'],
                  transitionRoutes: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      intent: 'Test string',
                      name: 'Test string',
                      targetFlow: 'Test string',
                      targetPage: 'Test string',
                      triggerFulfillment: {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        conditionalCases: [
                          {
                            cases: [
                              {
                                caseContent: [
                                  {
                                    additionalCases: undefined,
                                    message: {
                                      channel: 'Test string',
                                      conversationSuccess: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      endInteraction: {},
                                      knowledgeInfoCard: {},
                                      liveAgentHandoff: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      mixedAudio: {
                                        segments: [
                                          {
                                            allowPlaybackInterruption: true,
                                            audio: 'Test string',
                                            uri: 'Test string',
                                          },
                                        ],
                                      },
                                      outputAudioText: {
                                        allowPlaybackInterruption: true,
                                        ssml: 'Test string',
                                        text: 'Test string',
                                      },
                                      payload: {
                                        A: 42,
                                      },
                                      playAudio: {
                                        allowPlaybackInterruption: true,
                                        audioUri: 'Test string',
                                      },
                                      telephonyTransferCall: {
                                        phoneNumber: 'Test string',
                                      },
                                      text: {
                                        allowPlaybackInterruption: true,
                                        text: ['Test string'],
                                      },
                                      toolCall: {
                                        action: 'Test string',
                                        inputParameters: {
                                          A: 42,
                                        },
                                        tool: 'Test string',
                                      },
                                    },
                                  },
                                ],
                                condition: 'Test string',
                              },
                            ],
                          },
                        ],
                        enableGenerativeFallback: true,
                        messages: [
                          {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        ],
                        returnPartialResponses: true,
                        setParameterActions: [
                          {
                            parameter: 'Test string',
                            value: 42,
                          },
                        ],
                        tag: 'Test string',
                        webhook: 'Test string',
                      },
                    },
                  ],
                },
                diagnosticInfo: {
                  A: 42,
                },
                differences: [
                  {
                    description: 'Test string',
                    type: 'Test string',
                  },
                ],
                sessionParameters: {
                  A: 42,
                },
                status: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                textResponses: [
                  {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                ],
                triggeredIntent: {
                  description: 'Test string',
                  displayName: 'Test string',
                  isFallback: true,
                  labels: {
                    A: 'Test string',
                  },
                  name: 'Test string',
                  parameters: [
                    {
                      entityType: 'Test string',
                      id: 'Test string',
                      isList: true,
                      redact: true,
                    },
                  ],
                  priority: 42,
                  trainingPhrases: [
                    {
                      id: 'Test string',
                      parts: [
                        {
                          parameterId: 'Test string',
                          text: 'Test string',
                        },
                      ],
                      repeatCount: 42,
                    },
                  ],
                },
              },
            },
          ],
          environment: 'Test string',
          name: 'Test string',
          testResult: 'Test string',
          testTime: 'Test string',
        },
        name: 'Test string',
        notes: 'Test string',
        tags: ['Test string'],
        testCaseConversationTurns: [
          {
            userInput: {
              enableSentimentAnalysis: true,
              injectedParameters: {
                A: 42,
              },
              input: {
                audio: {
                  audio: 'Test string',
                  config: {
                    audioEncoding: 'Test string',
                    bargeInConfig: {
                      noBargeInDuration: 'Test string',
                      totalDuration: 'Test string',
                    },
                    enableWordInfo: true,
                    model: 'Test string',
                    modelVariant: 'Test string',
                    optOutConformerModelMigration: true,
                    phraseHints: ['Test string'],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                  },
                },
                dtmf: {
                  digits: 'Test string',
                  finishDigit: 'Test string',
                },
                event: {
                  event: 'Test string',
                },
                intent: {
                  intent: 'Test string',
                },
                languageCode: 'Test string',
                text: {
                  text: 'Test string',
                },
                toolCallResult: {
                  action: 'Test string',
                  error: {
                    message: 'Test string',
                  },
                  outputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
              isWebhookEnabled: true,
            },
            virtualAgentOutput: {
              currentPage: {
                advancedSettings: {
                  audioExportGcsDestination: {
                    uri: 'Test string',
                  },
                  dtmfSettings: {
                    enabled: true,
                    endpointingTimeoutDuration: 'Test string',
                    finishDigit: 'Test string',
                    interdigitTimeoutDuration: 'Test string',
                    maxDigits: 42,
                  },
                  loggingSettings: {
                    enableConsentBasedRedaction: true,
                    enableInteractionLogging: true,
                    enableStackdriverLogging: true,
                  },
                  speechSettings: {
                    endpointerSensitivity: 42,
                    models: {
                      A: 'Test string',
                    },
                    noSpeechTimeout: 'Test string',
                    useTimeoutBasedEndpointing: true,
                  },
                },
                description: 'Test string',
                displayName: 'Test string',
                entryFulfillment: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  conditionalCases: [
                    {
                      cases: [
                        {
                          caseContent: [
                            {
                              additionalCases: undefined,
                              message: {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            },
                          ],
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                  enableGenerativeFallback: true,
                  messages: [
                    {
                      channel: 'Test string',
                      conversationSuccess: {
                        metadata: {
                          A: 42,
                        },
                      },
                      endInteraction: {},
                      knowledgeInfoCard: {},
                      liveAgentHandoff: {
                        metadata: {
                          A: 42,
                        },
                      },
                      mixedAudio: {
                        segments: [
                          {
                            allowPlaybackInterruption: true,
                            audio: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      outputAudioText: {
                        allowPlaybackInterruption: true,
                        ssml: 'Test string',
                        text: 'Test string',
                      },
                      payload: {
                        A: 42,
                      },
                      playAudio: {
                        allowPlaybackInterruption: true,
                        audioUri: 'Test string',
                      },
                      telephonyTransferCall: {
                        phoneNumber: 'Test string',
                      },
                      text: {
                        allowPlaybackInterruption: true,
                        text: ['Test string'],
                      },
                      toolCall: {
                        action: 'Test string',
                        inputParameters: {
                          A: 42,
                        },
                        tool: 'Test string',
                      },
                    },
                  ],
                  returnPartialResponses: true,
                  setParameterActions: [
                    {
                      parameter: 'Test string',
                      value: 42,
                    },
                  ],
                  tag: 'Test string',
                  webhook: 'Test string',
                },
                eventHandlers: [
                  {
                    event: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    targetPlaybook: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
                form: {
                  parameters: [
                    {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      defaultValue: 42,
                      displayName: 'Test string',
                      entityType: 'Test string',
                      fillBehavior: {
                        initialPromptFulfillment: {
                          advancedSettings: {
                            audioExportGcsDestination: {
                              uri: 'Test string',
                            },
                            dtmfSettings: {
                              enabled: true,
                              endpointingTimeoutDuration: 'Test string',
                              finishDigit: 'Test string',
                              interdigitTimeoutDuration: 'Test string',
                              maxDigits: 42,
                            },
                            loggingSettings: {
                              enableConsentBasedRedaction: true,
                              enableInteractionLogging: true,
                              enableStackdriverLogging: true,
                            },
                            speechSettings: {
                              endpointerSensitivity: 42,
                              models: {
                                A: 'Test string',
                              },
                              noSpeechTimeout: 'Test string',
                              useTimeoutBasedEndpointing: true,
                            },
                          },
                          conditionalCases: [
                            {
                              cases: [
                                {
                                  caseContent: [
                                    {
                                      additionalCases: undefined,
                                      message: {
                                        channel: 'Test string',
                                        conversationSuccess: {
                                          metadata: {
                                            A: 42,
                                          },
                                        },
                                        endInteraction: {},
                                        knowledgeInfoCard: {},
                                        liveAgentHandoff: {
                                          metadata: {
                                            A: 42,
                                          },
                                        },
                                        mixedAudio: {
                                          segments: [
                                            {
                                              allowPlaybackInterruption: true,
                                              audio: 'Test string',
                                              uri: 'Test string',
                                            },
                                          ],
                                        },
                                        outputAudioText: {
                                          allowPlaybackInterruption: true,
                                          ssml: 'Test string',
                                          text: 'Test string',
                                        },
                                        payload: {
                                          A: 42,
                                        },
                                        playAudio: {
                                          allowPlaybackInterruption: true,
                                          audioUri: 'Test string',
                                        },
                                        telephonyTransferCall: {
                                          phoneNumber: 'Test string',
                                        },
                                        text: {
                                          allowPlaybackInterruption: true,
                                          text: ['Test string'],
                                        },
                                        toolCall: {
                                          action: 'Test string',
                                          inputParameters: {
                                            A: 42,
                                          },
                                          tool: 'Test string',
                                        },
                                      },
                                    },
                                  ],
                                  condition: 'Test string',
                                },
                              ],
                            },
                          ],
                          enableGenerativeFallback: true,
                          messages: [
                            {
                              channel: 'Test string',
                              conversationSuccess: {
                                metadata: {
                                  A: 42,
                                },
                              },
                              endInteraction: {},
                              knowledgeInfoCard: {},
                              liveAgentHandoff: {
                                metadata: {
                                  A: 42,
                                },
                              },
                              mixedAudio: {
                                segments: [
                                  {
                                    allowPlaybackInterruption: true,
                                    audio: 'Test string',
                                    uri: 'Test string',
                                  },
                                ],
                              },
                              outputAudioText: {
                                allowPlaybackInterruption: true,
                                ssml: 'Test string',
                                text: 'Test string',
                              },
                              payload: {
                                A: 42,
                              },
                              playAudio: {
                                allowPlaybackInterruption: true,
                                audioUri: 'Test string',
                              },
                              telephonyTransferCall: {
                                phoneNumber: 'Test string',
                              },
                              text: {
                                allowPlaybackInterruption: true,
                                text: ['Test string'],
                              },
                              toolCall: {
                                action: 'Test string',
                                inputParameters: {
                                  A: 42,
                                },
                                tool: 'Test string',
                              },
                            },
                          ],
                          returnPartialResponses: true,
                          setParameterActions: [
                            {
                              parameter: 'Test string',
                              value: 42,
                            },
                          ],
                          tag: 'Test string',
                          webhook: 'Test string',
                        },
                        repromptEventHandlers: [
                          {
                            event: 'Test string',
                            name: 'Test string',
                            targetFlow: 'Test string',
                            targetPage: 'Test string',
                            targetPlaybook: 'Test string',
                            triggerFulfillment: {
                              advancedSettings: {
                                audioExportGcsDestination: {
                                  uri: 'Test string',
                                },
                                dtmfSettings: {
                                  enabled: true,
                                  endpointingTimeoutDuration: 'Test string',
                                  finishDigit: 'Test string',
                                  interdigitTimeoutDuration: 'Test string',
                                  maxDigits: 42,
                                },
                                loggingSettings: {
                                  enableConsentBasedRedaction: true,
                                  enableInteractionLogging: true,
                                  enableStackdriverLogging: true,
                                },
                                speechSettings: {
                                  endpointerSensitivity: 42,
                                  models: {
                                    A: 'Test string',
                                  },
                                  noSpeechTimeout: 'Test string',
                                  useTimeoutBasedEndpointing: true,
                                },
                              },
                              conditionalCases: [
                                {
                                  cases: [
                                    {
                                      caseContent: [
                                        {
                                          additionalCases: undefined,
                                          message: {
                                            channel: 'Test string',
                                            conversationSuccess: {
                                              metadata: {
                                                A: 42,
                                              },
                                            },
                                            endInteraction: {},
                                            knowledgeInfoCard: {},
                                            liveAgentHandoff: {
                                              metadata: {
                                                A: 42,
                                              },
                                            },
                                            mixedAudio: {
                                              segments: [
                                                {
                                                  allowPlaybackInterruption:
                                                    true,
                                                  audio: 'Test string',
                                                  uri: 'Test string',
                                                },
                                              ],
                                            },
                                            outputAudioText: {
                                              allowPlaybackInterruption: true,
                                              ssml: 'Test string',
                                              text: 'Test string',
                                            },
                                            payload: {
                                              A: 42,
                                            },
                                            playAudio: {
                                              allowPlaybackInterruption: true,
                                              audioUri: 'Test string',
                                            },
                                            telephonyTransferCall: {
                                              phoneNumber: 'Test string',
                                            },
                                            text: {
                                              allowPlaybackInterruption: true,
                                              text: ['Test string'],
                                            },
                                            toolCall: {
                                              action: 'Test string',
                                              inputParameters: {
                                                A: 42,
                                              },
                                              tool: 'Test string',
                                            },
                                          },
                                        },
                                      ],
                                      condition: 'Test string',
                                    },
                                  ],
                                },
                              ],
                              enableGenerativeFallback: true,
                              messages: [
                                {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              ],
                              returnPartialResponses: true,
                              setParameterActions: [
                                {
                                  parameter: 'Test string',
                                  value: 42,
                                },
                              ],
                              tag: 'Test string',
                              webhook: 'Test string',
                            },
                          },
                        ],
                      },
                      isList: true,
                      redact: true,
                      required: true,
                    },
                  ],
                },
                knowledgeConnectorSettings: {
                  dataStoreConnections: [
                    {
                      dataStore: 'Test string',
                      dataStoreType: 'Test string',
                    },
                  ],
                  enabled: true,
                  targetFlow: 'Test string',
                  targetPage: 'Test string',
                  triggerFulfillment: {
                    advancedSettings: {
                      audioExportGcsDestination: {
                        uri: 'Test string',
                      },
                      dtmfSettings: {
                        enabled: true,
                        endpointingTimeoutDuration: 'Test string',
                        finishDigit: 'Test string',
                        interdigitTimeoutDuration: 'Test string',
                        maxDigits: 42,
                      },
                      loggingSettings: {
                        enableConsentBasedRedaction: true,
                        enableInteractionLogging: true,
                        enableStackdriverLogging: true,
                      },
                      speechSettings: {
                        endpointerSensitivity: 42,
                        models: {
                          A: 'Test string',
                        },
                        noSpeechTimeout: 'Test string',
                        useTimeoutBasedEndpointing: true,
                      },
                    },
                    conditionalCases: [
                      {
                        cases: [
                          {
                            caseContent: [
                              {
                                additionalCases: undefined,
                                message: {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              },
                            ],
                            condition: 'Test string',
                          },
                        ],
                      },
                    ],
                    enableGenerativeFallback: true,
                    messages: [
                      {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    ],
                    returnPartialResponses: true,
                    setParameterActions: [
                      {
                        parameter: 'Test string',
                        value: 42,
                      },
                    ],
                    tag: 'Test string',
                    webhook: 'Test string',
                  },
                },
                name: 'Test string',
                transitionRouteGroups: ['Test string'],
                transitionRoutes: [
                  {
                    condition: 'Test string',
                    description: 'Test string',
                    intent: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
              },
              diagnosticInfo: {
                A: 42,
              },
              differences: [
                {
                  description: 'Test string',
                  type: 'Test string',
                },
              ],
              sessionParameters: {
                A: 42,
              },
              status: {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
              textResponses: [
                {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
              ],
              triggeredIntent: {
                description: 'Test string',
                displayName: 'Test string',
                isFallback: true,
                labels: {
                  A: 'Test string',
                },
                name: 'Test string',
                parameters: [
                  {
                    entityType: 'Test string',
                    id: 'Test string',
                    isList: true,
                    redact: true,
                  },
                ],
                priority: 42,
                trainingPhrases: [
                  {
                    id: 'Test string',
                    parts: [
                      {
                        parameterId: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    repeatCount: 42,
                  },
                ],
              },
            },
          },
        ],
        testConfig: {
          flow: 'Test string',
          page: 'Test string',
          trackingParameters: ['Test string'],
        },
      }
    );
    /** Exports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse */
    await gapi.client.dialogflow.projects.locations.agents.testCases.export(
      {
        parent: 'Test string',
      },
      {
        dataFormat: 'Test string',
        filter: 'Test string',
        gcsUri: 'Test string',
      }
    );
    /** Gets a test case. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.get({
      name: 'Test string',
    });
    /** Imports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwrite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse */
    await gapi.client.dialogflow.projects.locations.agents.testCases.import(
      {
        parent: 'Test string',
      },
      {
        content: 'Test string',
        gcsUri: 'Test string',
      }
    );
    /** Fetches a list of test cases for a given agent. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
      view: 'Test string',
    });
    /** Updates the specified test case. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        creationTime: 'Test string',
        displayName: 'Test string',
        lastTestResult: {
          conversationTurns: [
            {
              userInput: {
                enableSentimentAnalysis: true,
                injectedParameters: {
                  A: 42,
                },
                input: {
                  audio: {
                    audio: 'Test string',
                    config: {
                      audioEncoding: 'Test string',
                      bargeInConfig: {
                        noBargeInDuration: 'Test string',
                        totalDuration: 'Test string',
                      },
                      enableWordInfo: true,
                      model: 'Test string',
                      modelVariant: 'Test string',
                      optOutConformerModelMigration: true,
                      phraseHints: ['Test string'],
                      sampleRateHertz: 42,
                      singleUtterance: true,
                    },
                  },
                  dtmf: {
                    digits: 'Test string',
                    finishDigit: 'Test string',
                  },
                  event: {
                    event: 'Test string',
                  },
                  intent: {
                    intent: 'Test string',
                  },
                  languageCode: 'Test string',
                  text: {
                    text: 'Test string',
                  },
                  toolCallResult: {
                    action: 'Test string',
                    error: {
                      message: 'Test string',
                    },
                    outputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
                isWebhookEnabled: true,
              },
              virtualAgentOutput: {
                currentPage: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  description: 'Test string',
                  displayName: 'Test string',
                  entryFulfillment: {
                    advancedSettings: {
                      audioExportGcsDestination: {
                        uri: 'Test string',
                      },
                      dtmfSettings: {
                        enabled: true,
                        endpointingTimeoutDuration: 'Test string',
                        finishDigit: 'Test string',
                        interdigitTimeoutDuration: 'Test string',
                        maxDigits: 42,
                      },
                      loggingSettings: {
                        enableConsentBasedRedaction: true,
                        enableInteractionLogging: true,
                        enableStackdriverLogging: true,
                      },
                      speechSettings: {
                        endpointerSensitivity: 42,
                        models: {
                          A: 'Test string',
                        },
                        noSpeechTimeout: 'Test string',
                        useTimeoutBasedEndpointing: true,
                      },
                    },
                    conditionalCases: [
                      {
                        cases: [
                          {
                            caseContent: [
                              {
                                additionalCases: undefined,
                                message: {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              },
                            ],
                            condition: 'Test string',
                          },
                        ],
                      },
                    ],
                    enableGenerativeFallback: true,
                    messages: [
                      {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    ],
                    returnPartialResponses: true,
                    setParameterActions: [
                      {
                        parameter: 'Test string',
                        value: 42,
                      },
                    ],
                    tag: 'Test string',
                    webhook: 'Test string',
                  },
                  eventHandlers: [
                    {
                      event: 'Test string',
                      name: 'Test string',
                      targetFlow: 'Test string',
                      targetPage: 'Test string',
                      targetPlaybook: 'Test string',
                      triggerFulfillment: {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        conditionalCases: [
                          {
                            cases: [
                              {
                                caseContent: [
                                  {
                                    additionalCases: undefined,
                                    message: {
                                      channel: 'Test string',
                                      conversationSuccess: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      endInteraction: {},
                                      knowledgeInfoCard: {},
                                      liveAgentHandoff: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      mixedAudio: {
                                        segments: [
                                          {
                                            allowPlaybackInterruption: true,
                                            audio: 'Test string',
                                            uri: 'Test string',
                                          },
                                        ],
                                      },
                                      outputAudioText: {
                                        allowPlaybackInterruption: true,
                                        ssml: 'Test string',
                                        text: 'Test string',
                                      },
                                      payload: {
                                        A: 42,
                                      },
                                      playAudio: {
                                        allowPlaybackInterruption: true,
                                        audioUri: 'Test string',
                                      },
                                      telephonyTransferCall: {
                                        phoneNumber: 'Test string',
                                      },
                                      text: {
                                        allowPlaybackInterruption: true,
                                        text: ['Test string'],
                                      },
                                      toolCall: {
                                        action: 'Test string',
                                        inputParameters: {
                                          A: 42,
                                        },
                                        tool: 'Test string',
                                      },
                                    },
                                  },
                                ],
                                condition: 'Test string',
                              },
                            ],
                          },
                        ],
                        enableGenerativeFallback: true,
                        messages: [
                          {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        ],
                        returnPartialResponses: true,
                        setParameterActions: [
                          {
                            parameter: 'Test string',
                            value: 42,
                          },
                        ],
                        tag: 'Test string',
                        webhook: 'Test string',
                      },
                    },
                  ],
                  form: {
                    parameters: [
                      {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        defaultValue: 42,
                        displayName: 'Test string',
                        entityType: 'Test string',
                        fillBehavior: {
                          initialPromptFulfillment: {
                            advancedSettings: {
                              audioExportGcsDestination: {
                                uri: 'Test string',
                              },
                              dtmfSettings: {
                                enabled: true,
                                endpointingTimeoutDuration: 'Test string',
                                finishDigit: 'Test string',
                                interdigitTimeoutDuration: 'Test string',
                                maxDigits: 42,
                              },
                              loggingSettings: {
                                enableConsentBasedRedaction: true,
                                enableInteractionLogging: true,
                                enableStackdriverLogging: true,
                              },
                              speechSettings: {
                                endpointerSensitivity: 42,
                                models: {
                                  A: 'Test string',
                                },
                                noSpeechTimeout: 'Test string',
                                useTimeoutBasedEndpointing: true,
                              },
                            },
                            conditionalCases: [
                              {
                                cases: [
                                  {
                                    caseContent: [
                                      {
                                        additionalCases: undefined,
                                        message: {
                                          channel: 'Test string',
                                          conversationSuccess: {
                                            metadata: {
                                              A: 42,
                                            },
                                          },
                                          endInteraction: {},
                                          knowledgeInfoCard: {},
                                          liveAgentHandoff: {
                                            metadata: {
                                              A: 42,
                                            },
                                          },
                                          mixedAudio: {
                                            segments: [
                                              {
                                                allowPlaybackInterruption: true,
                                                audio: 'Test string',
                                                uri: 'Test string',
                                              },
                                            ],
                                          },
                                          outputAudioText: {
                                            allowPlaybackInterruption: true,
                                            ssml: 'Test string',
                                            text: 'Test string',
                                          },
                                          payload: {
                                            A: 42,
                                          },
                                          playAudio: {
                                            allowPlaybackInterruption: true,
                                            audioUri: 'Test string',
                                          },
                                          telephonyTransferCall: {
                                            phoneNumber: 'Test string',
                                          },
                                          text: {
                                            allowPlaybackInterruption: true,
                                            text: ['Test string'],
                                          },
                                          toolCall: {
                                            action: 'Test string',
                                            inputParameters: {
                                              A: 42,
                                            },
                                            tool: 'Test string',
                                          },
                                        },
                                      },
                                    ],
                                    condition: 'Test string',
                                  },
                                ],
                              },
                            ],
                            enableGenerativeFallback: true,
                            messages: [
                              {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            ],
                            returnPartialResponses: true,
                            setParameterActions: [
                              {
                                parameter: 'Test string',
                                value: 42,
                              },
                            ],
                            tag: 'Test string',
                            webhook: 'Test string',
                          },
                          repromptEventHandlers: [
                            {
                              event: 'Test string',
                              name: 'Test string',
                              targetFlow: 'Test string',
                              targetPage: 'Test string',
                              targetPlaybook: 'Test string',
                              triggerFulfillment: {
                                advancedSettings: {
                                  audioExportGcsDestination: {
                                    uri: 'Test string',
                                  },
                                  dtmfSettings: {
                                    enabled: true,
                                    endpointingTimeoutDuration: 'Test string',
                                    finishDigit: 'Test string',
                                    interdigitTimeoutDuration: 'Test string',
                                    maxDigits: 42,
                                  },
                                  loggingSettings: {
                                    enableConsentBasedRedaction: true,
                                    enableInteractionLogging: true,
                                    enableStackdriverLogging: true,
                                  },
                                  speechSettings: {
                                    endpointerSensitivity: 42,
                                    models: {
                                      A: 'Test string',
                                    },
                                    noSpeechTimeout: 'Test string',
                                    useTimeoutBasedEndpointing: true,
                                  },
                                },
                                conditionalCases: [
                                  {
                                    cases: [
                                      {
                                        caseContent: [
                                          {
                                            additionalCases: undefined,
                                            message: {
                                              channel: 'Test string',
                                              conversationSuccess: {
                                                metadata: {
                                                  A: 42,
                                                },
                                              },
                                              endInteraction: {},
                                              knowledgeInfoCard: {},
                                              liveAgentHandoff: {
                                                metadata: {
                                                  A: 42,
                                                },
                                              },
                                              mixedAudio: {
                                                segments: [
                                                  {
                                                    allowPlaybackInterruption:
                                                      true,
                                                    audio: 'Test string',
                                                    uri: 'Test string',
                                                  },
                                                ],
                                              },
                                              outputAudioText: {
                                                allowPlaybackInterruption: true,
                                                ssml: 'Test string',
                                                text: 'Test string',
                                              },
                                              payload: {
                                                A: 42,
                                              },
                                              playAudio: {
                                                allowPlaybackInterruption: true,
                                                audioUri: 'Test string',
                                              },
                                              telephonyTransferCall: {
                                                phoneNumber: 'Test string',
                                              },
                                              text: {
                                                allowPlaybackInterruption: true,
                                                text: ['Test string'],
                                              },
                                              toolCall: {
                                                action: 'Test string',
                                                inputParameters: {
                                                  A: 42,
                                                },
                                                tool: 'Test string',
                                              },
                                            },
                                          },
                                        ],
                                        condition: 'Test string',
                                      },
                                    ],
                                  },
                                ],
                                enableGenerativeFallback: true,
                                messages: [
                                  {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                ],
                                returnPartialResponses: true,
                                setParameterActions: [
                                  {
                                    parameter: 'Test string',
                                    value: 42,
                                  },
                                ],
                                tag: 'Test string',
                                webhook: 'Test string',
                              },
                            },
                          ],
                        },
                        isList: true,
                        redact: true,
                        required: true,
                      },
                    ],
                  },
                  knowledgeConnectorSettings: {
                    dataStoreConnections: [
                      {
                        dataStore: 'Test string',
                        dataStoreType: 'Test string',
                      },
                    ],
                    enabled: true,
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                  name: 'Test string',
                  transitionRouteGroups: ['Test string'],
                  transitionRoutes: [
                    {
                      condition: 'Test string',
                      description: 'Test string',
                      intent: 'Test string',
                      name: 'Test string',
                      targetFlow: 'Test string',
                      targetPage: 'Test string',
                      triggerFulfillment: {
                        advancedSettings: {
                          audioExportGcsDestination: {
                            uri: 'Test string',
                          },
                          dtmfSettings: {
                            enabled: true,
                            endpointingTimeoutDuration: 'Test string',
                            finishDigit: 'Test string',
                            interdigitTimeoutDuration: 'Test string',
                            maxDigits: 42,
                          },
                          loggingSettings: {
                            enableConsentBasedRedaction: true,
                            enableInteractionLogging: true,
                            enableStackdriverLogging: true,
                          },
                          speechSettings: {
                            endpointerSensitivity: 42,
                            models: {
                              A: 'Test string',
                            },
                            noSpeechTimeout: 'Test string',
                            useTimeoutBasedEndpointing: true,
                          },
                        },
                        conditionalCases: [
                          {
                            cases: [
                              {
                                caseContent: [
                                  {
                                    additionalCases: undefined,
                                    message: {
                                      channel: 'Test string',
                                      conversationSuccess: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      endInteraction: {},
                                      knowledgeInfoCard: {},
                                      liveAgentHandoff: {
                                        metadata: {
                                          A: 42,
                                        },
                                      },
                                      mixedAudio: {
                                        segments: [
                                          {
                                            allowPlaybackInterruption: true,
                                            audio: 'Test string',
                                            uri: 'Test string',
                                          },
                                        ],
                                      },
                                      outputAudioText: {
                                        allowPlaybackInterruption: true,
                                        ssml: 'Test string',
                                        text: 'Test string',
                                      },
                                      payload: {
                                        A: 42,
                                      },
                                      playAudio: {
                                        allowPlaybackInterruption: true,
                                        audioUri: 'Test string',
                                      },
                                      telephonyTransferCall: {
                                        phoneNumber: 'Test string',
                                      },
                                      text: {
                                        allowPlaybackInterruption: true,
                                        text: ['Test string'],
                                      },
                                      toolCall: {
                                        action: 'Test string',
                                        inputParameters: {
                                          A: 42,
                                        },
                                        tool: 'Test string',
                                      },
                                    },
                                  },
                                ],
                                condition: 'Test string',
                              },
                            ],
                          },
                        ],
                        enableGenerativeFallback: true,
                        messages: [
                          {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        ],
                        returnPartialResponses: true,
                        setParameterActions: [
                          {
                            parameter: 'Test string',
                            value: 42,
                          },
                        ],
                        tag: 'Test string',
                        webhook: 'Test string',
                      },
                    },
                  ],
                },
                diagnosticInfo: {
                  A: 42,
                },
                differences: [
                  {
                    description: 'Test string',
                    type: 'Test string',
                  },
                ],
                sessionParameters: {
                  A: 42,
                },
                status: {
                  code: 42,
                  details: [
                    {
                      A: 42,
                    },
                  ],
                  message: 'Test string',
                },
                textResponses: [
                  {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                ],
                triggeredIntent: {
                  description: 'Test string',
                  displayName: 'Test string',
                  isFallback: true,
                  labels: {
                    A: 'Test string',
                  },
                  name: 'Test string',
                  parameters: [
                    {
                      entityType: 'Test string',
                      id: 'Test string',
                      isList: true,
                      redact: true,
                    },
                  ],
                  priority: 42,
                  trainingPhrases: [
                    {
                      id: 'Test string',
                      parts: [
                        {
                          parameterId: 'Test string',
                          text: 'Test string',
                        },
                      ],
                      repeatCount: 42,
                    },
                  ],
                },
              },
            },
          ],
          environment: 'Test string',
          name: 'Test string',
          testResult: 'Test string',
          testTime: 'Test string',
        },
        name: 'Test string',
        notes: 'Test string',
        tags: ['Test string'],
        testCaseConversationTurns: [
          {
            userInput: {
              enableSentimentAnalysis: true,
              injectedParameters: {
                A: 42,
              },
              input: {
                audio: {
                  audio: 'Test string',
                  config: {
                    audioEncoding: 'Test string',
                    bargeInConfig: {
                      noBargeInDuration: 'Test string',
                      totalDuration: 'Test string',
                    },
                    enableWordInfo: true,
                    model: 'Test string',
                    modelVariant: 'Test string',
                    optOutConformerModelMigration: true,
                    phraseHints: ['Test string'],
                    sampleRateHertz: 42,
                    singleUtterance: true,
                  },
                },
                dtmf: {
                  digits: 'Test string',
                  finishDigit: 'Test string',
                },
                event: {
                  event: 'Test string',
                },
                intent: {
                  intent: 'Test string',
                },
                languageCode: 'Test string',
                text: {
                  text: 'Test string',
                },
                toolCallResult: {
                  action: 'Test string',
                  error: {
                    message: 'Test string',
                  },
                  outputParameters: {
                    A: 42,
                  },
                  tool: 'Test string',
                },
              },
              isWebhookEnabled: true,
            },
            virtualAgentOutput: {
              currentPage: {
                advancedSettings: {
                  audioExportGcsDestination: {
                    uri: 'Test string',
                  },
                  dtmfSettings: {
                    enabled: true,
                    endpointingTimeoutDuration: 'Test string',
                    finishDigit: 'Test string',
                    interdigitTimeoutDuration: 'Test string',
                    maxDigits: 42,
                  },
                  loggingSettings: {
                    enableConsentBasedRedaction: true,
                    enableInteractionLogging: true,
                    enableStackdriverLogging: true,
                  },
                  speechSettings: {
                    endpointerSensitivity: 42,
                    models: {
                      A: 'Test string',
                    },
                    noSpeechTimeout: 'Test string',
                    useTimeoutBasedEndpointing: true,
                  },
                },
                description: 'Test string',
                displayName: 'Test string',
                entryFulfillment: {
                  advancedSettings: {
                    audioExportGcsDestination: {
                      uri: 'Test string',
                    },
                    dtmfSettings: {
                      enabled: true,
                      endpointingTimeoutDuration: 'Test string',
                      finishDigit: 'Test string',
                      interdigitTimeoutDuration: 'Test string',
                      maxDigits: 42,
                    },
                    loggingSettings: {
                      enableConsentBasedRedaction: true,
                      enableInteractionLogging: true,
                      enableStackdriverLogging: true,
                    },
                    speechSettings: {
                      endpointerSensitivity: 42,
                      models: {
                        A: 'Test string',
                      },
                      noSpeechTimeout: 'Test string',
                      useTimeoutBasedEndpointing: true,
                    },
                  },
                  conditionalCases: [
                    {
                      cases: [
                        {
                          caseContent: [
                            {
                              additionalCases: undefined,
                              message: {
                                channel: 'Test string',
                                conversationSuccess: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                endInteraction: {},
                                knowledgeInfoCard: {},
                                liveAgentHandoff: {
                                  metadata: {
                                    A: 42,
                                  },
                                },
                                mixedAudio: {
                                  segments: [
                                    {
                                      allowPlaybackInterruption: true,
                                      audio: 'Test string',
                                      uri: 'Test string',
                                    },
                                  ],
                                },
                                outputAudioText: {
                                  allowPlaybackInterruption: true,
                                  ssml: 'Test string',
                                  text: 'Test string',
                                },
                                payload: {
                                  A: 42,
                                },
                                playAudio: {
                                  allowPlaybackInterruption: true,
                                  audioUri: 'Test string',
                                },
                                telephonyTransferCall: {
                                  phoneNumber: 'Test string',
                                },
                                text: {
                                  allowPlaybackInterruption: true,
                                  text: ['Test string'],
                                },
                                toolCall: {
                                  action: 'Test string',
                                  inputParameters: {
                                    A: 42,
                                  },
                                  tool: 'Test string',
                                },
                              },
                            },
                          ],
                          condition: 'Test string',
                        },
                      ],
                    },
                  ],
                  enableGenerativeFallback: true,
                  messages: [
                    {
                      channel: 'Test string',
                      conversationSuccess: {
                        metadata: {
                          A: 42,
                        },
                      },
                      endInteraction: {},
                      knowledgeInfoCard: {},
                      liveAgentHandoff: {
                        metadata: {
                          A: 42,
                        },
                      },
                      mixedAudio: {
                        segments: [
                          {
                            allowPlaybackInterruption: true,
                            audio: 'Test string',
                            uri: 'Test string',
                          },
                        ],
                      },
                      outputAudioText: {
                        allowPlaybackInterruption: true,
                        ssml: 'Test string',
                        text: 'Test string',
                      },
                      payload: {
                        A: 42,
                      },
                      playAudio: {
                        allowPlaybackInterruption: true,
                        audioUri: 'Test string',
                      },
                      telephonyTransferCall: {
                        phoneNumber: 'Test string',
                      },
                      text: {
                        allowPlaybackInterruption: true,
                        text: ['Test string'],
                      },
                      toolCall: {
                        action: 'Test string',
                        inputParameters: {
                          A: 42,
                        },
                        tool: 'Test string',
                      },
                    },
                  ],
                  returnPartialResponses: true,
                  setParameterActions: [
                    {
                      parameter: 'Test string',
                      value: 42,
                    },
                  ],
                  tag: 'Test string',
                  webhook: 'Test string',
                },
                eventHandlers: [
                  {
                    event: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    targetPlaybook: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
                form: {
                  parameters: [
                    {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      defaultValue: 42,
                      displayName: 'Test string',
                      entityType: 'Test string',
                      fillBehavior: {
                        initialPromptFulfillment: {
                          advancedSettings: {
                            audioExportGcsDestination: {
                              uri: 'Test string',
                            },
                            dtmfSettings: {
                              enabled: true,
                              endpointingTimeoutDuration: 'Test string',
                              finishDigit: 'Test string',
                              interdigitTimeoutDuration: 'Test string',
                              maxDigits: 42,
                            },
                            loggingSettings: {
                              enableConsentBasedRedaction: true,
                              enableInteractionLogging: true,
                              enableStackdriverLogging: true,
                            },
                            speechSettings: {
                              endpointerSensitivity: 42,
                              models: {
                                A: 'Test string',
                              },
                              noSpeechTimeout: 'Test string',
                              useTimeoutBasedEndpointing: true,
                            },
                          },
                          conditionalCases: [
                            {
                              cases: [
                                {
                                  caseContent: [
                                    {
                                      additionalCases: undefined,
                                      message: {
                                        channel: 'Test string',
                                        conversationSuccess: {
                                          metadata: {
                                            A: 42,
                                          },
                                        },
                                        endInteraction: {},
                                        knowledgeInfoCard: {},
                                        liveAgentHandoff: {
                                          metadata: {
                                            A: 42,
                                          },
                                        },
                                        mixedAudio: {
                                          segments: [
                                            {
                                              allowPlaybackInterruption: true,
                                              audio: 'Test string',
                                              uri: 'Test string',
                                            },
                                          ],
                                        },
                                        outputAudioText: {
                                          allowPlaybackInterruption: true,
                                          ssml: 'Test string',
                                          text: 'Test string',
                                        },
                                        payload: {
                                          A: 42,
                                        },
                                        playAudio: {
                                          allowPlaybackInterruption: true,
                                          audioUri: 'Test string',
                                        },
                                        telephonyTransferCall: {
                                          phoneNumber: 'Test string',
                                        },
                                        text: {
                                          allowPlaybackInterruption: true,
                                          text: ['Test string'],
                                        },
                                        toolCall: {
                                          action: 'Test string',
                                          inputParameters: {
                                            A: 42,
                                          },
                                          tool: 'Test string',
                                        },
                                      },
                                    },
                                  ],
                                  condition: 'Test string',
                                },
                              ],
                            },
                          ],
                          enableGenerativeFallback: true,
                          messages: [
                            {
                              channel: 'Test string',
                              conversationSuccess: {
                                metadata: {
                                  A: 42,
                                },
                              },
                              endInteraction: {},
                              knowledgeInfoCard: {},
                              liveAgentHandoff: {
                                metadata: {
                                  A: 42,
                                },
                              },
                              mixedAudio: {
                                segments: [
                                  {
                                    allowPlaybackInterruption: true,
                                    audio: 'Test string',
                                    uri: 'Test string',
                                  },
                                ],
                              },
                              outputAudioText: {
                                allowPlaybackInterruption: true,
                                ssml: 'Test string',
                                text: 'Test string',
                              },
                              payload: {
                                A: 42,
                              },
                              playAudio: {
                                allowPlaybackInterruption: true,
                                audioUri: 'Test string',
                              },
                              telephonyTransferCall: {
                                phoneNumber: 'Test string',
                              },
                              text: {
                                allowPlaybackInterruption: true,
                                text: ['Test string'],
                              },
                              toolCall: {
                                action: 'Test string',
                                inputParameters: {
                                  A: 42,
                                },
                                tool: 'Test string',
                              },
                            },
                          ],
                          returnPartialResponses: true,
                          setParameterActions: [
                            {
                              parameter: 'Test string',
                              value: 42,
                            },
                          ],
                          tag: 'Test string',
                          webhook: 'Test string',
                        },
                        repromptEventHandlers: [
                          {
                            event: 'Test string',
                            name: 'Test string',
                            targetFlow: 'Test string',
                            targetPage: 'Test string',
                            targetPlaybook: 'Test string',
                            triggerFulfillment: {
                              advancedSettings: {
                                audioExportGcsDestination: {
                                  uri: 'Test string',
                                },
                                dtmfSettings: {
                                  enabled: true,
                                  endpointingTimeoutDuration: 'Test string',
                                  finishDigit: 'Test string',
                                  interdigitTimeoutDuration: 'Test string',
                                  maxDigits: 42,
                                },
                                loggingSettings: {
                                  enableConsentBasedRedaction: true,
                                  enableInteractionLogging: true,
                                  enableStackdriverLogging: true,
                                },
                                speechSettings: {
                                  endpointerSensitivity: 42,
                                  models: {
                                    A: 'Test string',
                                  },
                                  noSpeechTimeout: 'Test string',
                                  useTimeoutBasedEndpointing: true,
                                },
                              },
                              conditionalCases: [
                                {
                                  cases: [
                                    {
                                      caseContent: [
                                        {
                                          additionalCases: undefined,
                                          message: {
                                            channel: 'Test string',
                                            conversationSuccess: {
                                              metadata: {
                                                A: 42,
                                              },
                                            },
                                            endInteraction: {},
                                            knowledgeInfoCard: {},
                                            liveAgentHandoff: {
                                              metadata: {
                                                A: 42,
                                              },
                                            },
                                            mixedAudio: {
                                              segments: [
                                                {
                                                  allowPlaybackInterruption:
                                                    true,
                                                  audio: 'Test string',
                                                  uri: 'Test string',
                                                },
                                              ],
                                            },
                                            outputAudioText: {
                                              allowPlaybackInterruption: true,
                                              ssml: 'Test string',
                                              text: 'Test string',
                                            },
                                            payload: {
                                              A: 42,
                                            },
                                            playAudio: {
                                              allowPlaybackInterruption: true,
                                              audioUri: 'Test string',
                                            },
                                            telephonyTransferCall: {
                                              phoneNumber: 'Test string',
                                            },
                                            text: {
                                              allowPlaybackInterruption: true,
                                              text: ['Test string'],
                                            },
                                            toolCall: {
                                              action: 'Test string',
                                              inputParameters: {
                                                A: 42,
                                              },
                                              tool: 'Test string',
                                            },
                                          },
                                        },
                                      ],
                                      condition: 'Test string',
                                    },
                                  ],
                                },
                              ],
                              enableGenerativeFallback: true,
                              messages: [
                                {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              ],
                              returnPartialResponses: true,
                              setParameterActions: [
                                {
                                  parameter: 'Test string',
                                  value: 42,
                                },
                              ],
                              tag: 'Test string',
                              webhook: 'Test string',
                            },
                          },
                        ],
                      },
                      isList: true,
                      redact: true,
                      required: true,
                    },
                  ],
                },
                knowledgeConnectorSettings: {
                  dataStoreConnections: [
                    {
                      dataStore: 'Test string',
                      dataStoreType: 'Test string',
                    },
                  ],
                  enabled: true,
                  targetFlow: 'Test string',
                  targetPage: 'Test string',
                  triggerFulfillment: {
                    advancedSettings: {
                      audioExportGcsDestination: {
                        uri: 'Test string',
                      },
                      dtmfSettings: {
                        enabled: true,
                        endpointingTimeoutDuration: 'Test string',
                        finishDigit: 'Test string',
                        interdigitTimeoutDuration: 'Test string',
                        maxDigits: 42,
                      },
                      loggingSettings: {
                        enableConsentBasedRedaction: true,
                        enableInteractionLogging: true,
                        enableStackdriverLogging: true,
                      },
                      speechSettings: {
                        endpointerSensitivity: 42,
                        models: {
                          A: 'Test string',
                        },
                        noSpeechTimeout: 'Test string',
                        useTimeoutBasedEndpointing: true,
                      },
                    },
                    conditionalCases: [
                      {
                        cases: [
                          {
                            caseContent: [
                              {
                                additionalCases: undefined,
                                message: {
                                  channel: 'Test string',
                                  conversationSuccess: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  endInteraction: {},
                                  knowledgeInfoCard: {},
                                  liveAgentHandoff: {
                                    metadata: {
                                      A: 42,
                                    },
                                  },
                                  mixedAudio: {
                                    segments: [
                                      {
                                        allowPlaybackInterruption: true,
                                        audio: 'Test string',
                                        uri: 'Test string',
                                      },
                                    ],
                                  },
                                  outputAudioText: {
                                    allowPlaybackInterruption: true,
                                    ssml: 'Test string',
                                    text: 'Test string',
                                  },
                                  payload: {
                                    A: 42,
                                  },
                                  playAudio: {
                                    allowPlaybackInterruption: true,
                                    audioUri: 'Test string',
                                  },
                                  telephonyTransferCall: {
                                    phoneNumber: 'Test string',
                                  },
                                  text: {
                                    allowPlaybackInterruption: true,
                                    text: ['Test string'],
                                  },
                                  toolCall: {
                                    action: 'Test string',
                                    inputParameters: {
                                      A: 42,
                                    },
                                    tool: 'Test string',
                                  },
                                },
                              },
                            ],
                            condition: 'Test string',
                          },
                        ],
                      },
                    ],
                    enableGenerativeFallback: true,
                    messages: [
                      {
                        channel: 'Test string',
                        conversationSuccess: {
                          metadata: {
                            A: 42,
                          },
                        },
                        endInteraction: {},
                        knowledgeInfoCard: {},
                        liveAgentHandoff: {
                          metadata: {
                            A: 42,
                          },
                        },
                        mixedAudio: {
                          segments: [
                            {
                              allowPlaybackInterruption: true,
                              audio: 'Test string',
                              uri: 'Test string',
                            },
                          ],
                        },
                        outputAudioText: {
                          allowPlaybackInterruption: true,
                          ssml: 'Test string',
                          text: 'Test string',
                        },
                        payload: {
                          A: 42,
                        },
                        playAudio: {
                          allowPlaybackInterruption: true,
                          audioUri: 'Test string',
                        },
                        telephonyTransferCall: {
                          phoneNumber: 'Test string',
                        },
                        text: {
                          allowPlaybackInterruption: true,
                          text: ['Test string'],
                        },
                        toolCall: {
                          action: 'Test string',
                          inputParameters: {
                            A: 42,
                          },
                          tool: 'Test string',
                        },
                      },
                    ],
                    returnPartialResponses: true,
                    setParameterActions: [
                      {
                        parameter: 'Test string',
                        value: 42,
                      },
                    ],
                    tag: 'Test string',
                    webhook: 'Test string',
                  },
                },
                name: 'Test string',
                transitionRouteGroups: ['Test string'],
                transitionRoutes: [
                  {
                    condition: 'Test string',
                    description: 'Test string',
                    intent: 'Test string',
                    name: 'Test string',
                    targetFlow: 'Test string',
                    targetPage: 'Test string',
                    triggerFulfillment: {
                      advancedSettings: {
                        audioExportGcsDestination: {
                          uri: 'Test string',
                        },
                        dtmfSettings: {
                          enabled: true,
                          endpointingTimeoutDuration: 'Test string',
                          finishDigit: 'Test string',
                          interdigitTimeoutDuration: 'Test string',
                          maxDigits: 42,
                        },
                        loggingSettings: {
                          enableConsentBasedRedaction: true,
                          enableInteractionLogging: true,
                          enableStackdriverLogging: true,
                        },
                        speechSettings: {
                          endpointerSensitivity: 42,
                          models: {
                            A: 'Test string',
                          },
                          noSpeechTimeout: 'Test string',
                          useTimeoutBasedEndpointing: true,
                        },
                      },
                      conditionalCases: [
                        {
                          cases: [
                            {
                              caseContent: [
                                {
                                  additionalCases: undefined,
                                  message: {
                                    channel: 'Test string',
                                    conversationSuccess: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    endInteraction: {},
                                    knowledgeInfoCard: {},
                                    liveAgentHandoff: {
                                      metadata: {
                                        A: 42,
                                      },
                                    },
                                    mixedAudio: {
                                      segments: [
                                        {
                                          allowPlaybackInterruption: true,
                                          audio: 'Test string',
                                          uri: 'Test string',
                                        },
                                      ],
                                    },
                                    outputAudioText: {
                                      allowPlaybackInterruption: true,
                                      ssml: 'Test string',
                                      text: 'Test string',
                                    },
                                    payload: {
                                      A: 42,
                                    },
                                    playAudio: {
                                      allowPlaybackInterruption: true,
                                      audioUri: 'Test string',
                                    },
                                    telephonyTransferCall: {
                                      phoneNumber: 'Test string',
                                    },
                                    text: {
                                      allowPlaybackInterruption: true,
                                      text: ['Test string'],
                                    },
                                    toolCall: {
                                      action: 'Test string',
                                      inputParameters: {
                                        A: 42,
                                      },
                                      tool: 'Test string',
                                    },
                                  },
                                },
                              ],
                              condition: 'Test string',
                            },
                          ],
                        },
                      ],
                      enableGenerativeFallback: true,
                      messages: [
                        {
                          channel: 'Test string',
                          conversationSuccess: {
                            metadata: {
                              A: 42,
                            },
                          },
                          endInteraction: {},
                          knowledgeInfoCard: {},
                          liveAgentHandoff: {
                            metadata: {
                              A: 42,
                            },
                          },
                          mixedAudio: {
                            segments: [
                              {
                                allowPlaybackInterruption: true,
                                audio: 'Test string',
                                uri: 'Test string',
                              },
                            ],
                          },
                          outputAudioText: {
                            allowPlaybackInterruption: true,
                            ssml: 'Test string',
                            text: 'Test string',
                          },
                          payload: {
                            A: 42,
                          },
                          playAudio: {
                            allowPlaybackInterruption: true,
                            audioUri: 'Test string',
                          },
                          telephonyTransferCall: {
                            phoneNumber: 'Test string',
                          },
                          text: {
                            allowPlaybackInterruption: true,
                            text: ['Test string'],
                          },
                          toolCall: {
                            action: 'Test string',
                            inputParameters: {
                              A: 42,
                            },
                            tool: 'Test string',
                          },
                        },
                      ],
                      returnPartialResponses: true,
                      setParameterActions: [
                        {
                          parameter: 'Test string',
                          value: 42,
                        },
                      ],
                      tag: 'Test string',
                      webhook: 'Test string',
                    },
                  },
                ],
              },
              diagnosticInfo: {
                A: 42,
              },
              differences: [
                {
                  description: 'Test string',
                  type: 'Test string',
                },
              ],
              sessionParameters: {
                A: 42,
              },
              status: {
                code: 42,
                details: [
                  {
                    A: 42,
                  },
                ],
                message: 'Test string',
              },
              textResponses: [
                {
                  allowPlaybackInterruption: true,
                  text: ['Test string'],
                },
              ],
              triggeredIntent: {
                description: 'Test string',
                displayName: 'Test string',
                isFallback: true,
                labels: {
                  A: 'Test string',
                },
                name: 'Test string',
                parameters: [
                  {
                    entityType: 'Test string',
                    id: 'Test string',
                    isList: true,
                    redact: true,
                  },
                ],
                priority: 42,
                trainingPhrases: [
                  {
                    id: 'Test string',
                    parts: [
                      {
                        parameterId: 'Test string',
                        text: 'Test string',
                      },
                    ],
                    repeatCount: 42,
                  },
                ],
              },
            },
          },
        ],
        testConfig: {
          flow: 'Test string',
          page: 'Test string',
          trackingParameters: ['Test string'],
        },
      }
    );
    /** Kicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse */
    await gapi.client.dialogflow.projects.locations.agents.testCases.run(
      {
        name: 'Test string',
      },
      {
        environment: 'Test string',
      }
    );
    /** Gets a test case result. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.results.get(
      {
        name: 'Test string',
      }
    );
    /** Fetches the list of run results for the given test case. A maximum of 100 results are kept for each test case. */
    await gapi.client.dialogflow.projects.locations.agents.testCases.results.list(
      {
        filter: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Creates a Tool in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.tools.create(
      {
        parent: 'Test string',
      },
      {
        dataStoreSpec: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          fallbackPrompt: {},
        },
        description: 'Test string',
        displayName: 'Test string',
        extensionSpec: {
          name: 'Test string',
        },
        functionSpec: {
          inputSchema: {
            A: 42,
          },
          outputSchema: {
            A: 42,
          },
        },
        name: 'Test string',
        openApiSpec: {
          authentication: {
            apiKeyConfig: {
              apiKey: 'Test string',
              keyName: 'Test string',
              requestLocation: 'Test string',
            },
            bearerTokenConfig: {
              token: 'Test string',
            },
            oauthConfig: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              oauthGrantType: 'Test string',
              scopes: ['Test string'],
              tokenEndpoint: 'Test string',
            },
            serviceAgentAuthConfig: {
              serviceAgentAuth: 'Test string',
            },
          },
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          textSchema: 'Test string',
          tlsConfig: {
            caCerts: [
              {
                cert: 'Test string',
                displayName: 'Test string',
              },
            ],
          },
        },
        toolType: 'Test string',
      }
    );
    /** Deletes a specified Tool. */
    await gapi.client.dialogflow.projects.locations.agents.tools.delete({
      force: true,
      name: 'Test string',
    });
    /** Exports the selected tools. */
    await gapi.client.dialogflow.projects.locations.agents.tools.export(
      {
        parent: 'Test string',
      },
      {
        dataFormat: 'Test string',
        tools: ['Test string'],
        toolsContentInline: true,
        toolsUri: 'Test string',
      }
    );
    /** Retrieves the specified Tool. */
    await gapi.client.dialogflow.projects.locations.agents.tools.get({
      name: 'Test string',
    });
    /** Returns a list of Tools in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.tools.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Update the specified Tool. */
    await gapi.client.dialogflow.projects.locations.agents.tools.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataStoreSpec: {
          dataStoreConnections: [
            {
              dataStore: 'Test string',
              dataStoreType: 'Test string',
            },
          ],
          fallbackPrompt: {},
        },
        description: 'Test string',
        displayName: 'Test string',
        extensionSpec: {
          name: 'Test string',
        },
        functionSpec: {
          inputSchema: {
            A: 42,
          },
          outputSchema: {
            A: 42,
          },
        },
        name: 'Test string',
        openApiSpec: {
          authentication: {
            apiKeyConfig: {
              apiKey: 'Test string',
              keyName: 'Test string',
              requestLocation: 'Test string',
            },
            bearerTokenConfig: {
              token: 'Test string',
            },
            oauthConfig: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              oauthGrantType: 'Test string',
              scopes: ['Test string'],
              tokenEndpoint: 'Test string',
            },
            serviceAgentAuthConfig: {
              serviceAgentAuth: 'Test string',
            },
          },
          serviceDirectoryConfig: {
            service: 'Test string',
          },
          textSchema: 'Test string',
          tlsConfig: {
            caCerts: [
              {
                cert: 'Test string',
                displayName: 'Test string',
              },
            ],
          },
        },
        toolType: 'Test string',
      }
    );
    /** Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.transitionRouteGroups.create(
      {
        languageCode: 'Test string',
        parent: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Deletes the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.transitionRouteGroups.delete(
      {
        force: true,
        name: 'Test string',
      }
    );
    /** Retrieves the specified TransitionRouteGroup. */
    await gapi.client.dialogflow.projects.locations.agents.transitionRouteGroups.get(
      {
        languageCode: 'Test string',
        name: 'Test string',
      }
    );
    /** Returns the list of all transition route groups in the specified flow. */
    await gapi.client.dialogflow.projects.locations.agents.transitionRouteGroups.list(
      {
        languageCode: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      }
    );
    /** Updates the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training). */
    await gapi.client.dialogflow.projects.locations.agents.transitionRouteGroups.patch(
      {
        languageCode: 'Test string',
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        displayName: 'Test string',
        name: 'Test string',
        transitionRoutes: [
          {
            condition: 'Test string',
            description: 'Test string',
            intent: 'Test string',
            name: 'Test string',
            targetFlow: 'Test string',
            targetPage: 'Test string',
            triggerFulfillment: {
              advancedSettings: {
                audioExportGcsDestination: {
                  uri: 'Test string',
                },
                dtmfSettings: {
                  enabled: true,
                  endpointingTimeoutDuration: 'Test string',
                  finishDigit: 'Test string',
                  interdigitTimeoutDuration: 'Test string',
                  maxDigits: 42,
                },
                loggingSettings: {
                  enableConsentBasedRedaction: true,
                  enableInteractionLogging: true,
                  enableStackdriverLogging: true,
                },
                speechSettings: {
                  endpointerSensitivity: 42,
                  models: {
                    A: 'Test string',
                  },
                  noSpeechTimeout: 'Test string',
                  useTimeoutBasedEndpointing: true,
                },
              },
              conditionalCases: [
                {
                  cases: [
                    {
                      caseContent: [
                        {
                          additionalCases: undefined,
                          message: {
                            channel: 'Test string',
                            conversationSuccess: {
                              metadata: {
                                A: 42,
                              },
                            },
                            endInteraction: {},
                            knowledgeInfoCard: {},
                            liveAgentHandoff: {
                              metadata: {
                                A: 42,
                              },
                            },
                            mixedAudio: {
                              segments: [
                                {
                                  allowPlaybackInterruption: true,
                                  audio: 'Test string',
                                  uri: 'Test string',
                                },
                              ],
                            },
                            outputAudioText: {
                              allowPlaybackInterruption: true,
                              ssml: 'Test string',
                              text: 'Test string',
                            },
                            payload: {
                              A: 42,
                            },
                            playAudio: {
                              allowPlaybackInterruption: true,
                              audioUri: 'Test string',
                            },
                            telephonyTransferCall: {
                              phoneNumber: 'Test string',
                            },
                            text: {
                              allowPlaybackInterruption: true,
                              text: ['Test string'],
                            },
                            toolCall: {
                              action: 'Test string',
                              inputParameters: {
                                A: 42,
                              },
                              tool: 'Test string',
                            },
                          },
                        },
                      ],
                      condition: 'Test string',
                    },
                  ],
                },
              ],
              enableGenerativeFallback: true,
              messages: [
                {
                  channel: 'Test string',
                  conversationSuccess: {
                    metadata: {
                      A: 42,
                    },
                  },
                  endInteraction: {},
                  knowledgeInfoCard: {},
                  liveAgentHandoff: {
                    metadata: {
                      A: 42,
                    },
                  },
                  mixedAudio: {
                    segments: [
                      {
                        allowPlaybackInterruption: true,
                        audio: 'Test string',
                        uri: 'Test string',
                      },
                    ],
                  },
                  outputAudioText: {
                    allowPlaybackInterruption: true,
                    ssml: 'Test string',
                    text: 'Test string',
                  },
                  payload: {
                    A: 42,
                  },
                  playAudio: {
                    allowPlaybackInterruption: true,
                    audioUri: 'Test string',
                  },
                  telephonyTransferCall: {
                    phoneNumber: 'Test string',
                  },
                  text: {
                    allowPlaybackInterruption: true,
                    text: ['Test string'],
                  },
                  toolCall: {
                    action: 'Test string',
                    inputParameters: {
                      A: 42,
                    },
                    tool: 'Test string',
                  },
                },
              ],
              returnPartialResponses: true,
              setParameterActions: [
                {
                  parameter: 'Test string',
                  value: 42,
                },
              ],
              tag: 'Test string',
              webhook: 'Test string',
            },
          },
        ],
      }
    );
    /** Creates a webhook in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.webhooks.create(
      {
        parent: 'Test string',
      },
      {
        disabled: true,
        displayName: 'Test string',
        genericWebService: {
          allowedCaCerts: ['Test string'],
          httpMethod: 'Test string',
          oauthConfig: {
            clientId: 'Test string',
            clientSecret: 'Test string',
            scopes: ['Test string'],
            tokenEndpoint: 'Test string',
          },
          parameterMapping: {
            A: 'Test string',
          },
          password: 'Test string',
          requestBody: 'Test string',
          requestHeaders: {
            A: 'Test string',
          },
          serviceAgentAuth: 'Test string',
          uri: 'Test string',
          username: 'Test string',
          webhookType: 'Test string',
        },
        name: 'Test string',
        serviceDirectory: {
          genericWebService: {
            allowedCaCerts: ['Test string'],
            httpMethod: 'Test string',
            oauthConfig: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              scopes: ['Test string'],
              tokenEndpoint: 'Test string',
            },
            parameterMapping: {
              A: 'Test string',
            },
            password: 'Test string',
            requestBody: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            serviceAgentAuth: 'Test string',
            uri: 'Test string',
            username: 'Test string',
            webhookType: 'Test string',
          },
          service: 'Test string',
        },
        timeout: 'Test string',
      }
    );
    /** Deletes the specified webhook. */
    await gapi.client.dialogflow.projects.locations.agents.webhooks.delete({
      force: true,
      name: 'Test string',
    });
    /** Retrieves the specified webhook. */
    await gapi.client.dialogflow.projects.locations.agents.webhooks.get({
      name: 'Test string',
    });
    /** Returns the list of all webhooks in the specified agent. */
    await gapi.client.dialogflow.projects.locations.agents.webhooks.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified webhook. */
    await gapi.client.dialogflow.projects.locations.agents.webhooks.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        disabled: true,
        displayName: 'Test string',
        genericWebService: {
          allowedCaCerts: ['Test string'],
          httpMethod: 'Test string',
          oauthConfig: {
            clientId: 'Test string',
            clientSecret: 'Test string',
            scopes: ['Test string'],
            tokenEndpoint: 'Test string',
          },
          parameterMapping: {
            A: 'Test string',
          },
          password: 'Test string',
          requestBody: 'Test string',
          requestHeaders: {
            A: 'Test string',
          },
          serviceAgentAuth: 'Test string',
          uri: 'Test string',
          username: 'Test string',
          webhookType: 'Test string',
        },
        name: 'Test string',
        serviceDirectory: {
          genericWebService: {
            allowedCaCerts: ['Test string'],
            httpMethod: 'Test string',
            oauthConfig: {
              clientId: 'Test string',
              clientSecret: 'Test string',
              scopes: ['Test string'],
              tokenEndpoint: 'Test string',
            },
            parameterMapping: {
              A: 'Test string',
            },
            password: 'Test string',
            requestBody: 'Test string',
            requestHeaders: {
              A: 'Test string',
            },
            serviceAgentAuth: 'Test string',
            uri: 'Test string',
            username: 'Test string',
            webhookType: 'Test string',
          },
          service: 'Test string',
        },
        timeout: 'Test string',
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.dialogflow.projects.locations.operations.cancel({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dialogflow.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.dialogflow.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Create security settings in the specified location. */
    await gapi.client.dialogflow.projects.locations.securitySettings.create(
      {
        parent: 'Test string',
      },
      {
        audioExportSettings: {
          audioExportPattern: 'Test string',
          audioFormat: 'Test string',
          enableAudioRedaction: true,
          gcsBucket: 'Test string',
          storeTtsAudio: true,
        },
        deidentifyTemplate: 'Test string',
        displayName: 'Test string',
        insightsExportSettings: {
          enableInsightsExport: true,
        },
        inspectTemplate: 'Test string',
        name: 'Test string',
        purgeDataTypes: ['Test string'],
        redactionScope: 'Test string',
        redactionStrategy: 'Test string',
        retentionStrategy: 'Test string',
        retentionWindowDays: 42,
      }
    );
    /** Deletes the specified SecuritySettings. */
    await gapi.client.dialogflow.projects.locations.securitySettings.delete({
      name: 'Test string',
    });
    /** Retrieves the specified SecuritySettings. The returned settings may be stale by up to 1 minute. */
    await gapi.client.dialogflow.projects.locations.securitySettings.get({
      name: 'Test string',
    });
    /** Returns the list of all security settings in the specified location. */
    await gapi.client.dialogflow.projects.locations.securitySettings.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the specified SecuritySettings. */
    await gapi.client.dialogflow.projects.locations.securitySettings.patch(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        audioExportSettings: {
          audioExportPattern: 'Test string',
          audioFormat: 'Test string',
          enableAudioRedaction: true,
          gcsBucket: 'Test string',
          storeTtsAudio: true,
        },
        deidentifyTemplate: 'Test string',
        displayName: 'Test string',
        insightsExportSettings: {
          enableInsightsExport: true,
        },
        inspectTemplate: 'Test string',
        name: 'Test string',
        purgeDataTypes: ['Test string'],
        redactionScope: 'Test string',
        redactionStrategy: 'Test string',
        retentionStrategy: 'Test string',
        retentionWindowDays: 42,
      }
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.dialogflow.projects.operations.cancel({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.dialogflow.projects.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.dialogflow.projects.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
