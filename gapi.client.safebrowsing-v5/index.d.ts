/* Type definitions for non-npm package Safe Browsing API v5 0.0 */
// Project: https://developers.google.com/safe-browsing/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://safebrowsing.googleapis.com/$discovery/rest?version=v5
// Revision: 20240204

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Safe Browsing API v5 */
  function load(
    urlOrObject: 'https://safebrowsing.googleapis.com/$discovery/rest?version=v5'
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'safebrowsing', version: 'v5'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'safebrowsing', version: 'v5', callback: () => any): void;

  namespace safebrowsing {
    interface GoogleSecuritySafebrowsingV5FullHash {
      /** The matching full hash. This is the SHA256 hash. The length will be exactly 32 bytes. */
      fullHash?: string;
      /** Unordered list. A repeated field identifying the details relevant to this full hash. */
      fullHashDetails?: GoogleSecuritySafebrowsingV5FullHashFullHashDetail[];
    }
    interface GoogleSecuritySafebrowsingV5FullHashFullHashDetail {
      /** Unordered list. Additional attributes about those full hashes. This may be empty. */
      attributes?: string[];
      /** The type of threat. This field will never be empty. */
      threatType?: string;
    }
    interface GoogleSecuritySafebrowsingV5SearchHashesResponse {
      /** The client-side cache duration. The client shall add this duration to the current time to determine the expiration time. The expiration time then applies to every hash prefix queried by the client in the request, regardless of how many full hashes are returned in the response. Even if the server returns no full hashes for a particular hash prefix, this fact should also be cached by the client. Important: the client must not assume that the server will return the same cache duration for all responses. The server may choose different cache durations for different responses depending on the situation. */
      cacheDuration?: string;
      /** Unordered list. The unordered list of full hashes found. */
      fullHashes?: GoogleSecuritySafebrowsingV5FullHash[];
    }
    interface HashesResource {
      /** Search for full hashes matching the specified prefixes. This is a custom method as described by guidance at https://google.aip.dev/136 */
      search(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** Required. The hash prefixes to be looked up. */
        hashPrefixes?: string | string[];
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
      }): Request<GoogleSecuritySafebrowsingV5SearchHashesResponse>;
    }

    const hashes: HashesResource;
  }
}
