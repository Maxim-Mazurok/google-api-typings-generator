/* This is stub file for gapi.client.datapipelines-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221112

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://datapipelines.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.datapipelines */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Computes the schema for the transform. Computation from `raw_schema` will always occur if it is set. This requires that the transform supports that encoding. If no raw schema is
         * provided and if the transform is for an IO, then this will attempt to connect to the resource using the details provided in `config` and infer the schema from that. If the transform is
         * not an IO, is a sink that doesn't exist yet, or is a sink with no schema requirement, then this will fall back to basing the schema off the one provided in `input_schemas`. The computed
         * schema will be validated.
         */
        await gapi.client.datapipelines.projects.locations.computeSchema({
            location: "Test string",
        }, {
            config: {
                config: {
                    schema: {
                        localSchema: {
                            fields: [
                                {
                                    name: "Test string",
                                    type: {
                                        collectionElementType: undefined,
                                        logicalType: {
                                            enumerationType: {
                                                values: [
                                                    "Test string"
                                                ],
                                            },
                                            fixedBytes: {
                                                sizeBytes: 42,
                                            },
                                        },
                                        mapType: {
                                            mapKeyType: undefined,
                                            mapValueType: undefined,
                                        },
                                        nullable: true,
                                        rowSchema: undefined,
                                        type: "Test string",
                                    },
                                }
                            ],
                            referenceId: "Test string",
                        },
                        referenceId: "Test string",
                    },
                    values: [
                        {
                            arrayValue: {
                                elements: undefined,
                            },
                            atomicValue: {
                                booleanValue: true,
                                bytesValue: "Test string",
                                byteValue: 42,
                                datetimeValue: {
                                    day: 42,
                                    hours: 42,
                                    minutes: 42,
                                    month: 42,
                                    nanos: 42,
                                    seconds: 42,
                                    timeZone: {
                                        id: "Test string",
                                        version: "Test string",
                                    },
                                    utcOffset: "Test string",
                                    year: 42,
                                },
                                decimalValue: {
                                    value: "Test string",
                                },
                                doubleValue: 42,
                                floatValue: 42,
                                int16Value: 42,
                                int32Value: 42,
                                int64Value: "Test string",
                                stringValue: "Test string",
                            },
                            enumValue: {
                                name: "Test string",
                            },
                            fixedBytesValue: {
                                value: "Test string",
                            },
                            iterableValue: {
                                elements: undefined,
                            },
                            mapValue: {
                                entries: [
                                    {
                                        key: undefined,
                                        value: undefined,
                                    }
                                ],
                            },
                            rowValue: undefined,
                        }
                    ],
                },
                uniformResourceName: "Test string",
            },
            inputSchemas: [
                {
                    fields: [
                        {
                            name: "Test string",
                            type: {
                                collectionElementType: undefined,
                                logicalType: {
                                    enumerationType: {
                                        values: [
                                            "Test string"
                                        ],
                                    },
                                    fixedBytes: {
                                        sizeBytes: 42,
                                    },
                                },
                                mapType: {
                                    mapKeyType: undefined,
                                    mapValueType: undefined,
                                },
                                nullable: true,
                                rowSchema: undefined,
                                type: "Test string",
                            },
                        }
                    ],
                    referenceId: "Test string",
                }
            ],
            rawSchema: {
                rawSchema: "Test string",
                type: "Test string",
            },
        });
        /** Lists pipelines. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it. */
        await gapi.client.datapipelines.projects.locations.listPipelines({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Creates a pipeline. For a batch pipeline, you can pass scheduler information. Data Pipelines uses the scheduler information to create an internal scheduler that runs jobs periodically.
         * If the internal scheduler is not configured, you can use RunPipeline to run jobs.
         */
        await gapi.client.datapipelines.projects.locations.pipelines.create({
            parent: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            jobCount: 42,
            lastUpdateTime: "Test string",
            name: "Test string",
            pipelineSources: {
                A: "Test string"
            },
            scheduleInfo: {
                nextJobTime: "Test string",
                schedule: "Test string",
                timeZone: "Test string",
            },
            schedulerServiceAccountEmail: "Test string",
            state: "Test string",
            type: "Test string",
            workload: {
                dataflowFlexTemplateRequest: {
                    launchParameter: {
                        containerSpecGcsPath: "Test string",
                        environment: {
                            additionalExperiments: [
                                "Test string"
                            ],
                            additionalUserLabels: {
                                A: "Test string"
                            },
                            enableStreamingEngine: true,
                            flexrsGoal: "Test string",
                            ipConfiguration: "Test string",
                            kmsKeyName: "Test string",
                            machineType: "Test string",
                            maxWorkers: 42,
                            network: "Test string",
                            numWorkers: 42,
                            serviceAccountEmail: "Test string",
                            subnetwork: "Test string",
                            tempLocation: "Test string",
                            workerRegion: "Test string",
                            workerZone: "Test string",
                            zone: "Test string",
                        },
                        jobName: "Test string",
                        launchOptions: {
                            A: "Test string"
                        },
                        parameters: {
                            A: "Test string"
                        },
                        transformNameMappings: {
                            A: "Test string"
                        },
                        update: true,
                    },
                    location: "Test string",
                    projectId: "Test string",
                    validateOnly: true,
                },
                dataflowLaunchTemplateRequest: {
                    gcsPath: "Test string",
                    launchParameters: {
                        environment: {
                            additionalExperiments: [
                                "Test string"
                            ],
                            additionalUserLabels: {
                                A: "Test string"
                            },
                            bypassTempDirValidation: true,
                            enableStreamingEngine: true,
                            ipConfiguration: "Test string",
                            kmsKeyName: "Test string",
                            machineType: "Test string",
                            maxWorkers: 42,
                            network: "Test string",
                            numWorkers: 42,
                            serviceAccountEmail: "Test string",
                            subnetwork: "Test string",
                            tempLocation: "Test string",
                            workerRegion: "Test string",
                            workerZone: "Test string",
                            zone: "Test string",
                        },
                        jobName: "Test string",
                        parameters: {
                            A: "Test string"
                        },
                        transformNameMapping: {
                            A: "Test string"
                        },
                        update: true,
                    },
                    location: "Test string",
                    projectId: "Test string",
                    validateOnly: true,
                },
            },
        });
        /** Deletes a pipeline. If a scheduler job is attached to the pipeline, it will be deleted. */
        await gapi.client.datapipelines.projects.locations.pipelines.delete({
            name: "Test string",
        });
        /** Looks up a single pipeline. Returns a "NOT_FOUND" error if no such pipeline exists. Returns a "FORBIDDEN" error if the caller doesn't have permission to access it. */
        await gapi.client.datapipelines.projects.locations.pipelines.get({
            name: "Test string",
        });
        /**
         * Updates a pipeline. If successful, the updated Pipeline is returned. Returns `NOT_FOUND` if the pipeline doesn't exist. If UpdatePipeline does not return successfully, you can retry the
         * UpdatePipeline request until you receive a successful response.
         */
        await gapi.client.datapipelines.projects.locations.pipelines.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            createTime: "Test string",
            displayName: "Test string",
            jobCount: 42,
            lastUpdateTime: "Test string",
            name: "Test string",
            pipelineSources: {
                A: "Test string"
            },
            scheduleInfo: {
                nextJobTime: "Test string",
                schedule: "Test string",
                timeZone: "Test string",
            },
            schedulerServiceAccountEmail: "Test string",
            state: "Test string",
            type: "Test string",
            workload: {
                dataflowFlexTemplateRequest: {
                    launchParameter: {
                        containerSpecGcsPath: "Test string",
                        environment: {
                            additionalExperiments: [
                                "Test string"
                            ],
                            additionalUserLabels: {
                                A: "Test string"
                            },
                            enableStreamingEngine: true,
                            flexrsGoal: "Test string",
                            ipConfiguration: "Test string",
                            kmsKeyName: "Test string",
                            machineType: "Test string",
                            maxWorkers: 42,
                            network: "Test string",
                            numWorkers: 42,
                            serviceAccountEmail: "Test string",
                            subnetwork: "Test string",
                            tempLocation: "Test string",
                            workerRegion: "Test string",
                            workerZone: "Test string",
                            zone: "Test string",
                        },
                        jobName: "Test string",
                        launchOptions: {
                            A: "Test string"
                        },
                        parameters: {
                            A: "Test string"
                        },
                        transformNameMappings: {
                            A: "Test string"
                        },
                        update: true,
                    },
                    location: "Test string",
                    projectId: "Test string",
                    validateOnly: true,
                },
                dataflowLaunchTemplateRequest: {
                    gcsPath: "Test string",
                    launchParameters: {
                        environment: {
                            additionalExperiments: [
                                "Test string"
                            ],
                            additionalUserLabels: {
                                A: "Test string"
                            },
                            bypassTempDirValidation: true,
                            enableStreamingEngine: true,
                            ipConfiguration: "Test string",
                            kmsKeyName: "Test string",
                            machineType: "Test string",
                            maxWorkers: 42,
                            network: "Test string",
                            numWorkers: 42,
                            serviceAccountEmail: "Test string",
                            subnetwork: "Test string",
                            tempLocation: "Test string",
                            workerRegion: "Test string",
                            workerZone: "Test string",
                            zone: "Test string",
                        },
                        jobName: "Test string",
                        parameters: {
                            A: "Test string"
                        },
                        transformNameMapping: {
                            A: "Test string"
                        },
                        update: true,
                    },
                    location: "Test string",
                    projectId: "Test string",
                    validateOnly: true,
                },
            },
        });
        /**
         * Creates a job for the specified pipeline directly. You can use this method when the internal scheduler is not configured and you want to trigger the job directly or through an external
         * system. Returns a "NOT_FOUND" error if the pipeline doesn't exist. Returns a "FORBIDDEN" error if the user doesn't have permission to access the pipeline or run jobs for the pipeline.
         */
        await gapi.client.datapipelines.projects.locations.pipelines.run({
            name: "Test string",
        }, {
        });
        /**
         * Freezes pipeline execution permanently. If there's a corresponding scheduler entry, it's deleted, and the pipeline state is changed to "ARCHIVED". However, pipeline metadata is
         * retained.
         */
        await gapi.client.datapipelines.projects.locations.pipelines.stop({
            name: "Test string",
        }, {
        });
        /** Lists jobs for a given pipeline. Throws a "FORBIDDEN" error if the caller doesn't have permission to access it. */
        await gapi.client.datapipelines.projects.locations.pipelines.jobs.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Gets transform descriptions in a batch, associated with a list of provided uniform resource names. */
        await gapi.client.datapipelines.projects.locations.transformDescriptions.batchGet({
            names: "Test string",
            parent: "Test string",
        });
        /** Gets the transform description associated with the provided uniform resource name. */
        await gapi.client.datapipelines.projects.locations.transformDescriptions.get({
            name: "Test string",
        });
    }
});
