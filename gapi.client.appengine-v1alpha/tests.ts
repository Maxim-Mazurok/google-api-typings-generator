/* This is stub file for gapi.client.appengine-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240218

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://appengine.googleapis.com/$discovery/rest?version=v1alpha'
  );
  /** now we can use gapi.client.appengine */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your applications deployed on Google App Engine */
    'https://www.googleapis.com/auth/appengine.admin',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** View your data across Google Cloud services and see the email address of your Google Account */
    'https://www.googleapis.com/auth/cloud-platform.read-only',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Uploads the specified SSL certificate. */
    await gapi.client.appengine.apps.authorizedCertificates.create(
      {
        appsId: 'Test string',
      },
      {
        certificateRawData: {
          privateKey: 'Test string',
          publicCertificate: 'Test string',
        },
        displayName: 'Test string',
        domainMappingsCount: 42,
        domainNames: ['Test string'],
        expireTime: 'Test string',
        id: 'Test string',
        managedCertificate: {
          lastRenewalTime: 'Test string',
          status: 'Test string',
        },
        name: 'Test string',
        visibleDomainMappings: ['Test string'],
      }
    );
    /** Deletes the specified SSL certificate. */
    await gapi.client.appengine.apps.authorizedCertificates.delete({
      appsId: 'Test string',
      authorizedCertificatesId: 'Test string',
    });
    /** Gets the specified SSL certificate. */
    await gapi.client.appengine.apps.authorizedCertificates.get({
      appsId: 'Test string',
      authorizedCertificatesId: 'Test string',
      view: 'Test string',
    });
    /** Lists all SSL certificates the user is authorized to administer. */
    await gapi.client.appengine.apps.authorizedCertificates.list({
      appsId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      view: 'Test string',
    });
    /** Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated. */
    await gapi.client.appengine.apps.authorizedCertificates.patch(
      {
        appsId: 'Test string',
        authorizedCertificatesId: 'Test string',
        updateMask: 'Test string',
      },
      {
        certificateRawData: {
          privateKey: 'Test string',
          publicCertificate: 'Test string',
        },
        displayName: 'Test string',
        domainMappingsCount: 42,
        domainNames: ['Test string'],
        expireTime: 'Test string',
        id: 'Test string',
        managedCertificate: {
          lastRenewalTime: 'Test string',
          status: 'Test string',
        },
        name: 'Test string',
        visibleDomainMappings: ['Test string'],
      }
    );
    /** Lists all domains the user is authorized to administer. */
    await gapi.client.appengine.apps.authorizedDomains.list({
      appsId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains. */
    await gapi.client.appengine.apps.domainMappings.create(
      {
        appsId: 'Test string',
        noManagedCertificate: true,
        overrideStrategy: 'Test string',
      },
      {
        id: 'Test string',
        name: 'Test string',
        resourceRecords: [
          {
            name: 'Test string',
            rrdata: 'Test string',
            type: 'Test string',
          },
        ],
        sslSettings: {
          certificateId: 'Test string',
          isManagedCertificate: true,
        },
      }
    );
    /** Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource. */
    await gapi.client.appengine.apps.domainMappings.delete({
      appsId: 'Test string',
      domainMappingsId: 'Test string',
    });
    /** Gets the specified domain mapping. */
    await gapi.client.appengine.apps.domainMappings.get({
      appsId: 'Test string',
      domainMappingsId: 'Test string',
    });
    /** Lists the domain mappings on an application. */
    await gapi.client.appengine.apps.domainMappings.list({
      appsId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource. */
    await gapi.client.appengine.apps.domainMappings.patch(
      {
        appsId: 'Test string',
        domainMappingsId: 'Test string',
        noManagedCertificate: true,
        updateMask: 'Test string',
      },
      {
        id: 'Test string',
        name: 'Test string',
        resourceRecords: [
          {
            name: 'Test string',
            rrdata: 'Test string',
            type: 'Test string',
          },
        ],
        sslSettings: {
          certificateId: 'Test string',
          isManagedCertificate: true,
        },
      }
    );
    /** Gets information about a location. */
    await gapi.client.appengine.apps.locations.get({
      appsId: 'Test string',
      locationsId: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.appengine.apps.locations.list({
      appsId: 'Test string',
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.appengine.apps.operations.get({
      appsId: 'Test string',
      operationsId: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.appengine.apps.operations.list({
      appsId: 'Test string',
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Gets information about a location. */
    await gapi.client.appengine.projects.locations.get({
      locationsId: 'Test string',
      projectsId: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.appengine.projects.locations.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectsId: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.appengine.projects.locations.operations.get({
      locationsId: 'Test string',
      operationsId: 'Test string',
      projectsId: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.appengine.projects.locations.operations.list({
      filter: 'Test string',
      locationsId: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      projectsId: 'Test string',
    });
  }
});
