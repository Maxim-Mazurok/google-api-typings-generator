/* This is stub file for gapi.client.gkebackup-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20221207

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://gkebackup.googleapis.com/$discovery/rest?version=v1');
    /** now we can use gapi.client.gkebackup */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /**
         * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support
         * this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
         */
        await gapi.client.gkebackup.projects.locations.deleteOperations({
            name: "Test string",
        });
        /** Gets information about a location. */
        await gapi.client.gkebackup.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.gkebackup.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new BackupPlan in a given location. */
        await gapi.client.gkebackup.projects.locations.backupPlans.create({
            backupPlanId: "Test string",
            parent: "Test string",
        }, {
            backupConfig: {
                allNamespaces: true,
                encryptionKey: {
                    gcpKmsEncryptionKey: "Test string",
                },
                includeSecrets: true,
                includeVolumeData: true,
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
            },
            backupSchedule: {
                cronSchedule: "Test string",
                paused: true,
            },
            cluster: "Test string",
            createTime: "Test string",
            deactivated: true,
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            protectedPodCount: 42,
            retentionPolicy: {
                backupDeleteLockDays: 42,
                backupRetainDays: 42,
                locked: true,
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing BackupPlan. */
        await gapi.client.gkebackup.projects.locations.backupPlans.delete({
            etag: "Test string",
            name: "Test string",
        });
        /** Retrieve the details of a single BackupPlan. */
        await gapi.client.gkebackup.projects.locations.backupPlans.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.backupPlans.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists BackupPlans in a given location. */
        await gapi.client.gkebackup.projects.locations.backupPlans.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a BackupPlan. */
        await gapi.client.gkebackup.projects.locations.backupPlans.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            backupConfig: {
                allNamespaces: true,
                encryptionKey: {
                    gcpKmsEncryptionKey: "Test string",
                },
                includeSecrets: true,
                includeVolumeData: true,
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
            },
            backupSchedule: {
                cronSchedule: "Test string",
                paused: true,
            },
            cluster: "Test string",
            createTime: "Test string",
            deactivated: true,
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            protectedPodCount: 42,
            retentionPolicy: {
                backupDeleteLockDays: 42,
                backupRetainDays: 42,
                locked: true,
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.backupPlans.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.backupPlans.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a Backup for the given BackupPlan. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.create({
            backupId: "Test string",
            parent: "Test string",
        }, {
            allNamespaces: true,
            clusterMetadata: {
                anthosVersion: "Test string",
                backupCrdVersions: {
                    A: "Test string"
                },
                cluster: "Test string",
                gkeVersion: "Test string",
                k8sVersion: "Test string",
            },
            completeTime: "Test string",
            configBackupSizeBytes: "Test string",
            containsSecrets: true,
            containsVolumeData: true,
            createTime: "Test string",
            deleteLockDays: 42,
            deleteLockExpireTime: "Test string",
            description: "Test string",
            encryptionKey: {
                gcpKmsEncryptionKey: "Test string",
            },
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            manual: true,
            name: "Test string",
            podCount: 42,
            resourceCount: 42,
            retainDays: 42,
            retainExpireTime: "Test string",
            selectedApplications: {
                namespacedNames: [
                    {
                        name: "Test string",
                        namespace: "Test string",
                    }
                ],
            },
            selectedNamespaces: {
                namespaces: [
                    "Test string"
                ],
            },
            sizeBytes: "Test string",
            state: "Test string",
            stateReason: "Test string",
            uid: "Test string",
            updateTime: "Test string",
            volumeCount: 42,
        });
        /** Deletes an existing Backup. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.delete({
            etag: "Test string",
            force: true,
            name: "Test string",
        });
        /** Retrieve the details of a single Backup. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the Backups for a given BackupPlan. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a Backup. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            allNamespaces: true,
            clusterMetadata: {
                anthosVersion: "Test string",
                backupCrdVersions: {
                    A: "Test string"
                },
                cluster: "Test string",
                gkeVersion: "Test string",
                k8sVersion: "Test string",
            },
            completeTime: "Test string",
            configBackupSizeBytes: "Test string",
            containsSecrets: true,
            containsVolumeData: true,
            createTime: "Test string",
            deleteLockDays: 42,
            deleteLockExpireTime: "Test string",
            description: "Test string",
            encryptionKey: {
                gcpKmsEncryptionKey: "Test string",
            },
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            manual: true,
            name: "Test string",
            podCount: 42,
            resourceCount: 42,
            retainDays: 42,
            retainExpireTime: "Test string",
            selectedApplications: {
                namespacedNames: [
                    {
                        name: "Test string",
                        namespace: "Test string",
                    }
                ],
            },
            selectedNamespaces: {
                namespaces: [
                    "Test string"
                ],
            },
            sizeBytes: "Test string",
            state: "Test string",
            stateReason: "Test string",
            uid: "Test string",
            updateTime: "Test string",
            volumeCount: 42,
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Retrieve the details of a single VolumeBackup. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.volumeBackups.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.volumeBackups.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the VolumeBackups for a given Backup. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.volumeBackups.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.volumeBackups.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.backupPlans.backups.volumeBackups.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /**
         * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this
         * method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation
         * completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of
         * 1, corresponding to `Code.CANCELLED`.
         */
        await gapi.client.gkebackup.projects.locations.operations.cancel({
            name: "Test string",
        }, {
        });
        /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
        await gapi.client.gkebackup.projects.locations.operations.get({
            name: "Test string",
        });
        /**
         * Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to
         * override the binding to use different resource name schemes, such as `users/*‍/operations`. To override the binding, API services can add a binding such as
         * `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must
         * ensure the name binding is the parent resource, without the operations collection id.
         */
        await gapi.client.gkebackup.projects.locations.operations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /** Creates a new RestorePlan in a given location. */
        await gapi.client.gkebackup.projects.locations.restorePlans.create({
            parent: "Test string",
            restorePlanId: "Test string",
        }, {
            backupPlan: "Test string",
            cluster: "Test string",
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            restoreConfig: {
                allNamespaces: true,
                clusterResourceConflictPolicy: "Test string",
                clusterResourceRestoreScope: {
                    selectedGroupKinds: [
                        {
                            resourceGroup: "Test string",
                            resourceKind: "Test string",
                        }
                    ],
                },
                namespacedResourceRestoreMode: "Test string",
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
                substitutionRules: [
                    {
                        newValue: "Test string",
                        originalValuePattern: "Test string",
                        targetGroupKinds: [
                            {
                                resourceGroup: "Test string",
                                resourceKind: "Test string",
                            }
                        ],
                        targetJsonPath: "Test string",
                        targetNamespaces: [
                            "Test string"
                        ],
                    }
                ],
                volumeDataRestorePolicy: "Test string",
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Deletes an existing RestorePlan. */
        await gapi.client.gkebackup.projects.locations.restorePlans.delete({
            etag: "Test string",
            force: true,
            name: "Test string",
        });
        /** Retrieve the details of a single RestorePlan. */
        await gapi.client.gkebackup.projects.locations.restorePlans.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.restorePlans.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists RestorePlans in a given location. */
        await gapi.client.gkebackup.projects.locations.restorePlans.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a RestorePlan. */
        await gapi.client.gkebackup.projects.locations.restorePlans.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            backupPlan: "Test string",
            cluster: "Test string",
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            restoreConfig: {
                allNamespaces: true,
                clusterResourceConflictPolicy: "Test string",
                clusterResourceRestoreScope: {
                    selectedGroupKinds: [
                        {
                            resourceGroup: "Test string",
                            resourceKind: "Test string",
                        }
                    ],
                },
                namespacedResourceRestoreMode: "Test string",
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
                substitutionRules: [
                    {
                        newValue: "Test string",
                        originalValuePattern: "Test string",
                        targetGroupKinds: [
                            {
                                resourceGroup: "Test string",
                                resourceKind: "Test string",
                            }
                        ],
                        targetJsonPath: "Test string",
                        targetNamespaces: [
                            "Test string"
                        ],
                    }
                ],
                volumeDataRestorePolicy: "Test string",
            },
            uid: "Test string",
            updateTime: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.restorePlans.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.restorePlans.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a new Restore for the given RestorePlan. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.create({
            parent: "Test string",
            restoreId: "Test string",
        }, {
            backup: "Test string",
            cluster: "Test string",
            completeTime: "Test string",
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            resourcesExcludedCount: 42,
            resourcesFailedCount: 42,
            resourcesRestoredCount: 42,
            restoreConfig: {
                allNamespaces: true,
                clusterResourceConflictPolicy: "Test string",
                clusterResourceRestoreScope: {
                    selectedGroupKinds: [
                        {
                            resourceGroup: "Test string",
                            resourceKind: "Test string",
                        }
                    ],
                },
                namespacedResourceRestoreMode: "Test string",
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
                substitutionRules: [
                    {
                        newValue: "Test string",
                        originalValuePattern: "Test string",
                        targetGroupKinds: [
                            {
                                resourceGroup: "Test string",
                                resourceKind: "Test string",
                            }
                        ],
                        targetJsonPath: "Test string",
                        targetNamespaces: [
                            "Test string"
                        ],
                    }
                ],
                volumeDataRestorePolicy: "Test string",
            },
            state: "Test string",
            stateReason: "Test string",
            uid: "Test string",
            updateTime: "Test string",
            volumesRestoredCount: 42,
        });
        /** Deletes an existing Restore. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.delete({
            etag: "Test string",
            force: true,
            name: "Test string",
        });
        /** Retrieves the details of a single Restore. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the Restores for a given RestorePlan. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Update a Restore. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            backup: "Test string",
            cluster: "Test string",
            completeTime: "Test string",
            createTime: "Test string",
            description: "Test string",
            etag: "Test string",
            labels: {
                A: "Test string"
            },
            name: "Test string",
            resourcesExcludedCount: 42,
            resourcesFailedCount: 42,
            resourcesRestoredCount: 42,
            restoreConfig: {
                allNamespaces: true,
                clusterResourceConflictPolicy: "Test string",
                clusterResourceRestoreScope: {
                    selectedGroupKinds: [
                        {
                            resourceGroup: "Test string",
                            resourceKind: "Test string",
                        }
                    ],
                },
                namespacedResourceRestoreMode: "Test string",
                selectedApplications: {
                    namespacedNames: [
                        {
                            name: "Test string",
                            namespace: "Test string",
                        }
                    ],
                },
                selectedNamespaces: {
                    namespaces: [
                        "Test string"
                    ],
                },
                substitutionRules: [
                    {
                        newValue: "Test string",
                        originalValuePattern: "Test string",
                        targetGroupKinds: [
                            {
                                resourceGroup: "Test string",
                                resourceKind: "Test string",
                            }
                        ],
                        targetJsonPath: "Test string",
                        targetNamespaces: [
                            "Test string"
                        ],
                    }
                ],
                volumeDataRestorePolicy: "Test string",
            },
            state: "Test string",
            stateReason: "Test string",
            uid: "Test string",
            updateTime: "Test string",
            volumesRestoredCount: 42,
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Retrieve the details of a single VolumeRestore. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.volumeRestores.get({
            name: "Test string",
        });
        /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.volumeRestores.getIamPolicy({
            "options.requestedPolicyVersion": 42,
            resource: "Test string",
        });
        /** Lists the VolumeRestores for a given Restore. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.volumeRestores.list({
            filter: "Test string",
            orderBy: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /** Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors. */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.volumeRestores.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                auditConfigs: [
                    {
                        auditLogConfigs: [
                            {
                                exemptedMembers: [
                                    "Test string"
                                ],
                                logType: "Test string",
                            }
                        ],
                        service: "Test string",
                    }
                ],
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
            updateMask: "Test string",
        });
        /**
         * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This
         * operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.gkebackup.projects.locations.restorePlans.restores.volumeRestores.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
    }
});
