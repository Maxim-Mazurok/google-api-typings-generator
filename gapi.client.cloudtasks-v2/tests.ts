/* This is stub file for gapi.client.cloudtasks-v2 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20220822

gapi.load('client', async () => {
    /** now we can use gapi.client */

    await gapi.client.load('https://cloudtasks.googleapis.com/$discovery/rest?version=v2');
    /** now we can use gapi.client.cloudtasks */

    /** don't forget to authenticate your client before sending any request to resources: */
    /** declare client_id registered in Google Developers Console */
    const client_id = '<<PUT YOUR CLIENT ID HERE>>';
    const scope = [
        /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
        'https://www.googleapis.com/auth/cloud-platform',
    ];
    const immediate = false;
    gapi.auth.authorize({ client_id, scope, immediate }, authResult => {
        if (authResult && !authResult.error) {
            /** handle successful authorization */
            run();
        } else {
            /** handle authorization error */
        }
    });

    async function run() {
        /** Gets information about a location. */
        await gapi.client.cloudtasks.projects.locations.get({
            name: "Test string",
        });
        /** Lists information about the supported locations for this service. */
        await gapi.client.cloudtasks.projects.locations.list({
            filter: "Test string",
            name: "Test string",
            pageSize: 42,
            pageToken: "Test string",
        });
        /**
         * Creates a queue. Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was
         * dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of
         * Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.
         */
        await gapi.client.cloudtasks.projects.locations.queues.create({
            parent: "Test string",
        }, {
            appEngineRoutingOverride: {
                host: "Test string",
                instance: "Test string",
                service: "Test string",
                version: "Test string",
            },
            name: "Test string",
            purgeTime: "Test string",
            rateLimits: {
                maxBurstSize: 42,
                maxConcurrentDispatches: 42,
                maxDispatchesPerSecond: 42,
            },
            retryConfig: {
                maxAttempts: 42,
                maxBackoff: "Test string",
                maxDoublings: 42,
                maxRetryDuration: "Test string",
                minBackoff: "Test string",
            },
            stackdriverLoggingConfig: {
                samplingRatio: 42,
            },
            state: "Test string",
        });
        /**
         * Deletes a queue. This command will delete the queue even if it has tasks in it. Note: If you delete a queue, a queue with the same name can't be created for 7 days. WARNING: Using this
         * method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and
         * queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.
         */
        await gapi.client.cloudtasks.projects.locations.queues.delete({
            name: "Test string",
        });
        /** Gets a queue. */
        await gapi.client.cloudtasks.projects.locations.queues.get({
            name: "Test string",
        });
        /**
         * Gets the access control policy for a Queue. Returns an empty policy if the resource exists and does not have a policy set. Authorization requires the following [Google
         * IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.getIamPolicy`
         */
        await gapi.client.cloudtasks.projects.locations.queues.getIamPolicy({
            resource: "Test string",
        }, {
            options: {
                requestedPolicyVersion: 42,
            },
        });
        /** Lists queues. Queues are returned in lexicographical order. */
        await gapi.client.cloudtasks.projects.locations.queues.list({
            filter: "Test string",
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
        });
        /**
         * Updates a queue. This method creates the queue if it does not exist and updates the queue if it does exist. Queues created with this method allow tasks to live for a maximum of 31 days.
         * After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App
         * Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this
         * method.
         */
        await gapi.client.cloudtasks.projects.locations.queues.patch({
            name: "Test string",
            updateMask: "Test string",
        }, {
            appEngineRoutingOverride: {
                host: "Test string",
                instance: "Test string",
                service: "Test string",
                version: "Test string",
            },
            name: "Test string",
            purgeTime: "Test string",
            rateLimits: {
                maxBurstSize: 42,
                maxConcurrentDispatches: 42,
                maxDispatchesPerSecond: 42,
            },
            retryConfig: {
                maxAttempts: 42,
                maxBackoff: "Test string",
                maxDoublings: 42,
                maxRetryDuration: "Test string",
                minBackoff: "Test string",
            },
            stackdriverLoggingConfig: {
                samplingRatio: 42,
            },
            state: "Test string",
        });
        /**
         * Pauses the queue. If a queue is paused then the system will stop dispatching tasks until the queue is resumed via ResumeQueue. Tasks can still be added when the queue is paused. A queue
         * is paused if its state is PAUSED.
         */
        await gapi.client.cloudtasks.projects.locations.queues.pause({
            name: "Test string",
        }, {
        });
        /**
         * Purges a queue by deleting all of its tasks. All tasks created before this method is called are permanently deleted. Purge operations can take up to one minute to take effect. Tasks
         * might be dispatched before the purge takes effect. A purge is irreversible.
         */
        await gapi.client.cloudtasks.projects.locations.queues.purge({
            name: "Test string",
        }, {
        });
        /**
         * Resume a queue. This method resumes a queue after it has been PAUSED or DISABLED. The state of a queue is stored in the queue's state; after calling this method it will be set to
         * RUNNING. WARNING: Resuming many high-QPS queues at the same time can lead to target overloading. If you are resuming high-QPS queues, follow the 500/50/5 pattern described in [Managing
         * Cloud Tasks Scaling Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).
         */
        await gapi.client.cloudtasks.projects.locations.queues.resume({
            name: "Test string",
        }, {
        });
        /**
         * Sets the access control policy for a Queue. Replaces any existing policy. Note: The Cloud Console does not check queue-level IAM permissions yet. Project-level permissions are required
         * to use the Cloud Console. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.setIamPolicy`
         */
        await gapi.client.cloudtasks.projects.locations.queues.setIamPolicy({
            resource: "Test string",
        }, {
            policy: {
                bindings: [
                    {
                        condition: {
                            description: "Test string",
                            expression: "Test string",
                            location: "Test string",
                            title: "Test string",
                        },
                        members: [
                            "Test string"
                        ],
                        role: "Test string",
                    }
                ],
                etag: "Test string",
                version: 42,
            },
        });
        /**
         * Returns permissions that a caller has on a Queue. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed
         * to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
         */
        await gapi.client.cloudtasks.projects.locations.queues.testIamPermissions({
            resource: "Test string",
        }, {
            permissions: [
                "Test string"
            ],
        });
        /** Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * The maximum task size is 100KB. */
        await gapi.client.cloudtasks.projects.locations.queues.tasks.create({
            parent: "Test string",
        }, {
            responseView: "Test string",
            task: {
                appEngineHttpRequest: {
                    appEngineRouting: {
                        host: "Test string",
                        instance: "Test string",
                        service: "Test string",
                        version: "Test string",
                    },
                    body: "Test string",
                    headers: {
                        A: "Test string"
                    },
                    httpMethod: "Test string",
                    relativeUri: "Test string",
                },
                createTime: "Test string",
                dispatchCount: 42,
                dispatchDeadline: "Test string",
                firstAttempt: {
                    dispatchTime: "Test string",
                    responseStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    responseTime: "Test string",
                    scheduleTime: "Test string",
                },
                httpRequest: {
                    body: "Test string",
                    headers: {
                        A: "Test string"
                    },
                    httpMethod: "Test string",
                    oauthToken: {
                        scope: "Test string",
                        serviceAccountEmail: "Test string",
                    },
                    oidcToken: {
                        audience: "Test string",
                        serviceAccountEmail: "Test string",
                    },
                    url: "Test string",
                },
                lastAttempt: {
                    dispatchTime: "Test string",
                    responseStatus: {
                        code: 42,
                        details: [
                            {
                                A: 42
                            }
                        ],
                        message: "Test string",
                    },
                    responseTime: "Test string",
                    scheduleTime: "Test string",
                },
                name: "Test string",
                responseCount: 42,
                scheduleTime: "Test string",
                view: "Test string",
            },
        });
        /** Deletes a task. A task can be deleted if it is scheduled or dispatched. A task cannot be deleted if it has executed successfully or permanently failed. */
        await gapi.client.cloudtasks.projects.locations.queues.tasks.delete({
            name: "Test string",
        });
        /** Gets a task. */
        await gapi.client.cloudtasks.projects.locations.queues.tasks.get({
            name: "Test string",
            responseView: "Test string",
        });
        /**
         * Lists the tasks in a queue. By default, only the BASIC view is retrieved due to performance considerations; response_view controls the subset of information which is returned. The tasks
         * may be returned in any order. The ordering may change at any time.
         */
        await gapi.client.cloudtasks.projects.locations.queues.tasks.list({
            pageSize: 42,
            pageToken: "Test string",
            parent: "Test string",
            responseView: "Test string",
        });
        /**
         * Forces a task to run now. When this method is called, Cloud Tasks will dispatch the task, even if the task is already running, the queue has reached its RateLimits or is PAUSED. This
         * command is meant to be used for manual debugging. For example, RunTask can be used to retry a failed task after a fix has been made or to manually force a task to be dispatched now. The
         * dispatched task is returned. That is, the task that is returned contains the status after the task is dispatched but before the task is received by its target. If Cloud Tasks receives a
         * successful response from the task's target, then the task will be deleted; otherwise the task's schedule_time will be reset to the time that RunTask was called plus the retry delay
         * specified in the queue's RetryConfig. RunTask returns NOT_FOUND when it is called on a task that has already succeeded or permanently failed.
         */
        await gapi.client.cloudtasks.projects.locations.queues.tasks.run({
            name: "Test string",
        }, {
            responseView: "Test string",
        });
    }
});
