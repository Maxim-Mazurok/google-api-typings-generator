/* Type definitions for non-npm package Google Docs API v1 1.0 */
// Project: https://developers.google.com/docs/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.8

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://docs.googleapis.com/$discovery/rest?version=v1
// Revision: 20201216

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Google Docs API v1 */
    function load(name: "docs", version: "v1"): PromiseLike<void>;
    function load(name: "docs", version: "v1", callback: () => any): void;

    namespace docs {
        interface AutoText {
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. An AutoText may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this AutoText, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /** The text style of this AutoText. */
            textStyle?: TextStyle;
            /** The type of this auto text. */
            type?: string;
        }
        interface Background {
            /** The background color. */
            color?: OptionalColor;
        }
        interface BackgroundSuggestionState {
            /** Indicates whether the current background color has been modified in this suggestion. */
            backgroundColorSuggested?: boolean;
        }
        interface BatchUpdateDocumentRequest {
            /** A list of updates to apply to the document. */
            requests?: Request[];
            /** Provides control over how write requests are executed. */
            writeControl?: WriteControl;
        }
        interface BatchUpdateDocumentResponse {
            /** The ID of the document to which the updates were applied to. */
            documentId?: string;
            /** The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty. */
            replies?: Response[];
            /** The updated write control after applying the request. */
            writeControl?: WriteControl;
        }
        interface Body {
            /** The contents of the body. The indexes for the body's content begin at zero. */
            content?: StructuralElement[];
        }
        interface Bullet {
            /** The ID of the list this paragraph belongs to. */
            listId?: string;
            /** The nesting level of this paragraph in the list. */
            nestingLevel?: number;
            /** The paragraph specific text style applied to this bullet. */
            textStyle?: TextStyle;
        }
        interface BulletSuggestionState {
            /** Indicates if there was a suggested change to the list_id. */
            listIdSuggested?: boolean;
            /** Indicates if there was a suggested change to the nesting_level. */
            nestingLevelSuggested?: boolean;
            /** A mask that indicates which of the fields in text style have been changed in this suggestion. */
            textStyleSuggestionState?: TextStyleSuggestionState;
        }
        interface Color {
            /** The RGB color value. */
            rgbColor?: RgbColor;
        }
        interface ColumnBreak {
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this ColumnBreak, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /**
             * The text style of this ColumnBreak. Similar to text content, like text runs and footnote references, the text style of a column break can affect content layout as well as the
             * styling of text inserted adjacent to it.
             */
            textStyle?: TextStyle;
        }
        interface CreateFooterRequest {
            /**
             * The location of the SectionBreak immediately preceding the section whose SectionStyle this footer should belong to. If this is unset or refers to the first section break in the
             * document, the footer applies to the document style.
             */
            sectionBreakLocation?: Location;
            /** The type of footer to create. */
            type?: string;
        }
        interface CreateFooterResponse {
            /** The ID of the created footer. */
            footerId?: string;
        }
        interface CreateFootnoteRequest {
            /**
             * Inserts the footnote reference at the end of the document body. Footnote references cannot be inserted inside a header, footer or footnote. Since footnote references can only be
             * inserted in the body, the segment ID field must be empty.
             */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts the footnote reference at a specific index in the document. The footnote reference must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be
             * inserted at a table's start index (i.e. between the table and its preceding paragraph). Footnote references cannot be inserted inside an equation, header, footer or footnote. Since
             * footnote references can only be inserted in the body, the segment ID field must be empty.
             */
            location?: Location;
        }
        interface CreateFootnoteResponse {
            /** The ID of the created footnote. */
            footnoteId?: string;
        }
        interface CreateHeaderRequest {
            /**
             * The location of the SectionBreak which begins the section this header should belong to. If `section_break_location' is unset or if it refers to the first section break in the
             * document body, the header applies to the DocumentStyle
             */
            sectionBreakLocation?: Location;
            /** The type of header to create. */
            type?: string;
        }
        interface CreateHeaderResponse {
            /** The ID of the created header. */
            headerId?: string;
        }
        interface CreateNamedRangeRequest {
            /** The name of the NamedRange. Names do not need to be unique. Names must be at least 1 character and no more than 256 characters, measured in UTF-16 code units. */
            name?: string;
            /** The range to apply the name to. */
            range?: Range;
        }
        interface CreateNamedRangeResponse {
            /** The ID of the created named range. */
            namedRangeId?: string;
        }
        interface CreateParagraphBulletsRequest {
            /** The kinds of bullet glyphs to be used. */
            bulletPreset?: string;
            /** The range to apply the bullet preset to. */
            range?: Range;
        }
        interface CropProperties {
            /** The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets. */
            angle?: number;
            /** The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height. */
            offsetBottom?: number;
            /** The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width. */
            offsetLeft?: number;
            /** The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width. */
            offsetRight?: number;
            /** The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height. */
            offsetTop?: number;
        }
        interface CropPropertiesSuggestionState {
            /** Indicates if there was a suggested change to angle. */
            angleSuggested?: boolean;
            /** Indicates if there was a suggested change to offset_bottom. */
            offsetBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to offset_left. */
            offsetLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to offset_right. */
            offsetRightSuggested?: boolean;
            /** Indicates if there was a suggested change to offset_top. */
            offsetTopSuggested?: boolean;
        }
        interface DeleteContentRangeRequest {
            /**
             * The range of content to delete. Deleting text that crosses a paragraph boundary may result in changes to paragraph styles, lists, positioned objects and bookmarks as the two
             * paragraphs are merged. Attempting to delete certain ranges can result in an invalid document structure in which case a 400 bad request error is returned. Some examples of invalid
             * delete requests include: * Deleting one code unit of a surrogate pair. * Deleting the last newline character of a Body, Header, Footer, Footnote, TableCell or TableOfContents. *
             * Deleting the start or end of a Table, TableOfContents or Equation without deleting the entire element. * Deleting the newline character before a Table, TableOfContents or
             * SectionBreak without deleting the element. * Deleting individual rows or cells of a table. Deleting the content within a table cell is allowed.
             */
            range?: Range;
        }
        interface DeleteFooterRequest {
            /**
             * The id of the footer to delete. If this footer is defined on DocumentStyle, the reference to this footer is removed, resulting in no footer of that type for the first section of the
             * document. If this footer is defined on a SectionStyle, the reference to this footer is removed and the footer of that type is now continued from the previous section.
             */
            footerId?: string;
        }
        interface DeleteHeaderRequest {
            /**
             * The id of the header to delete. If this header is defined on DocumentStyle, the reference to this header is removed, resulting in no header of that type for the first section of the
             * document. If this header is defined on a SectionStyle, the reference to this header is removed and the header of that type is now continued from the previous section.
             */
            headerId?: string;
        }
        interface DeleteNamedRangeRequest {
            /** The name of the range(s) to delete. All named ranges with the given name will be deleted. */
            name?: string;
            /** The ID of the named range to delete. */
            namedRangeId?: string;
        }
        interface DeleteParagraphBulletsRequest {
            /** The range to delete bullets from. */
            range?: Range;
        }
        interface DeletePositionedObjectRequest {
            /** The ID of the positioned object to delete. */
            objectId?: string;
        }
        interface DeleteTableColumnRequest {
            /**
             * The reference table cell location from which the column will be deleted. The column this cell spans will be deleted. If this is a merged cell that spans multiple columns, all
             * columns that the cell spans will be deleted. If no columns remain in the table after this deletion, the whole table is deleted.
             */
            tableCellLocation?: TableCellLocation;
        }
        interface DeleteTableRowRequest {
            /**
             * The reference table cell location from which the row will be deleted. The row this cell spans will be deleted. If this is a merged cell that spans multiple rows, all rows that the
             * cell spans will be deleted. If no rows remain in the table after this deletion, the whole table is deleted.
             */
            tableCellLocation?: TableCellLocation;
        }
        interface Dimension {
            /** The magnitude. */
            magnitude?: number;
            /** The units for magnitude. */
            unit?: string;
        }
        interface Document {
            /** Output only. The main body of the document. */
            body?: Body;
            /** Output only. The ID of the document. */
            documentId?: string;
            /** Output only. The style of the document. */
            documentStyle?: DocumentStyle;
            /** Output only. The footers in the document, keyed by footer ID. */
            footers?: { [P in string]: Footer };
            /** Output only. The footnotes in the document, keyed by footnote ID. */
            footnotes?: { [P in string]: Footnote };
            /** Output only. The headers in the document, keyed by header ID. */
            headers?: { [P in string]: Header };
            /** Output only. The inline objects in the document, keyed by object ID. */
            inlineObjects?: { [P in string]: InlineObject };
            /** Output only. The lists in the document, keyed by list ID. */
            lists?: { [P in string]: List };
            /** Output only. The named ranges in the document, keyed by name. */
            namedRanges?: { [P in string]: NamedRanges };
            /** Output only. The named styles of the document. */
            namedStyles?: NamedStyles;
            /** Output only. The positioned objects in the document, keyed by object ID. */
            positionedObjects?: { [P in string]: PositionedObject };
            /**
             * Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the
             * document has been edited since that revision. Only populated if the user has edit access to the document. The format of the revision ID may change over time, so it should be treated
             * opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between
             * calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated; however, a changed ID can also be
             * due to internal factors such as ID format changes.
             */
            revisionId?: string;
            /** Output only. The suggested changes to the style of the document, keyed by suggestion ID. */
            suggestedDocumentStyleChanges?: { [P in string]: SuggestedDocumentStyle };
            /** Output only. The suggested changes to the named styles of the document, keyed by suggestion ID. */
            suggestedNamedStylesChanges?: { [P in string]: SuggestedNamedStyles };
            /** Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE. */
            suggestionsViewMode?: string;
            /** The title of the document. */
            title?: string;
        }
        interface DocumentStyle {
            /** The background of the document. Documents cannot have a transparent background color. */
            background?: Background;
            /** The ID of the default footer. If not set, there is no default footer. This property is read-only. */
            defaultFooterId?: string;
            /** The ID of the default header. If not set, there is no default header. This property is read-only. */
            defaultHeaderId?: string;
            /**
             * The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages.
             * If not set, there is no even page footer. This property is read-only.
             */
            evenPageFooterId?: string;
            /**
             * The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages.
             * If not set, there is no even page header. This property is read-only.
             */
            evenPageHeaderId?: string;
            /**
             * The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to
             * use the default_footer_id or this value for the footer on the first page. If not set, there is no first page footer. This property is read-only.
             */
            firstPageFooterId?: string;
            /**
             * The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to
             * use the default_header_id or this value for the header on the first page. If not set, there is no first page header. This property is read-only.
             */
            firstPageHeaderId?: string;
            /** The bottom page margin. Updating the bottom page margin on the document style clears the bottom page margin on all section styles. */
            marginBottom?: Dimension;
            /** The amount of space between the bottom of the page and the contents of the footer. */
            marginFooter?: Dimension;
            /** The amount of space between the top of the page and the contents of the header. */
            marginHeader?: Dimension;
            /** The left page margin. Updating the left page margin on the document style clears the left page margin on all section styles. It may also cause columns to resize in all sections. */
            marginLeft?: Dimension;
            /** The right page margin. Updating the right page margin on the document style clears the right page margin on all section styles. It may also cause columns to resize in all sections. */
            marginRight?: Dimension;
            /** The top page margin. Updating the top page margin on the document style clears the top page margin on all section styles. */
            marginTop?: Dimension;
            /** The page number from which to start counting the number of pages. */
            pageNumberStart?: number;
            /** The size of a page in the document. */
            pageSize?: Size;
            /**
             * Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values
             * in the Docs editor for header and footer margin are used. This property is read-only.
             */
            useCustomHeaderFooterMargins?: boolean;
            /** Indicates whether to use the even page header / footer IDs for the even pages. */
            useEvenPageHeaderFooter?: boolean;
            /** Indicates whether to use the first page header / footer IDs for the first page. */
            useFirstPageHeaderFooter?: boolean;
        }
        interface DocumentStyleSuggestionState {
            /** A mask that indicates which of the fields in background have been changed in this suggestion. */
            backgroundSuggestionState?: BackgroundSuggestionState;
            /** Indicates if there was a suggested change to default_footer_id. */
            defaultFooterIdSuggested?: boolean;
            /** Indicates if there was a suggested change to default_header_id. */
            defaultHeaderIdSuggested?: boolean;
            /** Indicates if there was a suggested change to even_page_footer_id. */
            evenPageFooterIdSuggested?: boolean;
            /** Indicates if there was a suggested change to even_page_header_id. */
            evenPageHeaderIdSuggested?: boolean;
            /** Indicates if there was a suggested change to first_page_footer_id. */
            firstPageFooterIdSuggested?: boolean;
            /** Indicates if there was a suggested change to first_page_header_id. */
            firstPageHeaderIdSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_bottom. */
            marginBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_footer. */
            marginFooterSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_header. */
            marginHeaderSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_left. */
            marginLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_right. */
            marginRightSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_top. */
            marginTopSuggested?: boolean;
            /** Indicates if there was a suggested change to page_number_start. */
            pageNumberStartSuggested?: boolean;
            /** A mask that indicates which of the fields in size have been changed in this suggestion. */
            pageSizeSuggestionState?: SizeSuggestionState;
            /** Indicates if there was a suggested change to use_custom_header_footer_margins. */
            useCustomHeaderFooterMarginsSuggested?: boolean;
            /** Indicates if there was a suggested change to use_even_page_header_footer. */
            useEvenPageHeaderFooterSuggested?: boolean;
            /** Indicates if there was a suggested change to use_first_page_header_footer. */
            useFirstPageHeaderFooterSuggested?: boolean;
        }
        // tslint:disable-next-line:no-empty-interface
        interface EmbeddedDrawingProperties {
        }
        // tslint:disable-next-line:no-empty-interface
        interface EmbeddedDrawingPropertiesSuggestionState {
        }
        interface EmbeddedObject {
            /** The description of the embedded object. The `title` and `description` are both combined to display alt text. */
            description?: string;
            /** The properties of an embedded drawing. */
            embeddedDrawingProperties?: any;
            /** The border of the embedded object. */
            embeddedObjectBorder?: EmbeddedObjectBorder;
            /** The properties of an image. */
            imageProperties?: ImageProperties;
            /**
             * A reference to the external linked source content. For example, it contains a reference to the source Sheets chart when the embedded object is a linked chart. If unset, then the
             * embedded object is not linked.
             */
            linkedContentReference?: LinkedContentReference;
            /** The bottom margin of the embedded object. */
            marginBottom?: Dimension;
            /** The left margin of the embedded object. */
            marginLeft?: Dimension;
            /** The right margin of the embedded object. */
            marginRight?: Dimension;
            /** The top margin of the embedded object. */
            marginTop?: Dimension;
            /** The visible size of the image after cropping. */
            size?: Size;
            /** The title of the embedded object. The `title` and `description` are both combined to display alt text. */
            title?: string;
        }
        interface EmbeddedObjectBorder {
            /** The color of the border. */
            color?: OptionalColor;
            /** The dash style of the border. */
            dashStyle?: string;
            /** The property state of the border property. */
            propertyState?: string;
            /** The width of the border. */
            width?: Dimension;
        }
        interface EmbeddedObjectBorderSuggestionState {
            /** Indicates if there was a suggested change to color. */
            colorSuggested?: boolean;
            /** Indicates if there was a suggested change to dash_style. */
            dashStyleSuggested?: boolean;
            /** Indicates if there was a suggested change to property_state. */
            propertyStateSuggested?: boolean;
            /** Indicates if there was a suggested change to width. */
            widthSuggested?: boolean;
        }
        interface EmbeddedObjectSuggestionState {
            /** Indicates if there was a suggested change to description. */
            descriptionSuggested?: boolean;
            /** A mask that indicates which of the fields in embedded_drawing_properties have been changed in this suggestion. */
            embeddedDrawingPropertiesSuggestionState?: any;
            /** A mask that indicates which of the fields in embedded_object_border have been changed in this suggestion. */
            embeddedObjectBorderSuggestionState?: EmbeddedObjectBorderSuggestionState;
            /** A mask that indicates which of the fields in image_properties have been changed in this suggestion. */
            imagePropertiesSuggestionState?: ImagePropertiesSuggestionState;
            /** A mask that indicates which of the fields in linked_content_reference have been changed in this suggestion. */
            linkedContentReferenceSuggestionState?: LinkedContentReferenceSuggestionState;
            /** Indicates if there was a suggested change to margin_bottom. */
            marginBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_left. */
            marginLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_right. */
            marginRightSuggested?: boolean;
            /** Indicates if there was a suggested change to margin_top. */
            marginTopSuggested?: boolean;
            /** A mask that indicates which of the fields in size have been changed in this suggestion. */
            sizeSuggestionState?: SizeSuggestionState;
            /** Indicates if there was a suggested change to title. */
            titleSuggested?: boolean;
        }
        interface EndOfSegmentLocation {
            /** The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body. */
            segmentId?: string;
        }
        interface Equation {
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A Equation may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
        }
        interface Footer {
            /** The contents of the footer. The indexes for a footer's content begin at zero. */
            content?: StructuralElement[];
            /** The ID of the footer. */
            footerId?: string;
        }
        interface Footnote {
            /** The contents of the footnote. The indexes for a footnote's content begin at zero. */
            content?: StructuralElement[];
            /** The ID of the footnote. */
            footnoteId?: string;
        }
        interface FootnoteReference {
            /** The ID of the footnote that contains the content of this footnote reference. */
            footnoteId?: string;
            /** The rendered number of this footnote. */
            footnoteNumber?: string;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this FootnoteReference, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /** The text style of this FootnoteReference. */
            textStyle?: TextStyle;
        }
        interface Header {
            /** The contents of the header. The indexes for a header's content begin at zero. */
            content?: StructuralElement[];
            /** The ID of the header. */
            headerId?: string;
        }
        interface HorizontalRule {
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this HorizontalRule, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /**
             * The text style of this HorizontalRule. Similar to text content, like text runs and footnote references, the text style of a horizontal rule can affect content layout as well as the
             * styling of text inserted adjacent to it.
             */
            textStyle?: TextStyle;
        }
        interface ImageProperties {
            /** The clockwise rotation angle of the image, in radians. */
            angle?: number;
            /** The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. */
            brightness?: number;
            /**
             * A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original
             * requester. Access to the image may be lost if the document's sharing settings change.
             */
            contentUri?: string;
            /** The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. */
            contrast?: number;
            /** The crop properties of the image. */
            cropProperties?: CropProperties;
            /** The source URI is the URI used to insert the image. The source URI can be empty. */
            sourceUri?: string;
            /** The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. */
            transparency?: number;
        }
        interface ImagePropertiesSuggestionState {
            /** Indicates if there was a suggested change to angle. */
            angleSuggested?: boolean;
            /** Indicates if there was a suggested change to brightness. */
            brightnessSuggested?: boolean;
            /** Indicates if there was a suggested change to content_uri. */
            contentUriSuggested?: boolean;
            /** Indicates if there was a suggested change to contrast. */
            contrastSuggested?: boolean;
            /** A mask that indicates which of the fields in crop_properties have been changed in this suggestion. */
            cropPropertiesSuggestionState?: CropPropertiesSuggestionState;
            /** Indicates if there was a suggested change to source_uri. */
            sourceUriSuggested?: boolean;
            /** Indicates if there was a suggested change to transparency. */
            transparencySuggested?: boolean;
        }
        interface InlineObject {
            /** The properties of this inline object. */
            inlineObjectProperties?: InlineObjectProperties;
            /** The ID of this inline object. */
            objectId?: string;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested changes to the inline object properties, keyed by suggestion ID. */
            suggestedInlineObjectPropertiesChanges?: { [P in string]: SuggestedInlineObjectProperties };
            /** The suggested insertion ID. If empty, then this is not a suggested insertion. */
            suggestedInsertionId?: string;
        }
        interface InlineObjectElement {
            /** The ID of the InlineObject this element contains. */
            inlineObjectId?: string;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this InlineObject, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /**
             * The text style of this InlineObjectElement. Similar to text content, like text runs and footnote references, the text style of an inline object element can affect content layout as
             * well as the styling of text inserted adjacent to it.
             */
            textStyle?: TextStyle;
        }
        interface InlineObjectProperties {
            /** The embedded object of this inline object. */
            embeddedObject?: EmbeddedObject;
        }
        interface InlineObjectPropertiesSuggestionState {
            /** A mask that indicates which of the fields in embedded_object have been changed in this suggestion. */
            embeddedObjectSuggestionState?: EmbeddedObjectSuggestionState;
        }
        interface InsertInlineImageRequest {
            /** Inserts the text at the end of a header, footer or the document body. Inline images cannot be inserted inside a footnote. */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts the image at a specific index in the document. The image must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start
             * index (i.e. between the table and its preceding paragraph). Inline images cannot be inserted inside a footnote or equation.
             */
            location?: Location;
            /**
             * The size that the image should appear as in the document. This property is optional and the final size of the image in the document is determined by the following rules: * If
             * neither width nor height is specified, then a default size of the image is calculated based on its resolution. * If one dimension is specified then the other dimension is calculated
             * to preserve the aspect ratio of the image. * If both width and height are specified, the image is scaled to fit within the provided dimensions while maintaining its aspect ratio.
             */
            objectSize?: Size;
            /**
             * The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels,
             * and must be in one of PNG, JPEG, or GIF format. The provided URI can be at most 2 kB in length. The URI itself is saved with the image, and exposed via the
             * ImageProperties.content_uri field.
             */
            uri?: string;
        }
        interface InsertInlineImageResponse {
            /** The ID of the created InlineObject. */
            objectId?: string;
        }
        interface InsertInlineSheetsChartResponse {
            /** The object ID of the inserted chart. */
            objectId?: string;
        }
        interface InsertPageBreakRequest {
            /**
             * Inserts the page break at the end of the document body. Page breaks cannot be inserted inside a footnote, header or footer. Since page breaks can only be inserted inside the body,
             * the segment ID field must be empty.
             */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts the page break at a specific index in the document. The page break must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a
             * table's start index (i.e. between the table and its preceding paragraph). Page breaks cannot be inserted inside a table, equation, footnote, header or footer. Since page breaks can
             * only be inserted inside the body, the segment ID field must be empty.
             */
            location?: Location;
        }
        interface InsertSectionBreakRequest {
            /**
             * Inserts a newline and a section break at the end of the document body. Section breaks cannot be inserted inside a footnote, header or footer. Because section breaks can only be
             * inserted inside the body, the segment ID field must be empty.
             */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts a newline and a section break at a specific index in the document. The section break must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be
             * inserted at a table's start index (i.e. between the table and its preceding paragraph). Section breaks cannot be inserted inside a table, equation, footnote, header, or footer.
             * Since section breaks can only be inserted inside the body, the segment ID field must be empty.
             */
            location?: Location;
            /** The type of section to insert. */
            sectionType?: string;
        }
        interface InsertTableColumnRequest {
            /** Whether to insert new column to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left. */
            insertRight?: boolean;
            /**
             * The reference table cell location from which columns will be inserted. A new column will be inserted to the left (or right) of the column where the reference cell is. If the
             * reference cell is a merged cell, a new column will be inserted to the left (or right) of the merged cell.
             */
            tableCellLocation?: TableCellLocation;
        }
        interface InsertTableRequest {
            /** The number of columns in the table. */
            columns?: number;
            /**
             * Inserts the table at the end of the given header, footer or document body. A newline character will be inserted before the inserted table. Tables cannot be inserted inside a
             * footnote.
             */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts the table at a specific model index. A newline character will be inserted before the inserted table, therefore the table start index will be at the specified location index
             * + 1. The table must be inserted inside the bounds of an existing Paragraph. For instance, it cannot be inserted at a table's start index (i.e. between an existing table and its
             * preceding paragraph). Tables cannot be inserted inside a footnote or equation.
             */
            location?: Location;
            /** The number of rows in the table. */
            rows?: number;
        }
        interface InsertTableRowRequest {
            /** Whether to insert new row below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell. */
            insertBelow?: boolean;
            /**
             * The reference table cell location from which rows will be inserted. A new row will be inserted above (or below) the row where the reference cell is. If the reference cell is a
             * merged cell, a new row will be inserted above (or below) the merged cell.
             */
            tableCellLocation?: TableCellLocation;
        }
        interface InsertTextRequest {
            /** Inserts the text at the end of a header, footer, footnote or the document body. */
            endOfSegmentLocation?: EndOfSegmentLocation;
            /**
             * Inserts the text at a specific index in the document. Text must be inserted inside the bounds of an existing Paragraph. For instance, text cannot be inserted at a table's start
             * index (i.e. between the table and its preceding paragraph). The text must be inserted in the preceding paragraph.
             */
            location?: Location;
            /**
             * The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the
             * paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of
             * neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008,
             * U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
             */
            text?: string;
        }
        interface Link {
            /** The ID of a bookmark in this document. */
            bookmarkId?: string;
            /** The ID of a heading in this document. */
            headingId?: string;
            /** An external URL. */
            url?: string;
        }
        interface LinkedContentReference {
            /** A reference to the linked chart. */
            sheetsChartReference?: SheetsChartReference;
        }
        interface LinkedContentReferenceSuggestionState {
            /** A mask that indicates which of the fields in sheets_chart_reference have been changed in this suggestion. */
            sheetsChartReferenceSuggestionState?: SheetsChartReferenceSuggestionState;
        }
        interface List {
            /** The properties of the list. */
            listProperties?: ListProperties;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this list. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion ID. If empty, then this is not a suggested insertion. */
            suggestedInsertionId?: string;
            /** The suggested changes to the list properties, keyed by suggestion ID. */
            suggestedListPropertiesChanges?: { [P in string]: SuggestedListProperties };
        }
        interface ListProperties {
            /**
             * Describes the properties of the bullets at the associated level. A list has at most nine levels of nesting with nesting level 0 corresponding to the top-most level and nesting level
             * 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
             */
            nestingLevels?: NestingLevel[];
        }
        interface ListPropertiesSuggestionState {
            /**
             * A mask that indicates which of the fields on the corresponding NestingLevel in nesting_levels have been changed in this suggestion. The nesting level suggestion states are returned
             * in ascending order of the nesting level with the least nested returned first.
             */
            nestingLevelsSuggestionStates?: NestingLevelSuggestionState[];
        }
        interface Location {
            /** The zero-based index, in UTF-16 code units. The index is relative to the beginning of the segment specified by segment_id. */
            index?: number;
            /** The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body. */
            segmentId?: string;
        }
        interface MergeTableCellsRequest {
            /**
             * The table range specifying which cells of the table to merge. Any text in the cells being merged will be concatenated and stored in the "head" cell of the range. This is the
             * upper-left cell of the range when the content direction is left to right, and the upper-right cell of the range otherwise. If the range is non-rectangular (which can occur in some
             * cases where the range covers cells that are already merged or where the table is non-rectangular), a 400 bad request error is returned.
             */
            tableRange?: TableRange;
        }
        interface NamedRange {
            /** The name of the named range. */
            name?: string;
            /** The ID of the named range. */
            namedRangeId?: string;
            /** The ranges that belong to this named range. */
            ranges?: Range[];
        }
        interface NamedRanges {
            /** The name that all the named ranges share. */
            name?: string;
            /** The NamedRanges that share the same name. */
            namedRanges?: NamedRange[];
        }
        interface NamedStyle {
            /** The type of this named style. */
            namedStyleType?: string;
            /** The paragraph style of this named style. */
            paragraphStyle?: ParagraphStyle;
            /** The text style of this named style. */
            textStyle?: TextStyle;
        }
        interface NamedStyles {
            /** The named styles. There is an entry for each of the possible named style types. */
            styles?: NamedStyle[];
        }
        interface NamedStylesSuggestionState {
            /**
             * A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states match the
             * order of the corresponding named style within the named styles suggestion.
             */
            stylesSuggestionStates?: NamedStyleSuggestionState[];
        }
        interface NamedStyleSuggestionState {
            /** The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle. */
            namedStyleType?: string;
            /** A mask that indicates which of the fields in paragraph style have been changed in this suggestion. */
            paragraphStyleSuggestionState?: ParagraphStyleSuggestionState;
            /** A mask that indicates which of the fields in text style have been changed in this suggestion. */
            textStyleSuggestionState?: TextStyleSuggestionState;
        }
        interface NestingLevel {
            /** The alignment of the bullet within the space allotted for rendering the bullet. */
            bulletAlignment?: string;
            /**
             * The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholder are replaced with the appropriate values
             * depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format
             * follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered
             * glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format
             * `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders
             * for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels
             * have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder
             * in the glyph format for a particular paragraph depends on the paragraph's order within the list.
             */
            glyphFormat?: string;
            /**
             * A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the
             * glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.
             */
            glyphSymbol?: string;
            /**
             * The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the
             * glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered
             * glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
             */
            glyphType?: string;
            /** The amount of indentation for the first line of paragraphs at this level of nesting. */
            indentFirstLine?: Dimension;
            /** The amount of indentation for paragraphs at this level of nesting. Applied to the side that corresponds to the start of the text, based on the paragraph's content direction. */
            indentStart?: Dimension;
            /**
             * The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and roman numeraled lists, i.e. for values of both 0 and 1,
             * lettered and roman numeraled lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.
             */
            startNumber?: number;
            /** The text style of bullets at this level of nesting. */
            textStyle?: TextStyle;
        }
        interface NestingLevelSuggestionState {
            /** Indicates if there was a suggested change to bullet_alignment. */
            bulletAlignmentSuggested?: boolean;
            /** Indicates if there was a suggested change to glyph_format. */
            glyphFormatSuggested?: boolean;
            /** Indicates if there was a suggested change to glyph_symbol. */
            glyphSymbolSuggested?: boolean;
            /** Indicates if there was a suggested change to glyph_type. */
            glyphTypeSuggested?: boolean;
            /** Indicates if there was a suggested change to indent_first_line. */
            indentFirstLineSuggested?: boolean;
            /** Indicates if there was a suggested change to indent_start. */
            indentStartSuggested?: boolean;
            /** Indicates if there was a suggested change to start_number. */
            startNumberSuggested?: boolean;
            /** A mask that indicates which of the fields in text style have been changed in this suggestion. */
            textStyleSuggestionState?: TextStyleSuggestionState;
        }
        interface ObjectReferences {
            /** The object IDs. */
            objectIds?: string[];
        }
        interface OptionalColor {
            /** If set, this will be used as an opaque color. If unset, this represents a transparent color. */
            color?: Color;
        }
        interface PageBreak {
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this PageBreak, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /**
             * The text style of this PageBreak. Similar to text content, like text runs and footnote references, the text style of a page break can affect content layout as well as the styling of
             * text inserted adjacent to it.
             */
            textStyle?: TextStyle;
        }
        interface Paragraph {
            /** The bullet for this paragraph. If not present, the paragraph does not belong to a list. */
            bullet?: Bullet;
            /** The content of the paragraph broken down into its component parts. */
            elements?: ParagraphElement[];
            /** The style of this paragraph. */
            paragraphStyle?: ParagraphStyle;
            /** The IDs of the positioned objects tethered to this paragraph. */
            positionedObjectIds?: string[];
            /** The suggested changes to this paragraph's bullet. */
            suggestedBulletChanges?: { [P in string]: SuggestedBullet };
            /** The suggested paragraph style changes to this paragraph, keyed by suggestion ID. */
            suggestedParagraphStyleChanges?: { [P in string]: SuggestedParagraphStyle };
            /** The IDs of the positioned objects that are suggested to be attached to this paragraph, keyed by suggestion ID. */
            suggestedPositionedObjectIds?: { [P in string]: ObjectReferences };
        }
        interface ParagraphBorder {
            /** The color of the border. */
            color?: OptionalColor;
            /** The dash style of the border. */
            dashStyle?: string;
            /** The padding of the border. */
            padding?: Dimension;
            /** The width of the border. */
            width?: Dimension;
        }
        interface ParagraphElement {
            /** An auto text paragraph element. */
            autoText?: AutoText;
            /** A column break paragraph element. */
            columnBreak?: ColumnBreak;
            /** The zero-base end index of this paragraph element, exclusive, in UTF-16 code units. */
            endIndex?: number;
            /** An equation paragraph element. */
            equation?: Equation;
            /** A footnote reference paragraph element. */
            footnoteReference?: FootnoteReference;
            /** A horizontal rule paragraph element. */
            horizontalRule?: HorizontalRule;
            /** An inline object paragraph element. */
            inlineObjectElement?: InlineObjectElement;
            /** A page break paragraph element. */
            pageBreak?: PageBreak;
            /** The zero-based start index of this paragraph element, in UTF-16 code units. */
            startIndex?: number;
            /** A text run paragraph element. */
            textRun?: TextRun;
        }
        interface ParagraphStyle {
            /** The text alignment for this paragraph. */
            alignment?: string;
            /** Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent. */
            avoidWidowAndOrphan?: boolean;
            /**
             * The border between this paragraph and the next and previous paragraphs. If unset, the value is inherited from the parent. The between border is rendered when the adjacent paragraph
             * has the same border and indent properties. Paragraph borders cannot be partially updated. When making changes to a paragraph border the new border must be specified in its entirety.
             */
            borderBetween?: ParagraphBorder;
            /**
             * The border at the bottom of this paragraph. If unset, the value is inherited from the parent. The bottom border is rendered when the paragraph below has different border and indent
             * properties. Paragraph borders cannot be partially updated. When making changes to a paragraph border the new border must be specified in its entirety.
             */
            borderBottom?: ParagraphBorder;
            /**
             * The border to the left of this paragraph. If unset, the value is inherited from the parent. Paragraph borders cannot be partially updated. When making changes to a paragraph border
             * the new border must be specified in its entirety.
             */
            borderLeft?: ParagraphBorder;
            /**
             * The border to the right of this paragraph. If unset, the value is inherited from the parent. Paragraph borders cannot be partially updated. When making changes to a paragraph border
             * the new border must be specified in its entirety.
             */
            borderRight?: ParagraphBorder;
            /**
             * The border at the top of this paragraph. If unset, the value is inherited from the parent. The top border is rendered when the paragraph above has different border and indent
             * properties. Paragraph borders cannot be partially updated. When making changes to a paragraph border the new border must be specified in its entirety.
             */
            borderTop?: ParagraphBorder;
            /** The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited. */
            direction?: string;
            /** The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only. */
            headingId?: string;
            /**
             * The amount of indentation for the paragraph on the side that corresponds to the end of the text, based on the current paragraph direction. If unset, the value is inherited from the
             * parent.
             */
            indentEnd?: Dimension;
            /** The amount of indentation for the first line of the paragraph. If unset, the value is inherited from the parent. */
            indentFirstLine?: Dimension;
            /**
             * The amount of indentation for the paragraph on the side that corresponds to the start of the text, based on the current paragraph direction. If unset, the value is inherited from
             * the parent.
             */
            indentStart?: Dimension;
            /** Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent. */
            keepLinesTogether?: boolean;
            /** Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent. */
            keepWithNext?: boolean;
            /** The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent. */
            lineSpacing?: number;
            /**
             * The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other
             * properties are updated.
             */
            namedStyleType?: string;
            /** The shading of the paragraph. If unset, the value is inherited from the parent. */
            shading?: Shading;
            /** The amount of extra space above the paragraph. If unset, the value is inherited from the parent. */
            spaceAbove?: Dimension;
            /** The amount of extra space below the paragraph. If unset, the value is inherited from the parent. */
            spaceBelow?: Dimension;
            /** The spacing mode for the paragraph. */
            spacingMode?: string;
            /** A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only. */
            tabStops?: TabStop[];
        }
        interface ParagraphStyleSuggestionState {
            /** Indicates if there was a suggested change to alignment. */
            alignmentSuggested?: boolean;
            /** Indicates if there was a suggested change to avoid_widow_and_orphan. */
            avoidWidowAndOrphanSuggested?: boolean;
            /** Indicates if there was a suggested change to border_between. */
            borderBetweenSuggested?: boolean;
            /** Indicates if there was a suggested change to border_bottom. */
            borderBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to border_left. */
            borderLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to border_right. */
            borderRightSuggested?: boolean;
            /** Indicates if there was a suggested change to border_top. */
            borderTopSuggested?: boolean;
            /** Indicates if there was a suggested change to direction. */
            directionSuggested?: boolean;
            /** Indicates if there was a suggested change to heading_id. */
            headingIdSuggested?: boolean;
            /** Indicates if there was a suggested change to indent_end. */
            indentEndSuggested?: boolean;
            /** Indicates if there was a suggested change to indent_first_line. */
            indentFirstLineSuggested?: boolean;
            /** Indicates if there was a suggested change to indent_start. */
            indentStartSuggested?: boolean;
            /** Indicates if there was a suggested change to keep_lines_together. */
            keepLinesTogetherSuggested?: boolean;
            /** Indicates if there was a suggested change to keep_with_next. */
            keepWithNextSuggested?: boolean;
            /** Indicates if there was a suggested change to line_spacing. */
            lineSpacingSuggested?: boolean;
            /** Indicates if there was a suggested change to named_style_type. */
            namedStyleTypeSuggested?: boolean;
            /** A mask that indicates which of the fields in shading have been changed in this suggestion. */
            shadingSuggestionState?: ShadingSuggestionState;
            /** Indicates if there was a suggested change to space_above. */
            spaceAboveSuggested?: boolean;
            /** Indicates if there was a suggested change to space_below. */
            spaceBelowSuggested?: boolean;
            /** Indicates if there was a suggested change to spacing_mode. */
            spacingModeSuggested?: boolean;
        }
        interface PositionedObject {
            /** The ID of this positioned object. */
            objectId?: string;
            /** The properties of this positioned object. */
            positionedObjectProperties?: PositionedObjectProperties;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion ID. If empty, then this is not a suggested insertion. */
            suggestedInsertionId?: string;
            /** The suggested changes to the positioned object properties, keyed by suggestion ID. */
            suggestedPositionedObjectPropertiesChanges?: { [P in string]: SuggestedPositionedObjectProperties };
        }
        interface PositionedObjectPositioning {
            /** The layout of this positioned object. */
            layout?: string;
            /**
             * The offset of the left edge of the positioned object relative to the beginning of the Paragraph it is tethered to. The exact positioning of the object can depend on other content in
             * the document and the document's styling.
             */
            leftOffset?: Dimension;
            /**
             * The offset of the top edge of the positioned object relative to the beginning of the Paragraph it is tethered to. The exact positioning of the object can depend on other content in
             * the document and the document's styling.
             */
            topOffset?: Dimension;
        }
        interface PositionedObjectPositioningSuggestionState {
            /** Indicates if there was a suggested change to layout. */
            layoutSuggested?: boolean;
            /** Indicates if there was a suggested change to left_offset. */
            leftOffsetSuggested?: boolean;
            /** Indicates if there was a suggested change to top_offset. */
            topOffsetSuggested?: boolean;
        }
        interface PositionedObjectProperties {
            /** The embedded object of this positioned object. */
            embeddedObject?: EmbeddedObject;
            /** The positioning of this positioned object relative to the newline of the Paragraph that references this positioned object. */
            positioning?: PositionedObjectPositioning;
        }
        interface PositionedObjectPropertiesSuggestionState {
            /** A mask that indicates which of the fields in embedded_object have been changed in this suggestion. */
            embeddedObjectSuggestionState?: EmbeddedObjectSuggestionState;
            /** A mask that indicates which of the fields in positioning have been changed in this suggestion. */
            positioningSuggestionState?: PositionedObjectPositioningSuggestionState;
        }
        interface Range {
            /**
             * The zero-based end index of this range, exclusive, in UTF-16 code units. In all current uses, an end index must be provided. This field is an Int32Value in order to accommodate
             * future use cases with open-ended ranges.
             */
            endIndex?: number;
            /** The ID of the header, footer or footnote that this range is contained in. An empty segment ID signifies the document's body. */
            segmentId?: string;
            /**
             * The zero-based start index of this range, in UTF-16 code units. In all current uses, a start index must be provided. This field is an Int32Value in order to accommodate future use
             * cases with open-ended ranges.
             */
            startIndex?: number;
        }
        interface ReplaceAllTextRequest {
            /** Finds text in the document matching this substring. */
            containsText?: SubstringMatchCriteria;
            /** The text that will replace the matched text. */
            replaceText?: string;
        }
        interface ReplaceAllTextResponse {
            /** The number of occurrences changed by replacing all text. */
            occurrencesChanged?: number;
        }
        interface ReplaceImageRequest {
            /** The ID of the existing image that will be replaced. */
            imageObjectId?: string;
            /** The replacement method. */
            imageReplaceMethod?: string;
            /**
             * The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25
             * megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI can be at most 2 kB in length. The URI itself is saved with the image, and exposed via the
             * ImageProperties.source_uri field.
             */
            uri?: string;
        }
        interface ReplaceNamedRangeContentRequest {
            /** The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned. */
            namedRangeId?: string;
            /**
             * The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no
             * named ranges with the given name, then the request will be a no-op.
             */
            namedRangeName?: string;
            /** Replaces the content of the specified named range(s) with the given text. */
            text?: string;
        }
        interface Request {
            /** Creates a footer. */
            createFooter?: CreateFooterRequest;
            /** Creates a footnote. */
            createFootnote?: CreateFootnoteRequest;
            /** Creates a header. */
            createHeader?: CreateHeaderRequest;
            /** Creates a named range. */
            createNamedRange?: CreateNamedRangeRequest;
            /** Creates bullets for paragraphs. */
            createParagraphBullets?: CreateParagraphBulletsRequest;
            /** Deletes content from the document. */
            deleteContentRange?: DeleteContentRangeRequest;
            /** Deletes a footer from the document. */
            deleteFooter?: DeleteFooterRequest;
            /** Deletes a header from the document. */
            deleteHeader?: DeleteHeaderRequest;
            /** Deletes a named range. */
            deleteNamedRange?: DeleteNamedRangeRequest;
            /** Deletes bullets from paragraphs. */
            deleteParagraphBullets?: DeleteParagraphBulletsRequest;
            /** Deletes a positioned object from the document. */
            deletePositionedObject?: DeletePositionedObjectRequest;
            /** Deletes a column from a table. */
            deleteTableColumn?: DeleteTableColumnRequest;
            /** Deletes a row from a table. */
            deleteTableRow?: DeleteTableRowRequest;
            /** Inserts an inline image at the specified location. */
            insertInlineImage?: InsertInlineImageRequest;
            /** Inserts a page break at the specified location. */
            insertPageBreak?: InsertPageBreakRequest;
            /** Inserts a section break at the specified location. */
            insertSectionBreak?: InsertSectionBreakRequest;
            /** Inserts a table at the specified location. */
            insertTable?: InsertTableRequest;
            /** Inserts an empty column into a table. */
            insertTableColumn?: InsertTableColumnRequest;
            /** Inserts an empty row into a table. */
            insertTableRow?: InsertTableRowRequest;
            /** Inserts text at the specified location. */
            insertText?: InsertTextRequest;
            /** Merges cells in a table. */
            mergeTableCells?: MergeTableCellsRequest;
            /** Replaces all instances of the specified text. */
            replaceAllText?: ReplaceAllTextRequest;
            /** Replaces an image in the document. */
            replaceImage?: ReplaceImageRequest;
            /** Replaces the content in a named range. */
            replaceNamedRangeContent?: ReplaceNamedRangeContentRequest;
            /** Unmerges cells in a table. */
            unmergeTableCells?: UnmergeTableCellsRequest;
            /** Updates the style of the document. */
            updateDocumentStyle?: UpdateDocumentStyleRequest;
            /** Updates the paragraph style at the specified range. */
            updateParagraphStyle?: UpdateParagraphStyleRequest;
            /** Updates the section style of the specified range. */
            updateSectionStyle?: UpdateSectionStyleRequest;
            /** Updates the style of table cells. */
            updateTableCellStyle?: UpdateTableCellStyleRequest;
            /** Updates the properties of columns in a table. */
            updateTableColumnProperties?: UpdateTableColumnPropertiesRequest;
            /** Updates the row style in a table. */
            updateTableRowStyle?: UpdateTableRowStyleRequest;
            /** Updates the text style at the specified range. */
            updateTextStyle?: UpdateTextStyleRequest;
        }
        interface Response {
            /** The result of creating a footer. */
            createFooter?: CreateFooterResponse;
            /** The result of creating a footnote. */
            createFootnote?: CreateFootnoteResponse;
            /** The result of creating a header. */
            createHeader?: CreateHeaderResponse;
            /** The result of creating a named range. */
            createNamedRange?: CreateNamedRangeResponse;
            /** The result of inserting an inline image. */
            insertInlineImage?: InsertInlineImageResponse;
            /** The result of inserting an inline Google Sheets chart. */
            insertInlineSheetsChart?: InsertInlineSheetsChartResponse;
            /** The result of replacing text. */
            replaceAllText?: ReplaceAllTextResponse;
        }
        interface RgbColor {
            /** The blue component of the color, from 0.0 to 1.0. */
            blue?: number;
            /** The green component of the color, from 0.0 to 1.0. */
            green?: number;
            /** The red component of the color, from 0.0 to 1.0. */
            red?: number;
        }
        interface SectionBreak {
            /** The style of the section after this section break. */
            sectionStyle?: SectionStyle;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
        }
        interface SectionColumnProperties {
            /** The padding at the end of the column. */
            paddingEnd?: Dimension;
            /** Output only. The width of the column. */
            width?: Dimension;
        }
        interface SectionStyle {
            /**
             * The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than three
             * columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
             */
            columnProperties?: SectionColumnProperties[];
            /**
             * The style of column separators. This style can be set even when there is one column in the section. When updating this property, setting a concrete value is required. Unsetting this
             * property results in a 400 bad request error.
             */
            columnSeparatorStyle?: string;
            /**
             * The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property
             * results in a 400 bad request error.
             */
            contentDirection?: string;
            /**
             * The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from
             * DocumentStyle's default_footer_id. This property is read-only.
             */
            defaultFooterId?: string;
            /**
             * The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from
             * DocumentStyle's default_header_id. This property is read-only.
             */
            defaultHeaderId?: string;
            /**
             * The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section.
             * If it is false, the footers on even pages uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first
             * SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
             */
            evenPageFooterId?: string;
            /**
             * The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section.
             * If it is false, the headers on even pages uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first
             * SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
             */
            evenPageHeaderId?: string;
            /**
             * The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it
             * is false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset
             * in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
             */
            firstPageFooterId?: string;
            /**
             * The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it
             * is false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset
             * in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
             */
            firstPageHeaderId?: string;
            /**
             * The bottom page margin of the section. If unset, uses margin_bottom from DocumentStyle. When updating this property, setting a concrete value is required. Unsetting this property
             * results in a 400 bad request error.
             */
            marginBottom?: Dimension;
            /**
             * The footer margin of the section. If unset, uses margin_footer from DocumentStyle. If updated, use_custom_header_footer_margins is set to true on DocumentStyle. The value of
             * use_custom_header_footer_margins on DocumentStyle indicates if a footer margin is being respected for this section When updating this property, setting a concrete value is required.
             * Unsetting this property results in a 400 bad request error.
             */
            marginFooter?: Dimension;
            /**
             * The header margin of the section. If unset, uses margin_header from DocumentStyle. If updated, use_custom_header_footer_margins is set to true on DocumentStyle. The value of
             * use_custom_header_footer_margins on DocumentStyle indicates if a header margin is being respected for this section. When updating this property, setting a concrete value is
             * required. Unsetting this property results in a 400 bad request error.
             */
            marginHeader?: Dimension;
            /**
             * The left page margin of the section. If unset, uses margin_left from DocumentStyle. Updating left margin causes columns in this section to resize. Since the margin affects column
             * width, it is applied before column properties. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
             */
            marginLeft?: Dimension;
            /**
             * The right page margin of the section. If unset, uses margin_right from DocumentStyle. Updating right margin causes columns in this section to resize. Since the margin affects column
             * width, it is applied before column properties. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
             */
            marginRight?: Dimension;
            /**
             * The top page margin of the section. If unset, uses margin_top from DocumentStyle. When updating this property, setting a concrete value is required. Unsetting this property results
             * in a 400 bad request error.
             */
            marginTop?: Dimension;
            /**
             * The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first
             * SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request
             * error.
             */
            pageNumberStart?: number;
            /** Output only. The type of section. */
            sectionType?: string;
            /**
             * Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first
             * section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property
             * results in a 400 bad request error.
             */
            useFirstPageHeaderFooter?: boolean;
        }
        interface Shading {
            /** The background color of this paragraph shading. */
            backgroundColor?: OptionalColor;
        }
        interface ShadingSuggestionState {
            /** Indicates if there was a suggested change to the Shading. */
            backgroundColorSuggested?: boolean;
        }
        interface SheetsChartReference {
            /** The ID of the specific chart in the Google Sheets spreadsheet that is embedded. */
            chartId?: number;
            /** The ID of the Google Sheets spreadsheet that contains the source chart. */
            spreadsheetId?: string;
        }
        interface SheetsChartReferenceSuggestionState {
            /** Indicates if there was a suggested change to chart_id. */
            chartIdSuggested?: boolean;
            /** Indicates if there was a suggested change to spreadsheet_id. */
            spreadsheetIdSuggested?: boolean;
        }
        interface Size {
            /** The height of the object. */
            height?: Dimension;
            /** The width of the object. */
            width?: Dimension;
        }
        interface SizeSuggestionState {
            /** Indicates if there was a suggested change to height. */
            heightSuggested?: boolean;
            /** Indicates if there was a suggested change to width. */
            widthSuggested?: boolean;
        }
        interface StructuralElement {
            /** The zero-based end index of this structural element, exclusive, in UTF-16 code units. */
            endIndex?: number;
            /** A paragraph type of structural element. */
            paragraph?: Paragraph;
            /** A section break type of structural element. */
            sectionBreak?: SectionBreak;
            /** The zero-based start index of this structural element, in UTF-16 code units. */
            startIndex?: number;
            /** A table type of structural element. */
            table?: Table;
            /** A table of contents type of structural element. */
            tableOfContents?: TableOfContents;
        }
        interface SubstringMatchCriteria {
            /** Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive. */
            matchCase?: boolean;
            /** The text to search for in the document. */
            text?: string;
        }
        interface SuggestedBullet {
            /** A Bullet that only includes the changes made in this suggestion. This can be used along with the bullet_suggestion_state to see which fields have changed and their new values. */
            bullet?: Bullet;
            /** A mask that indicates which of the fields on the base Bullet have been changed in this suggestion. */
            bulletSuggestionState?: BulletSuggestionState;
        }
        interface SuggestedDocumentStyle {
            /**
             * A DocumentStyle that only includes the changes made in this suggestion. This can be used along with the document_style_suggestion_state to see which fields have changed and their
             * new values.
             */
            documentStyle?: DocumentStyle;
            /** A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. */
            documentStyleSuggestionState?: DocumentStyleSuggestionState;
        }
        interface SuggestedInlineObjectProperties {
            /**
             * An InlineObjectProperties that only includes the changes made in this suggestion. This can be used along with the inline_object_properties_suggestion_state to see which fields have
             * changed and their new values.
             */
            inlineObjectProperties?: InlineObjectProperties;
            /** A mask that indicates which of the fields on the base InlineObjectProperties have been changed in this suggestion. */
            inlineObjectPropertiesSuggestionState?: InlineObjectPropertiesSuggestionState;
        }
        interface SuggestedListProperties {
            /**
             * A ListProperties that only includes the changes made in this suggestion. This can be used along with the list_properties_suggestion_state to see which fields have changed and their
             * new values.
             */
            listProperties?: ListProperties;
            /** A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion. */
            listPropertiesSuggestionState?: ListPropertiesSuggestionState;
        }
        interface SuggestedNamedStyles {
            /**
             * A NamedStyles that only includes the changes made in this suggestion. This can be used along with the named_styles_suggestion_state to see which fields have changed and their new
             * values.
             */
            namedStyles?: NamedStyles;
            /** A mask that indicates which of the fields on the base NamedStyles have been changed in this suggestion. */
            namedStylesSuggestionState?: NamedStylesSuggestionState;
        }
        interface SuggestedParagraphStyle {
            /**
             * A ParagraphStyle that only includes the changes made in this suggestion. This can be used along with the paragraph_suggestion_state to see which fields have changed and their new
             * values.
             */
            paragraphStyle?: ParagraphStyle;
            /** A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. */
            paragraphStyleSuggestionState?: ParagraphStyleSuggestionState;
        }
        interface SuggestedPositionedObjectProperties {
            /**
             * A PositionedObjectProperties that only includes the changes made in this suggestion. This can be used along with the positioned_object_properties_suggestion_state to see which
             * fields have changed and their new values.
             */
            positionedObjectProperties?: PositionedObjectProperties;
            /** A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion. */
            positionedObjectPropertiesSuggestionState?: PositionedObjectPropertiesSuggestionState;
        }
        interface SuggestedTableCellStyle {
            /**
             * A TableCellStyle that only includes the changes made in this suggestion. This can be used along with the table_cell_style_suggestion_state to see which fields have changed and their
             * new values.
             */
            tableCellStyle?: TableCellStyle;
            /** A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. */
            tableCellStyleSuggestionState?: TableCellStyleSuggestionState;
        }
        interface SuggestedTableRowStyle {
            /**
             * A TableRowStyle that only includes the changes made in this suggestion. This can be used along with the table_row_style_suggestion_state to see which fields have changed and their
             * new values.
             */
            tableRowStyle?: TableRowStyle;
            /** A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion. */
            tableRowStyleSuggestionState?: TableRowStyleSuggestionState;
        }
        interface SuggestedTextStyle {
            /**
             * A TextStyle that only includes the changes made in this suggestion. This can be used along with the text_style_suggestion_state to see which fields have changed and their new
             * values.
             */
            textStyle?: TextStyle;
            /** A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. */
            textStyleSuggestionState?: TextStyleSuggestionState;
        }
        interface Table {
            /** Number of columns in the table. It is possible for a table to be non-rectangular, so some rows may have a different number of cells. */
            columns?: number;
            /** Number of rows in the table. */
            rows?: number;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A Table may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The contents and style of each row. */
            tableRows?: TableRow[];
            /** The style of the table. */
            tableStyle?: TableStyle;
        }
        interface TableCell {
            /** The content of the cell. */
            content?: StructuralElement[];
            /** The zero-based end index of this cell, exclusive, in UTF-16 code units. */
            endIndex?: number;
            /** The zero-based start index of this cell, in UTF-16 code units. */
            startIndex?: number;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A TableCell may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested changes to the table cell style, keyed by suggestion ID. */
            suggestedTableCellStyleChanges?: { [P in string]: SuggestedTableCellStyle };
            /** The style of the cell. */
            tableCellStyle?: TableCellStyle;
        }
        interface TableCellBorder {
            /** The color of the border. This color cannot be transparent. */
            color?: OptionalColor;
            /** The dash style of the border. */
            dashStyle?: string;
            /** The width of the border. */
            width?: Dimension;
        }
        interface TableCellLocation {
            /** The zero-based column index. For example, the second column in the table has a column index of 1. */
            columnIndex?: number;
            /** The zero-based row index. For example, the second row in the table has a row index of 1. */
            rowIndex?: number;
            /** The location where the table starts in the document. */
            tableStartLocation?: Location;
        }
        interface TableCellStyle {
            /** The background color of the cell. */
            backgroundColor?: OptionalColor;
            /** The bottom border of the cell. */
            borderBottom?: TableCellBorder;
            /** The left border of the cell. */
            borderLeft?: TableCellBorder;
            /** The right border of the cell. */
            borderRight?: TableCellBorder;
            /** The top border of the cell. */
            borderTop?: TableCellBorder;
            /** The column span of the cell. This property is read-only. */
            columnSpan?: number;
            /** The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor. */
            contentAlignment?: string;
            /** The bottom padding of the cell. */
            paddingBottom?: Dimension;
            /** The left padding of the cell. */
            paddingLeft?: Dimension;
            /** The right padding of the cell. */
            paddingRight?: Dimension;
            /** The top padding of the cell. */
            paddingTop?: Dimension;
            /** The row span of the cell. This property is read-only. */
            rowSpan?: number;
        }
        interface TableCellStyleSuggestionState {
            /** Indicates if there was a suggested change to background_color. */
            backgroundColorSuggested?: boolean;
            /** Indicates if there was a suggested change to border_bottom. */
            borderBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to border_left. */
            borderLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to border_right. */
            borderRightSuggested?: boolean;
            /** Indicates if there was a suggested change to border_top. */
            borderTopSuggested?: boolean;
            /** Indicates if there was a suggested change to column_span. */
            columnSpanSuggested?: boolean;
            /** Indicates if there was a suggested change to content_alignment. */
            contentAlignmentSuggested?: boolean;
            /** Indicates if there was a suggested change to padding_bottom. */
            paddingBottomSuggested?: boolean;
            /** Indicates if there was a suggested change to padding_left. */
            paddingLeftSuggested?: boolean;
            /** Indicates if there was a suggested change to padding_right. */
            paddingRightSuggested?: boolean;
            /** Indicates if there was a suggested change to padding_top. */
            paddingTopSuggested?: boolean;
            /** Indicates if there was a suggested change to row_span. */
            rowSpanSuggested?: boolean;
        }
        interface TableColumnProperties {
            /** The width of the column. Set when the column's `width_type` is FIXED_WIDTH. */
            width?: Dimension;
            /** The width type of the column. */
            widthType?: string;
        }
        interface TableOfContents {
            /** The content of the table of contents. */
            content?: StructuralElement[];
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
        }
        interface TableRange {
            /** The column span of the table range. */
            columnSpan?: number;
            /** The row span of the table range. */
            rowSpan?: number;
            /** The cell location where the table range starts. */
            tableCellLocation?: TableCellLocation;
        }
        interface TableRow {
            /** The zero-based end index of this row, exclusive, in UTF-16 code units. */
            endIndex?: number;
            /** The zero-based start index of this row, in UTF-16 code units. */
            startIndex?: number;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A TableRow may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested style changes to this row, keyed by suggestion ID. */
            suggestedTableRowStyleChanges?: { [P in string]: SuggestedTableRowStyle };
            /**
             * The contents and style of each cell in this row. It is possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same
             * table.
             */
            tableCells?: TableCell[];
            /** The style of the table row. */
            tableRowStyle?: TableRowStyle;
        }
        interface TableRowStyle {
            /** The minimum height of the row. The row will be rendered in the Docs editor at a height equal to or greater than this value in order to show all the content in the row's cells. */
            minRowHeight?: Dimension;
        }
        interface TableRowStyleSuggestionState {
            /** Indicates if there was a suggested change to min_row_height. */
            minRowHeightSuggested?: boolean;
        }
        interface TableStyle {
            /** The properties of each column. Note that in Docs, tables contain rows and rows contain cells, similar to HTML. So the properties for a row can be found on the row's table_row_style. */
            tableColumnProperties?: TableColumnProperties[];
        }
        interface TabStop {
            /** The alignment of this tab stop. If unset, the value defaults to START. */
            alignment?: string;
            /** The offset between this tab stop and the start margin. */
            offset?: Dimension;
        }
        interface TextRun {
            /** The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907. */
            content?: string;
            /** The suggested deletion IDs. If empty, then there are no suggested deletions of this content. */
            suggestedDeletionIds?: string[];
            /** The suggested insertion IDs. A TextRun may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion. */
            suggestedInsertionIds?: string[];
            /** The suggested text style changes to this run, keyed by suggestion ID. */
            suggestedTextStyleChanges?: { [P in string]: SuggestedTextStyle };
            /** The text style of this run. */
            textStyle?: TextStyle;
        }
        interface TextStyle {
            /** The background color of the text. If set, the color is either an RGB color or transparent, depending on the `color` field. */
            backgroundColor?: OptionalColor;
            /**
             * The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the
             * `font_size` field. The `font_size` itself is not affected by changes in this field.
             */
            baselineOffset?: string;
            /** Whether or not the text is rendered as bold. */
            bold?: boolean;
            /** The size of the text's font. */
            fontSize?: Dimension;
            /** The foreground color of the text. If set, the color is either an RGB color or transparent, depending on the `color` field. */
            foregroundColor?: OptionalColor;
            /** Whether or not the text is italicized. */
            italic?: boolean;
            /**
             * The hyperlink destination of the text. If unset, there is no link. Links are not inherited from parent text. Changing the link in an update request causes some other changes to the
             * text style of the range: * When setting a link, the text foreground color will be updated to the default link color and the text will be underlined. If these fields are modified in
             * the same request, those values will be used instead of the link defaults. * Setting a link on a text range that overlaps with an existing link will also update the existing link to
             * point to the new URL. * Links are not settable on newline characters. As a result, setting a link on a text range that crosses a paragraph boundary, such as `"ABC\n123"`, will
             * separate the newline character(s) into their own text runs. The link will be applied separately to the runs before and after the newline. * Removing a link will update the text
             * style of the range to match the style of the preceding text (or the default text styles if the preceding text is another link) unless different styles are being set in the same
             * request.
             */
            link?: Link;
            /** Whether or not the text is in small capital letters. */
            smallCaps?: boolean;
            /** Whether or not the text is struck through. */
            strikethrough?: boolean;
            /** Whether or not the text is underlined. */
            underline?: boolean;
            /**
             * The font family and rendered weight of the text. If an update request specifies values for both `weighted_font_family` and `bold`, the `weighted_font_family` is applied first, then
             * `bold`. If `weighted_font_family#weight` is not set, it defaults to `400`. If `weighted_font_family` is set, then `weighted_font_family#font_family` must also be set with a
             * non-empty value. Otherwise, a 400 bad request error is returned.
             */
            weightedFontFamily?: WeightedFontFamily;
        }
        interface TextStyleSuggestionState {
            /** Indicates if there was a suggested change to background_color. */
            backgroundColorSuggested?: boolean;
            /** Indicates if there was a suggested change to baseline_offset. */
            baselineOffsetSuggested?: boolean;
            /** Indicates if there was a suggested change to bold. */
            boldSuggested?: boolean;
            /** Indicates if there was a suggested change to font_size. */
            fontSizeSuggested?: boolean;
            /** Indicates if there was a suggested change to foreground_color. */
            foregroundColorSuggested?: boolean;
            /** Indicates if there was a suggested change to italic. */
            italicSuggested?: boolean;
            /** Indicates if there was a suggested change to link. */
            linkSuggested?: boolean;
            /** Indicates if there was a suggested change to small_caps. */
            smallCapsSuggested?: boolean;
            /** Indicates if there was a suggested change to strikethrough. */
            strikethroughSuggested?: boolean;
            /** Indicates if there was a suggested change to underline. */
            underlineSuggested?: boolean;
            /** Indicates if there was a suggested change to weighted_font_family. */
            weightedFontFamilySuggested?: boolean;
        }
        interface UnmergeTableCellsRequest {
            /**
             * The table range specifying which cells of the table to unmerge. All merged cells in this range will be unmerged, and cells that are already unmerged will not be affected. If the
             * range has no merged cells, the request will do nothing. If there is text in any of the merged cells, the text will remain in the "head" cell of the resulting block of unmerged
             * cells. The "head" cell is the upper-left cell when the content direction is from left to right, and the upper-right otherwise.
             */
            tableRange?: TableRange;
        }
        interface UpdateDocumentStyleRequest {
            /**
             * The styles to set on the document. Certain document style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of DocumentStyle
             * for more information.
             */
            documentStyle?: DocumentStyle;
            /**
             * The fields that should be updated. At least one field must be specified. The root `document_style` is implied and should not be specified. A single `"*"` can be used as short-hand
             * for listing every field. For example to update the background, set `fields` to `"background"`.
             */
            fields?: string;
        }
        interface UpdateParagraphStyleRequest {
            /**
             * The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. For example, to update the paragraph
             * style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
             */
            fields?: string;
            /**
             * The styles to set on the paragraphs. Certain paragraph style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of
             * ParagraphStyle for more information.
             */
            paragraphStyle?: ParagraphStyle;
            /** The range overlapping the paragraphs to style. */
            range?: Range;
        }
        interface UpdateSectionStyleRequest {
            /**
             * The fields that should be updated. At least one field must be specified. The root `section_style` is implied and must not be specified. A single `"*"` can be used as short-hand for
             * listing every field. For example to update the left margin, set `fields` to `"margin_left"`.
             */
            fields?: string;
            /** The range overlapping the sections to style. Because section breaks can only be inserted inside the body, the segment ID field must be empty. */
            range?: Range;
            /**
             * The styles to be set on the section. Certain section style changes may cause other changes in order to mirror the behavior of the Docs editor. See the documentation of SectionStyle
             * for more information.
             */
            sectionStyle?: SectionStyle;
        }
        interface UpdateTableCellStyleRequest {
            /**
             * The fields that should be updated. At least one field must be specified. The root `tableCellStyle` is implied and should not be specified. A single `"*"` can be used as short-hand
             * for listing every field. For example to update the table cell background color, set `fields` to `"backgroundColor"`. To reset a property to its default value, include its field name
             * in the field mask but leave the field itself unset.
             */
            fields?: string;
            /**
             * The style to set on the table cells. When updating borders, if a cell shares a border with an adjacent cell, the corresponding border property of the adjacent cell is updated as
             * well. Borders that are merged and invisible are not updated. Since updating a border shared by adjacent cells in the same request can cause conflicting border updates, border
             * updates are applied in the following order: - `border_right` - `border_left` - `border_bottom` - `border_top`
             */
            tableCellStyle?: TableCellStyle;
            /** The table range representing the subset of the table to which the updates are applied. */
            tableRange?: TableRange;
            /** The location where the table starts in the document. When specified, the updates are applied to all the cells in the table. */
            tableStartLocation?: Location;
        }
        interface UpdateTableColumnPropertiesRequest {
            /** The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated. */
            columnIndices?: number[];
            /**
             * The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as
             * short-hand for listing every field. For example to update the column width, set `fields` to `"width"`.
             */
            fields?: string;
            /** The table column properties to update. If the value of `table_column_properties#width` is less than 5 points (5/72 inch), a 400 bad request error is returned. */
            tableColumnProperties?: TableColumnProperties;
            /** The location where the table starts in the document. */
            tableStartLocation?: Location;
        }
        interface UpdateTableRowStyleRequest {
            /**
             * The fields that should be updated. At least one field must be specified. The root `tableRowStyle` is implied and should not be specified. A single `"*"` can be used as short-hand
             * for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`.
             */
            fields?: string;
            /** The list of zero-based row indices whose style should be updated. If no indices are specified, all rows will be updated. */
            rowIndices?: number[];
            /** The styles to be set on the rows. */
            tableRowStyle?: TableRowStyle;
            /** The location where the table starts in the document. */
            tableStartLocation?: Location;
        }
        interface UpdateTextStyleRequest {
            /**
             * The fields that should be updated. At least one field must be specified. The root `text_style` is implied and should not be specified. A single `"*"` can be used as short-hand for
             * listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but
             * leave the field itself unset.
             */
            fields?: string;
            /**
             * The range of text to style. The range may be extended to include adjacent newlines. If the range fully contains a paragraph belonging to a list, the paragraph's bullet is also
             * updated with the matching text style. Ranges cannot be inserted inside a relative UpdateTextStyleRequest.
             */
            range?: Range;
            /**
             * The styles to set on the text. If the value for a particular style matches that of the parent, that style will be set to inherit. Certain text style changes may cause other changes
             * in order to to mirror the behavior of the Docs editor. See the documentation of TextStyle for more information.
             */
            textStyle?: TextStyle;
        }
        interface WeightedFontFamily {
            /**
             * The font family of the text. The font family can be any font from the Font menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the
             * text is rendered in `Arial`.
             */
            fontFamily?: string;
            /**
             * The weight of the font. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the
             * CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. The default value is `400` ("normal"). The font
             * weight makes up just one component of the rendered font weight. The rendered weight is determined by a combination of the `weight` and the text style's resolved `bold` value, after
             * accounting for inheritance: * If the text is bold and the weight is less than `400`, the rendered weight is 400. * If the text is bold and the weight is greater than or equal to
             * `400` but is less than `700`, the rendered weight is `700`. * If the weight is greater than or equal to `700`, the rendered weight is equal to the weight. * If the text is not bold,
             * the rendered weight is equal to the weight.
             */
            weight?: number;
        }
        interface WriteControl {
            /**
             * The revision ID of the document that the write request will be applied to. If this is not the latest revision of the document, the request will not be processed and will return a
             * 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
             */
            requiredRevisionId?: string;
            /**
             * The target revision ID of the document that the write request will be applied to. If collaborator changes have occurred after the document was read using the API, the changes
             * produced by this write request will be transformed against the collaborator changes. This results in a new revision of the document which incorporates both the changes in the
             * request and the collaborator changes, and the Docs server will resolve conflicting changes. When using `target_revision_id`, the API client can be thought of as another collaborator
             * of the document. The target revision ID may only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request will
             * not be processed and will return a 400 bad request error and the request should be retried after reading the latest version of the document. In most cases a `revision_id` will
             * remain valid for use as a target revision for several minutes after it is read, but for frequently-edited documents this window may be shorter.
             */
            targetRevisionId?: string;
        }
        interface DocumentsResource {
            /**
             * Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be
             * applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The
             * order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two
             * empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your
             * changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your
             * request are guaranteed to be applied together atomically.
             */
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the document to update. */
                documentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: BatchUpdateDocumentRequest;
            }): client.Request<BatchUpdateDocumentResponse>;
            batchUpdate(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the document to update. */
                documentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: BatchUpdateDocumentRequest): client.Request<BatchUpdateDocumentResponse>;
            /** Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
                /** Request body */
                resource: Document;
            }): client.Request<Document>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            },
            body: Document): client.Request<Document>;
            /** Gets the latest version of the specified document. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?: string;
                /** OAuth access token. */
                access_token?: string;
                /** Data format for response. */
                alt?: string;
                /** JSONP */
                callback?: string;
                /** The ID of the document to retrieve. */
                documentId: string;
                /** Selector specifying which fields to include in a partial response. */
                fields?: string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?: string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?: string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?: boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?: string;
                /**
                 * The suggestions view mode to apply to the document. This allows viewing the document with all suggestions inline, accepted or rejected. If one is not specified,
                 * DEFAULT_FOR_CURRENT_ACCESS is used.
                 */
                suggestionsViewMode?: string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?: string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?: string;
            }): client.Request<Document>;
        }

        const documents: DocumentsResource;
    }
}
