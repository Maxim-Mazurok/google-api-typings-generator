/* Type definitions for non-npm package Air Quality API v1 0.0 */
// Project: https://developers.google.com/maps/documentation/air-quality
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://airquality.googleapis.com/$discovery/rest?version=v1
// Revision: 20250127

/// <reference types="gapi.client" />

declare namespace gapi.client {
  /** Load Air Quality API v1 */
  function load(
    urlOrObject: 'https://airquality.googleapis.com/$discovery/rest?version=v1',
  ): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'airquality', version: 'v1'): Promise<void>;
  /** @deprecated Please load APIs with discovery documents. */
  function load(name: 'airquality', version: 'v1', callback: () => any): void;

  namespace airquality {
    interface AdditionalInfo {
      /** Text representing the pollutant's main health effects. */
      effects?: string;
      /** Text representing the pollutant's main emission sources. */
      sources?: string;
    }
    interface AirQualityIndex {
      /** The index's numeric score. Examples: 10, 100. The value is not normalized and should only be interpreted in the context of its related air-quality index. For non-numeric indexes, this field will not be returned. Note: This field should be used for calculations, graph display, etc. For displaying the index score, you should use the AQI display field. */
      aqi?: number;
      /** Textual representation of the index numeric score, that may include prefix or suffix symbols, which usually represents the worst index score. Example: >100 or 10+. Note: This field should be used when you want to display the index score. For non-numeric indexes, this field is empty. */
      aqiDisplay?: string;
      /** Textual classification of the index numeric score interpretation. For example: "Excellent air quality". */
      category?: string;
      /** The index's code. This field represents the index for programming purposes by using snake case instead of spaces. Examples: "uaqi", "fra_atmo". */
      code?: string;
      /** The color used to represent the AQI numeric score. */
      color?: Color;
      /** A human readable representation of the index name. Example: "AQI (US)" */
      displayName?: string;
      /** The chemical symbol of the dominant pollutant. For example: "CO". */
      dominantPollutant?: string;
    }
    interface Color {
      /** The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0). */
      alpha?: number;
      /** The amount of blue in the color as a value in the interval [0, 1]. */
      blue?: number;
      /** The amount of green in the color as a value in the interval [0, 1]. */
      green?: number;
      /** The amount of red in the color as a value in the interval [0, 1]. */
      red?: number;
    }
    interface Concentration {
      /** Units for measuring this pollutant concentration. */
      units?: string;
      /** Value of the pollutant concentration. */
      value?: number;
    }
    interface CustomLocalAqi {
      /** The AQI to associate the country/region with. Value should be a [valid index](/maps/documentation/air-quality/laqis) code. */
      aqi?: string;
      /** The country/region requiring the custom AQI. Value should be provided using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. */
      regionCode?: string;
    }
    interface HealthRecommendations {
      /** Sports and other strenuous outdoor activities. */
      athletes?: string;
      /** Younger populations including children, toddlers, and babies. */
      children?: string;
      /** Retirees and people older than the general population. */
      elderly?: string;
      /** No specific sensitivities. */
      generalPopulation?: string;
      /** Heart and circulatory system diseases. */
      heartDiseasePopulation?: string;
      /** Respiratory related problems and asthma suffers. */
      lungDiseasePopulation?: string;
      /** Women at all stages of pregnancy. */
      pregnantWomen?: string;
    }
    interface HourInfo {
      /** A rounded down timestamp indicating the time the data refers to in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. For example: "2014-10-02T15:00:00Z". */
      dateTime?: string;
      /** Health advice and recommended actions related to the reported air quality conditions. Recommendations are tailored differently for populations at risk, groups with greater sensitivities to pollutants, and the general population. */
      healthRecommendations?: HealthRecommendations;
      /** Based on the request parameters, this list will include (up to) two air quality indexes: - Universal AQI. Will be returned if the universalAqi boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra computation is specified. */
      indexes?: AirQualityIndex[];
      /** A list of pollutants affecting the location specified in the request. Note: This field will be returned only for requests that specified one or more of the following extra computations: POLLUTANT_ADDITIONAL_INFO, DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION. */
      pollutants?: Pollutant[];
    }
    interface HourlyForecast {
      /** A rounded down timestamp indicating the time (hour) the data refers to in RFC3339 UTC "Zulu" format. For example: "2014-10-02T15:00:00Z". */
      dateTime?: string;
      /** Health advice and recommended actions related to the reported air quality conditions. Recommendations are tailored differently for populations at risk, groups with greater sensitivities to pollutants, and the general population. */
      healthRecommendations?: HealthRecommendations;
      /** Based on the request parameters, this list will include (up to) two air quality indexes: - Universal AQI. Will be returned if the `universal_aqi` boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra computation is specified. */
      indexes?: AirQualityIndex[];
      /** A list of pollutants affecting the location specified in the request. Note: This field will be returned only for requests that specified one or more of the following extra computations: POLLUTANT_ADDITIONAL_INFO, DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION. */
      pollutants?: Pollutant[];
    }
    interface HttpBody {
      /** The HTTP Content-Type header value specifying the content type of the body. */
      contentType?: string;
      /** The HTTP request/response body as raw binary. */
      data?: string;
      /** Application specific response metadata. Must be set in the first response for streaming APIs. */
      extensions?: Array<{[P in string]: any}>;
    }
    interface Interval {
      /** Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end. */
      endTime?: string;
      /** Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start. */
      startTime?: string;
    }
    interface LatLng {
      /** The latitude in degrees. It must be in the range [-90.0, +90.0]. */
      latitude?: number;
      /** The longitude in degrees. It must be in the range [-180.0, +180.0]. */
      longitude?: number;
    }
    interface LookupCurrentConditionsRequest {
      /** Optional. Expresses a 'country/region to AQI' relationship. Pairs a country/region with a desired AQI so that air quality data that is required for that country/region will be displayed according to the chosen AQI. This parameter can be used to specify a non-default AQI for a given country, for example, to get the US EPA index for Canada rather than the default index for Canada. */
      customLocalAqis?: CustomLocalAqi[];
      /** Optional. Additional features that can be optionally enabled. Specifying extra computations will result in the relevant elements and fields to be returned in the response. */
      extraComputations?: string[];
      /** Optional. Allows the client to choose the language for the response. If data cannot be provided for that language the API uses the closest match. Allowed values rely on the IETF standard. Default value is en. */
      languageCode?: string;
      /** Required. The longitude and latitude from which the API looks for air quality current conditions data. */
      location?: LatLng;
      /** Optional. Determines the color palette used for data provided by the 'Universal Air Quality Index' (UAQI). This color palette is relevant just for UAQI, other AQIs have a predetermined color palette that can't be controlled. */
      uaqiColorPalette?: string;
      /** Optional. If set to true, the Universal AQI will be included in the 'indexes' field of the response. Default value is true. */
      universalAqi?: boolean;
    }
    interface LookupCurrentConditionsResponse {
      /** A rounded down timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. For example: "2014-10-02T15:00:00Z". */
      dateTime?: string;
      /** Health advice and recommended actions related to the reported air quality conditions. Recommendations are tailored differently for populations at risk, groups with greater sensitivities to pollutants, and the general population. */
      healthRecommendations?: HealthRecommendations;
      /** Based on the request parameters, this list will include (up to) two air quality indexes: - Universal AQI. Will be returned if the universalAqi boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra computation is specified. */
      indexes?: AirQualityIndex[];
      /** A list of pollutants affecting the location specified in the request. Note: This field will be returned only for requests that specified one or more of the following extra computations: POLLUTANT_ADDITIONAL_INFO, DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION. */
      pollutants?: Pollutant[];
      /** The ISO_3166-1 alpha-2 code of the country/region corresponding to the location provided in the request. This field might be omitted from the response if the location provided in the request resides in a disputed territory. */
      regionCode?: string;
    }
    interface LookupForecastRequest {
      /** Optional. Expresses a 'country/region to AQI' relationship. Pairs a country/region with a desired AQI so that air quality data that is required for that country/region will be displayed according to the chosen AQI. This parameter can be used to specify a non-default AQI for a given country, for example, to get the US EPA index for Canada rather than the default index for Canada. */
      customLocalAqis?: CustomLocalAqi[];
      /** A timestamp for which to return the data for a specific point in time. The timestamp is rounded to the previous exact hour. Note: this will return hourly data for the requested timestamp only (i.e. a single hourly info element). For example, a request sent where the date_time parameter is set to 2023-01-03T11:05:49Z will be rounded down to 2023-01-03T11:00:00Z. */
      dateTime?: string;
      /** Optional. Additional features that can be optionally enabled. Specifying extra computations will result in the relevant elements and fields to be returned in the response. */
      extraComputations?: string[];
      /** Optional. Allows the client to choose the language for the response. If data cannot be provided for that language the API uses the closest match. Allowed values rely on the IETF standard (default = 'en'). */
      languageCode?: string;
      /** Required. The latitude and longitude for which the API looks for air quality data. */
      location?: LatLng;
      /** Optional. The maximum number of hourly info records to return per page (default = 24). */
      pageSize?: number;
      /** Optional. A page token received from a previous forecast call. It is used to retrieve the subsequent page. */
      pageToken?: string;
      /** Indicates the start and end period for which to get the forecast data. The timestamp is rounded to the previous exact hour. */
      period?: Interval;
      /** Optional. Determines the color palette used for data provided by the 'Universal Air Quality Index' (UAQI). This color palette is relevant just for UAQI, other AQIs have a predetermined color palette that can't be controlled. */
      uaqiColorPalette?: string;
      /** Optional. If set to true, the Universal AQI will be included in the 'indexes' field of the response (default = true). */
      universalAqi?: boolean;
    }
    interface LookupForecastResponse {
      /** Optional. Contains the air quality information for each hour in the requested range. For example, if the request is for 48 hours of forecast there will be 48 elements of hourly forecasts. */
      hourlyForecasts?: HourlyForecast[];
      /** Optional. The token to retrieve the next page. */
      nextPageToken?: string;
      /** Optional. The ISO_3166-1 alpha-2 code of the country/region corresponding to the location provided in the request. This field might be omitted from the response if the location provided in the request resides in a disputed territory. */
      regionCode?: string;
    }
    interface LookupHistoryRequest {
      /** Optional. Expresses a 'country/region to AQI' relationship. Pairs a country/region with a desired AQI so that air quality data that is required for that country/region will be displayed according to the chosen AQI. This parameter can be used to specify a non-default AQI for a given country, for example, to get the US EPA index for Canada rather than the default index for Canada. */
      customLocalAqis?: CustomLocalAqi[];
      /** A timestamp for which to return historical data. The timestamp is rounded to the previous exact hour. Note: this will return hourly data for the requested timestamp only (i.e. a single hourly info element). For example, a request sent where the dateTime parameter is set to 2023-01-03T11:05:49Z will be rounded down to 2023-01-03T11:00:00Z. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z". */
      dateTime?: string;
      /** Optional. Additional features that can be optionally enabled. Specifying extra computations will result in the relevant elements and fields to be returned in the response. */
      extraComputations?: string[];
      /** Number from 1 to 720 that indicates the hours range for the request. For example: A value of 48 will yield data from the last 48 hours. */
      hours?: number;
      /** Optional. Allows the client to choose the language for the response. If data cannot be provided for that language the API uses the closest match. Allowed values rely on the IETF standard. Default value is en. */
      languageCode?: string;
      /** Required. The latitude and longitude for which the API looks for air quality history data. */
      location?: LatLng;
      /** Optional. The maximum number of hourly info records to return per page. The default is 72 and the max value is 168 (7 days of data). */
      pageSize?: number;
      /** Optional. A page token received from a previous history call. It is used to retrieve the subsequent page. Note that when providing a value for this parameter all other parameters provided must match the call that provided the page token (the previous call). */
      pageToken?: string;
      /** Indicates the start and end period for which to get the historical data. The timestamp is rounded to the previous exact hour. */
      period?: Interval;
      /** Optional. Determines the color palette used for data provided by the 'Universal Air Quality Index' (UAQI). This color palette is relevant just for UAQI, other AQIs have a predetermined color palette that can't be controlled. */
      uaqiColorPalette?: string;
      /** Optional. If set to true, the Universal AQI will be included in the 'indexes' field of the response. Default value is true. */
      universalAqi?: boolean;
    }
    interface LookupHistoryResponse {
      /** Optional. Contains the air quality information for each hour in the requested range. For example, if the request is for 48 hours of history there will be 48 elements of hourly info. */
      hoursInfo?: HourInfo[];
      /** Optional. The token to retrieve the next page. */
      nextPageToken?: string;
      /** Optional. The ISO_3166-1 alpha-2 code of the country/region corresponding to the location provided in the request. This field might be omitted from the response if the location provided in the request resides in a disputed territory. */
      regionCode?: string;
    }
    interface Pollutant {
      /** Additional information about the pollutant. */
      additionalInfo?: AdditionalInfo;
      /** The pollutant's code name (for example, "so2"). For a list of supported pollutant codes, see [Reported pollutants](/maps/documentation/air-quality/pollutants#reported_pollutants). */
      code?: string;
      /** The pollutant's concentration level measured by one of the standard air pollutation measure units. */
      concentration?: Concentration;
      /** The pollutant's display name. For example: "NOx". */
      displayName?: string;
      /** The pollutant's full name. For chemical compounds, this is the IUPAC name. Example: "Sulfur Dioxide". For more information about the IUPAC names table, see https://iupac.org/what-we-do/periodic-table-of-elements/. */
      fullName?: string;
    }
    interface CurrentConditionsResource {
      /** The Current Conditions endpoint provides hourly air quality information in more than 100 countries, up to a 500 x 500 meters resolution. Includes over 70 local indexes and global air quality index and categories. */
      lookup(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LookupCurrentConditionsRequest;
      }): Request<LookupCurrentConditionsResponse>;
      lookup(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LookupCurrentConditionsRequest,
      ): Request<LookupCurrentConditionsResponse>;
    }
    interface ForecastResource {
      /** Returns air quality forecast for a specific location for a given time range. */
      lookup(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LookupForecastRequest;
      }): Request<LookupForecastResponse>;
      lookup(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LookupForecastRequest,
      ): Request<LookupForecastResponse>;
    }
    interface HistoryResource {
      /** Returns air quality history for a specific location for a given time range. */
      lookup(request: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Request body */
        resource: LookupHistoryRequest;
      }): Request<LookupHistoryResponse>;
      lookup(
        request: {
          /** V1 error format. */
          '$.xgafv'?: string;
          /** OAuth access token. */
          access_token?: string;
          /** Data format for response. */
          alt?: string;
          /** JSONP */
          callback?: string;
          /** Selector specifying which fields to include in a partial response. */
          fields?: string;
          /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
          key?: string;
          /** OAuth 2.0 token for the current user. */
          oauth_token?: string;
          /** Returns response with indentations and line breaks. */
          prettyPrint?: boolean;
          /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
          quotaUser?: string;
          /** Upload protocol for media (e.g. "raw", "multipart"). */
          upload_protocol?: string;
          /** Legacy upload protocol for media (e.g. "media", "multipart"). */
          uploadType?: string;
        },
        body: LookupHistoryRequest,
      ): Request<LookupHistoryResponse>;
    }
    interface HeatmapTilesResource {
      /** Returns a bytes array containing the data of the tile PNG image. */
      lookupHeatmapTile(request?: {
        /** V1 error format. */
        '$.xgafv'?: string;
        /** OAuth access token. */
        access_token?: string;
        /** Data format for response. */
        alt?: string;
        /** JSONP */
        callback?: string;
        /** Selector specifying which fields to include in a partial response. */
        fields?: string;
        /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
        key?: string;
        /** Required. The type of the air quality heatmap. Defines the pollutant that the map will graphically represent. Allowed values: - UAQI_RED_GREEN (UAQI, red-green palette) - UAQI_INDIGO_PERSIAN (UAQI, indigo-persian palette) - PM25_INDIGO_PERSIAN - GBR_DEFRA - DEU_UBA - CAN_EC - FRA_ATMO - US_AQI */
        mapType: string;
        /** OAuth 2.0 token for the current user. */
        oauth_token?: string;
        /** Returns response with indentations and line breaks. */
        prettyPrint?: boolean;
        /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
        quotaUser?: string;
        /** Upload protocol for media (e.g. "raw", "multipart"). */
        upload_protocol?: string;
        /** Legacy upload protocol for media (e.g. "media", "multipart"). */
        uploadType?: string;
        /** Required. Defines the east-west point in the requested tile. */
        x: number;
        /** Required. Defines the north-south point in the requested tile. */
        y: number;
        /** Required. The map's zoom level. Defines how large or small the contents of a map appear in a map view. Zoom level 0 is the entire world in a single tile. Zoom level 1 is the entire world in 4 tiles. Zoom level 2 is the entire world in 16 tiles. Zoom level 16 is the entire world in 65,536 tiles. Allowed values: 0-16 */
        zoom: number;
      }): Request<HttpBody>;
    }
    interface MapTypesResource {
      heatmapTiles: HeatmapTilesResource;
    }

    const currentConditions: CurrentConditionsResource;

    const forecast: ForecastResource;

    const history: HistoryResource;

    const mapTypes: MapTypesResource;
  }
}
