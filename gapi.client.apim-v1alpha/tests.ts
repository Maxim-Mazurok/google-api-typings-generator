/* This is stub file for gapi.client.apim-v1alpha definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250903

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://apim.googleapis.com/$discovery/rest?version=v1alpha',
  );
  /** now we can use gapi.client.apim */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.apim.projects.locations.get({
      name: 'Test string',
    });
    /** GetEntitlement returns the entitlement for the provided project. */
    await gapi.client.apim.projects.locations.getEntitlement({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.apim.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** ListApiObservationTags lists all extant tags on any observation in the given project. */
    await gapi.client.apim.projects.locations.listApiObservationTags({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** CreateObservationJob creates a new ObservationJob but does not have any effecton its own. It is a configuration that can be used in an Observation Job to collect data about existing APIs. */
    await gapi.client.apim.projects.locations.observationJobs.create(
      {
        observationJobId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        name: 'Test string',
        sources: ['Test string'],
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** DeleteObservationJob deletes an ObservationJob. This method will fail if the observation job is currently being used by any ObservationSource, even if not enabled. */
    await gapi.client.apim.projects.locations.observationJobs.delete({
      name: 'Test string',
    });
    /** Disables the given ObservationJob. */
    await gapi.client.apim.projects.locations.observationJobs.disable(
      {
        name: 'Test string',
      },
      {},
    );
    /** Enables the given ObservationJob. */
    await gapi.client.apim.projects.locations.observationJobs.enable(
      {
        name: 'Test string',
      },
      {},
    );
    /** GetObservationJob retrieves a single ObservationJob by name. */
    await gapi.client.apim.projects.locations.observationJobs.get({
      name: 'Test string',
    });
    /** ListObservationJobs gets all ObservationJobs for a given project and location. */
    await gapi.client.apim.projects.locations.observationJobs.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** BatchEditTagsApiObservations adds or removes Tags for ApiObservations. */
    await gapi.client.apim.projects.locations.observationJobs.apiObservations.batchEditTags(
      {
        parent: 'Test string',
      },
      {
        requests: [
          {
            apiObservationId: 'Test string',
            tagActions: [
              {
                action: 'Test string',
                tag: 'Test string',
              },
            ],
          },
        ],
      },
    );
    /** GetApiObservation retrieves a single ApiObservation by name. */
    await gapi.client.apim.projects.locations.observationJobs.apiObservations.get(
      {
        name: 'Test string',
      },
    );
    /** ListApiObservations gets all ApiObservations for a given project and location and ObservationJob. */
    await gapi.client.apim.projects.locations.observationJobs.apiObservations.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** GetApiOperation retrieves a single ApiOperation by name. */
    await gapi.client.apim.projects.locations.observationJobs.apiObservations.apiOperations.get(
      {
        name: 'Test string',
      },
    );
    /** ListApiOperations gets all ApiOperations for a given project and location and ObservationJob and ApiObservation. */
    await gapi.client.apim.projects.locations.observationJobs.apiObservations.apiOperations.list(
      {
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** CreateObservationSource creates a new ObservationSource but does not affect any deployed infrastructure. It is a configuration that can be used in an Observation Job to collect data about APIs running in user's dataplane. */
    await gapi.client.apim.projects.locations.observationSources.create(
      {
        observationSourceId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        gclbObservationSource: {
          pscNetworkConfigs: [
            {
              network: 'Test string',
              subnetwork: 'Test string',
            },
          ],
        },
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** DeleteObservationSource deletes an observation source. This method will fail if the observation source is currently being used by any ObservationJob, even if not enabled. */
    await gapi.client.apim.projects.locations.observationSources.delete({
      name: 'Test string',
    });
    /** GetObservationSource retrieves a single ObservationSource by name. */
    await gapi.client.apim.projects.locations.observationSources.get({
      name: 'Test string',
    });
    /** ListObservationSources gets all ObservationSources for a given project and location. */
    await gapi.client.apim.projects.locations.observationSources.list({
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of `1`, corresponding to `Code.CANCELLED`. */
    await gapi.client.apim.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. */
    await gapi.client.apim.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.apim.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. */
    await gapi.client.apim.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
  }
});
