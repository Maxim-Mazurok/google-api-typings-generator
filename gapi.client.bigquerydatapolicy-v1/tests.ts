/* This is stub file for gapi.client.bigquerydatapolicy-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250317

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://bigquerydatapolicy.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.bigquerydatapolicy */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** View and manage your data in Google BigQuery and see the email address for your Google Account */
    'https://www.googleapis.com/auth/bigquery',
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Creates a new data policy under a project with the given `dataPolicyId` (used as the display name), policy tag, and data policy type. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.create(
      {
        parent: 'Test string',
      },
      {
        dataMaskingPolicy: {
          predefinedExpression: 'Test string',
          routine: 'Test string',
        },
        dataPolicyId: 'Test string',
        dataPolicyType: 'Test string',
        name: 'Test string',
        policyTag: 'Test string',
      },
    );
    /** Deletes the data policy specified by its resource name. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.delete(
      {
        force: true,
        name: 'Test string',
      },
    );
    /** Gets the data policy specified by its resource name. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.get({
      name: 'Test string',
    });
    /** Gets the IAM policy for the specified data policy. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.getIamPolicy(
      {
        resource: 'Test string',
      },
      {
        options: {
          requestedPolicyVersion: 42,
        },
      },
    );
    /** List all of the data policies in the specified parent project. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the metadata for an existing data policy. The target data policy can be specified by the resource name. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.patch(
      {
        allowMissing: true,
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        dataMaskingPolicy: {
          predefinedExpression: 'Test string',
          routine: 'Test string',
        },
        dataPolicyId: 'Test string',
        dataPolicyType: 'Test string',
        name: 'Test string',
        policyTag: 'Test string',
      },
    );
    /** Renames the id (display name) of the specified data policy. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.rename(
      {
        name: 'Test string',
      },
      {
        newDataPolicyId: 'Test string',
      },
    );
    /** Sets the IAM policy for the specified data policy. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns the caller's permission on the specified data policy resource. */
    await gapi.client.bigquerydatapolicy.projects.locations.dataPolicies.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
  }
});
