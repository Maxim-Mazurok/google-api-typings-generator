/* This is stub file for gapi.client.places-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20240326

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://places.googleapis.com/$discovery/rest?version=v1'
  );
  /** now we can use gapi.client.places */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.places */
    'https://www.googleapis.com/auth/maps-platform.places',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.places.autocomplete */
    'https://www.googleapis.com/auth/maps-platform.places.autocomplete',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.places.details */
    'https://www.googleapis.com/auth/maps-platform.places.details',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.places.nearbysearch */
    'https://www.googleapis.com/auth/maps-platform.places.nearbysearch',
    /** Private Service: https://www.googleapis.com/auth/maps-platform.places.textsearch */
    'https://www.googleapis.com/auth/maps-platform.places.textsearch',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Returns predictions for the given input. */
    await gapi.client.places.places.autocomplete(
      {},
      {
        includedPrimaryTypes: ['Test string'],
        includedRegionCodes: ['Test string'],
        includeQueryPredictions: true,
        input: 'Test string',
        inputOffset: 42,
        languageCode: 'Test string',
        locationBias: {
          circle: {
            center: {
              latitude: 42,
              longitude: 42,
            },
            radius: 42,
          },
          rectangle: {
            high: {
              latitude: 42,
              longitude: 42,
            },
            low: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        locationRestriction: {
          circle: {
            center: {
              latitude: 42,
              longitude: 42,
            },
            radius: 42,
          },
          rectangle: {
            high: {
              latitude: 42,
              longitude: 42,
            },
            low: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        origin: {
          latitude: 42,
          longitude: 42,
        },
        regionCode: 'Test string',
        sessionToken: 'Test string',
      }
    );
    /** Get the details of a place based on its resource name, which is a string in the `places/{place_id}` format. */
    await gapi.client.places.places.get({
      languageCode: 'Test string',
      name: 'Test string',
      regionCode: 'Test string',
      sessionToken: 'Test string',
    });
    /** Search for places near locations. */
    await gapi.client.places.places.searchNearby(
      {},
      {
        excludedPrimaryTypes: ['Test string'],
        excludedTypes: ['Test string'],
        includedPrimaryTypes: ['Test string'],
        includedTypes: ['Test string'],
        languageCode: 'Test string',
        locationRestriction: {
          circle: {
            center: {
              latitude: 42,
              longitude: 42,
            },
            radius: 42,
          },
        },
        maxResultCount: 42,
        rankPreference: 'Test string',
        regionCode: 'Test string',
      }
    );
    /** Text query based place search. */
    await gapi.client.places.places.searchText(
      {},
      {
        evOptions: {
          connectorTypes: ['Test string'],
          minimumChargingRateKw: 42,
        },
        includedType: 'Test string',
        languageCode: 'Test string',
        locationBias: {
          circle: {
            center: {
              latitude: 42,
              longitude: 42,
            },
            radius: 42,
          },
          rectangle: {
            high: {
              latitude: 42,
              longitude: 42,
            },
            low: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        locationRestriction: {
          rectangle: {
            high: {
              latitude: 42,
              longitude: 42,
            },
            low: {
              latitude: 42,
              longitude: 42,
            },
          },
        },
        maxResultCount: 42,
        minRating: 42,
        openNow: true,
        priceLevels: ['Test string'],
        rankPreference: 'Test string',
        regionCode: 'Test string',
        strictTypeFiltering: true,
        textQuery: 'Test string',
      }
    );
    /** Get a photo media with a photo reference string. */
    await gapi.client.places.places.photos.getMedia({
      maxHeightPx: 42,
      maxWidthPx: 42,
      name: 'Test string',
      skipHttpRedirect: true,
    });
  }
});
