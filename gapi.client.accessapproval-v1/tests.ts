/* This is stub file for gapi.client.accessapproval-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250930

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://accessapproval.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.accessapproval */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the resource. Access Approval may remain active based on parent resource settings. To confirm the effective settings, call GetAccessApprovalSettings and verify effective setting is disabled. */
    await gapi.client.accessapproval.folders.deleteAccessApprovalSettings({
      name: 'Test string',
    });
    /** Gets the Access Approval settings associated with a project, folder, or organization. */
    await gapi.client.accessapproval.folders.getAccessApprovalSettings({
      name: 'Test string',
    });
    /** Retrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests. */
    await gapi.client.accessapproval.folders.getServiceAccount({
      name: 'Test string',
    });
    /** Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask. */
    await gapi.client.accessapproval.folders.updateAccessApprovalSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeKeyVersion: 'Test string',
        ancestorHasActiveKeyVersion: true,
        approvalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        effectiveApprovalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        enrolledAncestor: true,
        enrolledServices: [
          {
            cloudProduct: 'Test string',
            enrollmentLevel: 'Test string',
          },
        ],
        invalidKeyVersion: true,
        name: 'Test string',
        notificationEmails: ['Test string'],
        notificationPubsubTopic: 'Test string',
        preferNoBroadApprovalRequests: true,
        preferredRequestExpirationDays: 42,
        requestScopeMaxWidthPreference: 'Test string',
        requireCustomerVisibleJustification: true,
      },
    );
    /** Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.folders.approvalRequests.approve(
      {
        name: 'Test string',
      },
      {
        expireTime: 'Test string',
      },
    );
    /** Dismisses a request. Returns the updated ApprovalRequest. NOTE: When a request is dismissed, it is considered ignored. Dismissing a request does not prevent access granted by other Access Approval requests. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.folders.approvalRequests.dismiss(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets an approval request. Returns NOT_FOUND if the request does not exist. */
    await gapi.client.accessapproval.folders.approvalRequests.get({
      name: 'Test string',
    });
    /** Invalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This action revokes Google access based on this approval request. If the resource has other active approvals, access will remain granted. Returns FAILED_PRECONDITION if the request exists but is not in an approved state. */
    await gapi.client.accessapproval.folders.approvalRequests.invalidate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological. */
    await gapi.client.accessapproval.folders.approvalRequests.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the resource. Access Approval may remain active based on parent resource settings. To confirm the effective settings, call GetAccessApprovalSettings and verify effective setting is disabled. */
    await gapi.client.accessapproval.organizations.deleteAccessApprovalSettings(
      {
        name: 'Test string',
      },
    );
    /** Gets the Access Approval settings associated with a project, folder, or organization. */
    await gapi.client.accessapproval.organizations.getAccessApprovalSettings({
      name: 'Test string',
    });
    /** Retrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests. */
    await gapi.client.accessapproval.organizations.getServiceAccount({
      name: 'Test string',
    });
    /** Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask. */
    await gapi.client.accessapproval.organizations.updateAccessApprovalSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeKeyVersion: 'Test string',
        ancestorHasActiveKeyVersion: true,
        approvalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        effectiveApprovalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        enrolledAncestor: true,
        enrolledServices: [
          {
            cloudProduct: 'Test string',
            enrollmentLevel: 'Test string',
          },
        ],
        invalidKeyVersion: true,
        name: 'Test string',
        notificationEmails: ['Test string'],
        notificationPubsubTopic: 'Test string',
        preferNoBroadApprovalRequests: true,
        preferredRequestExpirationDays: 42,
        requestScopeMaxWidthPreference: 'Test string',
        requireCustomerVisibleJustification: true,
      },
    );
    /** Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.organizations.approvalRequests.approve(
      {
        name: 'Test string',
      },
      {
        expireTime: 'Test string',
      },
    );
    /** Dismisses a request. Returns the updated ApprovalRequest. NOTE: When a request is dismissed, it is considered ignored. Dismissing a request does not prevent access granted by other Access Approval requests. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.organizations.approvalRequests.dismiss(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets an approval request. Returns NOT_FOUND if the request does not exist. */
    await gapi.client.accessapproval.organizations.approvalRequests.get({
      name: 'Test string',
    });
    /** Invalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This action revokes Google access based on this approval request. If the resource has other active approvals, access will remain granted. Returns FAILED_PRECONDITION if the request exists but is not in an approved state. */
    await gapi.client.accessapproval.organizations.approvalRequests.invalidate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological. */
    await gapi.client.accessapproval.organizations.approvalRequests.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the resource. Access Approval may remain active based on parent resource settings. To confirm the effective settings, call GetAccessApprovalSettings and verify effective setting is disabled. */
    await gapi.client.accessapproval.projects.deleteAccessApprovalSettings({
      name: 'Test string',
    });
    /** Gets the Access Approval settings associated with a project, folder, or organization. */
    await gapi.client.accessapproval.projects.getAccessApprovalSettings({
      name: 'Test string',
    });
    /** Retrieves the service account that is used by Access Approval to access KMS keys for signing approved approval requests. */
    await gapi.client.accessapproval.projects.getServiceAccount({
      name: 'Test string',
    });
    /** Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask. */
    await gapi.client.accessapproval.projects.updateAccessApprovalSettings(
      {
        name: 'Test string',
        updateMask: 'Test string',
      },
      {
        activeKeyVersion: 'Test string',
        ancestorHasActiveKeyVersion: true,
        approvalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        effectiveApprovalPolicy: {
          justificationBasedApprovalPolicy: 'Test string',
        },
        enrolledAncestor: true,
        enrolledServices: [
          {
            cloudProduct: 'Test string',
            enrollmentLevel: 'Test string',
          },
        ],
        invalidKeyVersion: true,
        name: 'Test string',
        notificationEmails: ['Test string'],
        notificationPubsubTopic: 'Test string',
        preferNoBroadApprovalRequests: true,
        preferredRequestExpirationDays: 42,
        requestScopeMaxWidthPreference: 'Test string',
        requireCustomerVisibleJustification: true,
      },
    );
    /** Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.projects.approvalRequests.approve(
      {
        name: 'Test string',
      },
      {
        expireTime: 'Test string',
      },
    );
    /** Dismisses a request. Returns the updated ApprovalRequest. NOTE: When a request is dismissed, it is considered ignored. Dismissing a request does not prevent access granted by other Access Approval requests. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state. */
    await gapi.client.accessapproval.projects.approvalRequests.dismiss(
      {
        name: 'Test string',
      },
      {},
    );
    /** Gets an approval request. Returns NOT_FOUND if the request does not exist. */
    await gapi.client.accessapproval.projects.approvalRequests.get({
      name: 'Test string',
    });
    /** Invalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This action revokes Google access based on this approval request. If the resource has other active approvals, access will remain granted. Returns FAILED_PRECONDITION if the request exists but is not in an approved state. */
    await gapi.client.accessapproval.projects.approvalRequests.invalidate(
      {
        name: 'Test string',
      },
      {},
    );
    /** Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological. */
    await gapi.client.accessapproval.projects.approvalRequests.list({
      filter: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
  }
});
