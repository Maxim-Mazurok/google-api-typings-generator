/* This is stub file for gapi.client.metastore-v1 definition tests */
// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator

// Revision: 20250717

gapi.load('client', async () => {
  /** now we can use gapi.client */

  await gapi.client.load(
    'https://metastore.googleapis.com/$discovery/rest?version=v1',
  );
  /** now we can use gapi.client.metastore */

  /** don't forget to authenticate your client before sending any request to resources: */
  /** declare client_id registered in Google Developers Console */
  const client_id = '<<PUT YOUR CLIENT ID HERE>>';
  const scope = [
    /** See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account. */
    'https://www.googleapis.com/auth/cloud-platform',
  ];
  const immediate = false;
  gapi.auth.authorize({client_id, scope, immediate}, authResult => {
    if (authResult && !authResult.error) {
      /** handle successful authorization */
      void run();
    } else {
      /** handle authorization error */
    }
  });

  async function run() {
    /** Gets information about a location. */
    await gapi.client.metastore.projects.locations.get({
      name: 'Test string',
    });
    /** Lists information about the supported locations for this service. */
    await gapi.client.metastore.projects.locations.list({
      extraLocationTypes: 'Test string',
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Creates a metastore federation in a project and location. */
    await gapi.client.metastore.projects.locations.federations.create(
      {
        federationId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        backendMetastores: {
          A: {
            metastoreType: 'Test string',
            name: 'Test string',
          },
        },
        createTime: 'Test string',
        endpointUri: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        stateMessage: 'Test string',
        tags: {
          A: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
        version: 'Test string',
      },
    );
    /** Deletes a single federation. */
    await gapi.client.metastore.projects.locations.federations.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets the details of a single federation. */
    await gapi.client.metastore.projects.locations.federations.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.metastore.projects.locations.federations.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists federations in a project and location. */
    await gapi.client.metastore.projects.locations.federations.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Updates the fields of a federation. */
    await gapi.client.metastore.projects.locations.federations.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        backendMetastores: {
          A: {
            metastoreType: 'Test string',
            name: 'Test string',
          },
        },
        createTime: 'Test string',
        endpointUri: 'Test string',
        labels: {
          A: 'Test string',
        },
        name: 'Test string',
        state: 'Test string',
        stateMessage: 'Test string',
        tags: {
          A: 'Test string',
        },
        uid: 'Test string',
        updateTime: 'Test string',
        version: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.metastore.projects.locations.federations.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.metastore.projects.locations.federations.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED. */
    await gapi.client.metastore.projects.locations.operations.cancel(
      {
        name: 'Test string',
      },
      {},
    );
    /** Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. */
    await gapi.client.metastore.projects.locations.operations.delete({
      name: 'Test string',
    });
    /** Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. */
    await gapi.client.metastore.projects.locations.operations.get({
      name: 'Test string',
    });
    /** Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED. */
    await gapi.client.metastore.projects.locations.operations.list({
      filter: 'Test string',
      name: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
    });
    /** Alter metadata resource location. The metadata resource can be a database, table, or partition. This functionality only updates the parent directory for the respective metadata resource and does not transfer any existing data to the new location. */
    await gapi.client.metastore.projects.locations.services.alterLocation(
      {
        service: 'Test string',
      },
      {
        locationUri: 'Test string',
        resourceName: 'Test string',
      },
    );
    /** Alter metadata table properties. */
    await gapi.client.metastore.projects.locations.services.alterTableProperties(
      {
        service: 'Test string',
      },
      {
        properties: {
          A: 'Test string',
        },
        tableName: 'Test string',
        updateMask: 'Test string',
      },
    );
    /** Cancels the ongoing Managed Migration process. */
    await gapi.client.metastore.projects.locations.services.cancelMigration(
      {
        service: 'Test string',
      },
      {},
    );
    /** Completes the managed migration process. The Dataproc Metastore service will switch to using its own backend database after successful migration. */
    await gapi.client.metastore.projects.locations.services.completeMigration(
      {
        service: 'Test string',
      },
      {},
    );
    /** Creates a metastore service in a project and location. */
    await gapi.client.metastore.projects.locations.services.create(
      {
        parent: 'Test string',
        requestId: 'Test string',
        serviceId: 'Test string',
      },
      {
        artifactGcsUri: 'Test string',
        createTime: 'Test string',
        databaseType: 'Test string',
        deletionProtection: true,
        encryptionConfig: {
          kmsKey: 'Test string',
        },
        endpointUri: 'Test string',
        hiveMetastoreConfig: {
          auxiliaryVersions: {
            A: {
              configOverrides: {
                A: 'Test string',
              },
              networkConfig: {
                consumers: [
                  {
                    endpointLocation: 'Test string',
                    endpointUri: 'Test string',
                    subnetwork: 'Test string',
                  },
                ],
              },
              version: 'Test string',
            },
          },
          configOverrides: {
            A: 'Test string',
          },
          endpointProtocol: 'Test string',
          kerberosConfig: {
            keytab: {
              cloudSecret: 'Test string',
            },
            krb5ConfigGcsUri: 'Test string',
            principal: 'Test string',
          },
          version: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        maintenanceWindow: {
          dayOfWeek: 'Test string',
          hourOfDay: 42,
        },
        metadataIntegration: {
          dataCatalogConfig: {
            enabled: true,
          },
        },
        metadataManagementActivity: {
          metadataExports: [
            {
              databaseDumpType: 'Test string',
              destinationGcsUri: 'Test string',
              endTime: 'Test string',
              startTime: 'Test string',
              state: 'Test string',
            },
          ],
          restores: [
            {
              backup: 'Test string',
              backupLocation: 'Test string',
              details: 'Test string',
              endTime: 'Test string',
              startTime: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
        },
        name: 'Test string',
        network: 'Test string',
        networkConfig: {
          consumers: [
            {
              endpointLocation: 'Test string',
              endpointUri: 'Test string',
              subnetwork: 'Test string',
            },
          ],
        },
        port: 42,
        releaseChannel: 'Test string',
        scalingConfig: {
          autoscalingConfig: {
            autoscalingEnabled: true,
            autoscalingFactor: 42,
            limitConfig: {
              maxScalingFactor: 42,
              minScalingFactor: 42,
            },
          },
          instanceSize: 'Test string',
          scalingFactor: 42,
        },
        scheduledBackup: {
          backupLocation: 'Test string',
          cronSchedule: 'Test string',
          enabled: true,
          latestBackup: {
            backupId: 'Test string',
            duration: 'Test string',
            startTime: 'Test string',
            state: 'Test string',
          },
          nextScheduledTime: 'Test string',
          timeZone: 'Test string',
        },
        state: 'Test string',
        stateMessage: 'Test string',
        tags: {
          A: 'Test string',
        },
        telemetryConfig: {
          logFormat: 'Test string',
        },
        tier: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single service. */
    await gapi.client.metastore.projects.locations.services.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Exports metadata from a service. */
    await gapi.client.metastore.projects.locations.services.exportMetadata(
      {
        service: 'Test string',
      },
      {
        databaseDumpType: 'Test string',
        destinationGcsFolder: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets the details of a single service. */
    await gapi.client.metastore.projects.locations.services.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.metastore.projects.locations.services.getIamPolicy({
      'options.requestedPolicyVersion': 42,
      resource: 'Test string',
    });
    /** Lists services in a project and location. */
    await gapi.client.metastore.projects.locations.services.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Move a table to another database. */
    await gapi.client.metastore.projects.locations.services.moveTableToDatabase(
      {
        service: 'Test string',
      },
      {
        dbName: 'Test string',
        destinationDbName: 'Test string',
        tableName: 'Test string',
      },
    );
    /** Updates the parameters of a single service. */
    await gapi.client.metastore.projects.locations.services.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        artifactGcsUri: 'Test string',
        createTime: 'Test string',
        databaseType: 'Test string',
        deletionProtection: true,
        encryptionConfig: {
          kmsKey: 'Test string',
        },
        endpointUri: 'Test string',
        hiveMetastoreConfig: {
          auxiliaryVersions: {
            A: {
              configOverrides: {
                A: 'Test string',
              },
              networkConfig: {
                consumers: [
                  {
                    endpointLocation: 'Test string',
                    endpointUri: 'Test string',
                    subnetwork: 'Test string',
                  },
                ],
              },
              version: 'Test string',
            },
          },
          configOverrides: {
            A: 'Test string',
          },
          endpointProtocol: 'Test string',
          kerberosConfig: {
            keytab: {
              cloudSecret: 'Test string',
            },
            krb5ConfigGcsUri: 'Test string',
            principal: 'Test string',
          },
          version: 'Test string',
        },
        labels: {
          A: 'Test string',
        },
        maintenanceWindow: {
          dayOfWeek: 'Test string',
          hourOfDay: 42,
        },
        metadataIntegration: {
          dataCatalogConfig: {
            enabled: true,
          },
        },
        metadataManagementActivity: {
          metadataExports: [
            {
              databaseDumpType: 'Test string',
              destinationGcsUri: 'Test string',
              endTime: 'Test string',
              startTime: 'Test string',
              state: 'Test string',
            },
          ],
          restores: [
            {
              backup: 'Test string',
              backupLocation: 'Test string',
              details: 'Test string',
              endTime: 'Test string',
              startTime: 'Test string',
              state: 'Test string',
              type: 'Test string',
            },
          ],
        },
        name: 'Test string',
        network: 'Test string',
        networkConfig: {
          consumers: [
            {
              endpointLocation: 'Test string',
              endpointUri: 'Test string',
              subnetwork: 'Test string',
            },
          ],
        },
        port: 42,
        releaseChannel: 'Test string',
        scalingConfig: {
          autoscalingConfig: {
            autoscalingEnabled: true,
            autoscalingFactor: 42,
            limitConfig: {
              maxScalingFactor: 42,
              minScalingFactor: 42,
            },
          },
          instanceSize: 'Test string',
          scalingFactor: 42,
        },
        scheduledBackup: {
          backupLocation: 'Test string',
          cronSchedule: 'Test string',
          enabled: true,
          latestBackup: {
            backupId: 'Test string',
            duration: 'Test string',
            startTime: 'Test string',
            state: 'Test string',
          },
          nextScheduledTime: 'Test string',
          timeZone: 'Test string',
        },
        state: 'Test string',
        stateMessage: 'Test string',
        tags: {
          A: 'Test string',
        },
        telemetryConfig: {
          logFormat: 'Test string',
        },
        tier: 'Test string',
        uid: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Query Dataproc Metastore metadata. */
    await gapi.client.metastore.projects.locations.services.queryMetadata(
      {
        service: 'Test string',
      },
      {
        query: 'Test string',
      },
    );
    /** Restores a service from a backup. */
    await gapi.client.metastore.projects.locations.services.restore(
      {
        service: 'Test string',
      },
      {
        backup: 'Test string',
        backupLocation: 'Test string',
        requestId: 'Test string',
        restoreType: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.metastore.projects.locations.services.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Starts the Managed Migration process. */
    await gapi.client.metastore.projects.locations.services.startMigration(
      {
        service: 'Test string',
      },
      {
        migrationExecution: {
          cloudSqlMigrationConfig: {
            cdcConfig: {
              bucket: 'Test string',
              password: 'Test string',
              reverseProxySubnet: 'Test string',
              rootPath: 'Test string',
              subnetIpRange: 'Test string',
              username: 'Test string',
              vpcNetwork: 'Test string',
            },
            cloudSqlConnectionConfig: {
              hiveDatabaseName: 'Test string',
              instanceConnectionName: 'Test string',
              ipAddress: 'Test string',
              natSubnet: 'Test string',
              password: 'Test string',
              port: 42,
              proxySubnet: 'Test string',
              username: 'Test string',
            },
          },
          createTime: 'Test string',
          endTime: 'Test string',
          name: 'Test string',
          phase: 'Test string',
          state: 'Test string',
          stateMessage: 'Test string',
        },
        requestId: 'Test string',
      },
    );
    /** Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning. */
    await gapi.client.metastore.projects.locations.services.testIamPermissions(
      {
        resource: 'Test string',
      },
      {
        permissions: ['Test string'],
      },
    );
    /** Creates a new backup in a given project and location. */
    await gapi.client.metastore.projects.locations.services.backups.create(
      {
        backupId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        description: 'Test string',
        endTime: 'Test string',
        name: 'Test string',
        restoringServices: ['Test string'],
        serviceRevision: {
          artifactGcsUri: 'Test string',
          createTime: 'Test string',
          databaseType: 'Test string',
          deletionProtection: true,
          encryptionConfig: {
            kmsKey: 'Test string',
          },
          endpointUri: 'Test string',
          hiveMetastoreConfig: {
            auxiliaryVersions: {
              A: {
                configOverrides: {
                  A: 'Test string',
                },
                networkConfig: {
                  consumers: [
                    {
                      endpointLocation: 'Test string',
                      endpointUri: 'Test string',
                      subnetwork: 'Test string',
                    },
                  ],
                },
                version: 'Test string',
              },
            },
            configOverrides: {
              A: 'Test string',
            },
            endpointProtocol: 'Test string',
            kerberosConfig: {
              keytab: {
                cloudSecret: 'Test string',
              },
              krb5ConfigGcsUri: 'Test string',
              principal: 'Test string',
            },
            version: 'Test string',
          },
          labels: {
            A: 'Test string',
          },
          maintenanceWindow: {
            dayOfWeek: 'Test string',
            hourOfDay: 42,
          },
          metadataIntegration: {
            dataCatalogConfig: {
              enabled: true,
            },
          },
          metadataManagementActivity: {
            metadataExports: [
              {
                databaseDumpType: 'Test string',
                destinationGcsUri: 'Test string',
                endTime: 'Test string',
                startTime: 'Test string',
                state: 'Test string',
              },
            ],
            restores: [
              {
                backup: 'Test string',
                backupLocation: 'Test string',
                details: 'Test string',
                endTime: 'Test string',
                startTime: 'Test string',
                state: 'Test string',
                type: 'Test string',
              },
            ],
          },
          name: 'Test string',
          network: 'Test string',
          networkConfig: {
            consumers: [
              {
                endpointLocation: 'Test string',
                endpointUri: 'Test string',
                subnetwork: 'Test string',
              },
            ],
          },
          port: 42,
          releaseChannel: 'Test string',
          scalingConfig: {
            autoscalingConfig: {
              autoscalingEnabled: true,
              autoscalingFactor: 42,
              limitConfig: {
                maxScalingFactor: 42,
                minScalingFactor: 42,
              },
            },
            instanceSize: 'Test string',
            scalingFactor: 42,
          },
          scheduledBackup: {
            backupLocation: 'Test string',
            cronSchedule: 'Test string',
            enabled: true,
            latestBackup: {
              backupId: 'Test string',
              duration: 'Test string',
              startTime: 'Test string',
              state: 'Test string',
            },
            nextScheduledTime: 'Test string',
            timeZone: 'Test string',
          },
          state: 'Test string',
          stateMessage: 'Test string',
          tags: {
            A: 'Test string',
          },
          telemetryConfig: {
            logFormat: 'Test string',
          },
          tier: 'Test string',
          uid: 'Test string',
          updateTime: 'Test string',
        },
        state: 'Test string',
      },
    );
    /** Deletes a single backup. */
    await gapi.client.metastore.projects.locations.services.backups.delete({
      name: 'Test string',
      requestId: 'Test string',
    });
    /** Gets details of a single backup. */
    await gapi.client.metastore.projects.locations.services.backups.get({
      name: 'Test string',
    });
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.metastore.projects.locations.services.backups.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Lists backups in a service. */
    await gapi.client.metastore.projects.locations.services.backups.list({
      filter: 'Test string',
      orderBy: 'Test string',
      pageSize: 42,
      pageToken: 'Test string',
      parent: 'Test string',
    });
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.metastore.projects.locations.services.backups.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.metastore.projects.locations.services.databases.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.metastore.projects.locations.services.databases.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set. */
    await gapi.client.metastore.projects.locations.services.databases.tables.getIamPolicy(
      {
        'options.requestedPolicyVersion': 42,
        resource: 'Test string',
      },
    );
    /** Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors. */
    await gapi.client.metastore.projects.locations.services.databases.tables.setIamPolicy(
      {
        resource: 'Test string',
      },
      {
        policy: {
          auditConfigs: [
            {
              auditLogConfigs: [
                {
                  exemptedMembers: ['Test string'],
                  logType: 'Test string',
                },
              ],
              service: 'Test string',
            },
          ],
          bindings: [
            {
              condition: {
                description: 'Test string',
                expression: 'Test string',
                location: 'Test string',
                title: 'Test string',
              },
              members: ['Test string'],
              role: 'Test string',
            },
          ],
          etag: 'Test string',
          version: 42,
        },
        updateMask: 'Test string',
      },
    );
    /** Creates a new MetadataImport in a given project and location. */
    await gapi.client.metastore.projects.locations.services.metadataImports.create(
      {
        metadataImportId: 'Test string',
        parent: 'Test string',
        requestId: 'Test string',
      },
      {
        createTime: 'Test string',
        databaseDump: {
          databaseType: 'Test string',
          gcsUri: 'Test string',
          sourceDatabase: 'Test string',
          type: 'Test string',
        },
        description: 'Test string',
        endTime: 'Test string',
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Gets details of a single import. */
    await gapi.client.metastore.projects.locations.services.metadataImports.get(
      {
        name: 'Test string',
      },
    );
    /** Lists imports in a service. */
    await gapi.client.metastore.projects.locations.services.metadataImports.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
    /** Updates a single import. Only the description field of MetadataImport is supported to be updated. */
    await gapi.client.metastore.projects.locations.services.metadataImports.patch(
      {
        name: 'Test string',
        requestId: 'Test string',
        updateMask: 'Test string',
      },
      {
        createTime: 'Test string',
        databaseDump: {
          databaseType: 'Test string',
          gcsUri: 'Test string',
          sourceDatabase: 'Test string',
          type: 'Test string',
        },
        description: 'Test string',
        endTime: 'Test string',
        name: 'Test string',
        state: 'Test string',
        updateTime: 'Test string',
      },
    );
    /** Deletes a single migration execution. */
    await gapi.client.metastore.projects.locations.services.migrationExecutions.delete(
      {
        name: 'Test string',
        requestId: 'Test string',
      },
    );
    /** Gets details of a single migration execution. */
    await gapi.client.metastore.projects.locations.services.migrationExecutions.get(
      {
        name: 'Test string',
      },
    );
    /** Lists migration executions on a service. */
    await gapi.client.metastore.projects.locations.services.migrationExecutions.list(
      {
        filter: 'Test string',
        orderBy: 'Test string',
        pageSize: 42,
        pageToken: 'Test string',
        parent: 'Test string',
      },
    );
  }
});
