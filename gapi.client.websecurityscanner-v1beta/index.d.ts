/* Type definitions for non-npm package Web Security Scanner API v1beta 0.0 */
// Project: https://cloud.google.com/security-command-center/docs/concepts-web-security-scanner-overview/
// Definitions by: Maxim Mazurok <https://github.com/Maxim-Mazurok>
//                 Nick Amoscato <https://github.com/namoscato>
//                 Declan Vong <https://github.com/declanvong>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped

// IMPORTANT
// This file was generated by https://github.com/Maxim-Mazurok/google-api-typings-generator. Please do not edit it manually.
// In case of any problems please post issue to https://github.com/Maxim-Mazurok/google-api-typings-generator
// Generated from: https://websecurityscanner.googleapis.com/$discovery/rest?version=v1beta
// Revision: 20230503

/// <reference types="gapi.client" />

declare namespace gapi.client {
    /** Load Web Security Scanner API v1beta */
    function load(urlOrObject: "https://websecurityscanner.googleapis.com/$discovery/rest?version=v1beta"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "websecurityscanner", version: "v1beta"): Promise<void>;
    /** @deprecated Please load APIs with discovery documents. */
    function load(name: "websecurityscanner", version: "v1beta", callback: () => any): void;

    namespace websecurityscanner {
        interface Authentication {
            /** Authentication using a custom account. */
            customAccount?:
                CustomAccount;
            /** Authentication using a Google account. */
            googleAccount?:
                GoogleAccount;
            /** Authentication using Identity-Aware-Proxy (IAP). */
            iapCredential?:
                IapCredential;
        }
        interface CrawledUrl {
            /** The body of the request that was used to visit the URL. */
            body?:
                string;
            /** The http method of the request that was used to visit the URL, in uppercase. */
            httpMethod?:
                string;
            /** The URL that was crawled. */
            url?:
                string;
        }
        interface CustomAccount {
            /** Required. The login form URL of the website. */
            loginUrl?:
                string;
            /** Required. Input only. The password of the custom account. The credential is stored encrypted and not returned in any response nor included in audit logs. */
            password?:
                string;
            /** Required. The user name of the custom account. */
            username?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface Empty {
        }
        interface Finding {
            /** The body of the request that triggered the vulnerability. */
            body?:
                string;
            /** The description of the vulnerability. */
            description?:
                string;
            /** The URL where the browser lands when the vulnerability is detected. */
            finalUrl?:
                string;
            /**
             * The type of the Finding. Detailed and up-to-date information on findings can be found here:
             * https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner
             */
            findingType?:
                string;
            /** An addon containing information reported for a vulnerability with an HTML form, if any. */
            form?:
                Form;
            /** If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported. */
            frameUrl?:
                string;
            /** The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability. */
            fuzzedUrl?:
                string;
            /** The http method of the request that triggered the vulnerability, in uppercase. */
            httpMethod?:
                string;
            /**
             * The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are
             * generated by the system.
             */
            name?:
                string;
            /** An addon containing information about outdated libraries. */
            outdatedLibrary?:
                OutdatedLibrary;
            /** The URL containing human-readable payload that user can leverage to reproduce the vulnerability. */
            reproductionUrl?:
                string;
            /** The severity level of the reported vulnerability. */
            severity?:
                string;
            /** The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns. */
            trackingId?:
                string;
            /** An addon containing detailed information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc. */
            violatingResource?:
                ViolatingResource;
            /** An addon containing information about vulnerable or missing HTTP headers. */
            vulnerableHeaders?:
                VulnerableHeaders;
            /** An addon containing information about request parameters which were found to be vulnerable. */
            vulnerableParameters?:
                VulnerableParameters;
            /** An addon containing information reported for an XSS, if any. */
            xss?:
                Xss;
            /** An addon containing information reported for an XXE, if any. */
            xxe?:
                Xxe;
        }
        interface FindingTypeStats {
            /** The count of findings belonging to this finding type. */
            findingCount?:
                number;
            /** The finding type associated with the stats. */
            findingType?:
                string;
        }
        interface Form {
            /** ! The URI where to send the form when it's submitted. */
            actionUri?:
                string;
            /** ! The names of form fields related to the vulnerability. */
            fields?:
                string[];
        }
        interface GoogleAccount {
            /** Required. Input only. The password of the Google account. The credential is stored encrypted and not returned in any response nor included in audit logs. */
            password?:
                string;
            /** Required. The user name of the Google account. */
            username?:
                string;
        }
        interface Header {
            /** Header name. */
            name?:
                string;
            /** Header value. */
            value?:
                string;
        }
        interface IapCredential {
            /** Authentication configuration when Web-Security-Scanner service account is added in Identity-Aware-Proxy (IAP) access policies. */
            iapTestServiceAccountInfo?:
                IapTestServiceAccountInfo;
        }
        interface IapTestServiceAccountInfo {
            /** Required. Describes OAuth2 Client ID of resources protected by Identity-Aware-Proxy(IAP). */
            targetAudienceClientId?:
                string;
        }
        interface ListCrawledUrlsResponse {
            /** The list of CrawledUrls returned. */
            crawledUrls?:
                CrawledUrl[];
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?:
                string;
        }
        interface ListFindingsResponse {
            /** The list of Findings returned. */
            findings?:
                Finding[];
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?:
                string;
        }
        interface ListFindingTypeStatsResponse {
            /** The list of FindingTypeStats returned. */
            findingTypeStats?:
                FindingTypeStats[];
        }
        interface ListScanConfigsResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?:
                string;
            /** The list of ScanConfigs returned. */
            scanConfigs?:
                ScanConfig[];
        }
        interface ListScanRunsResponse {
            /** Token to retrieve the next page of results, or empty if there are no more results in the list. */
            nextPageToken?:
                string;
            /** The list of ScanRuns returned. */
            scanRuns?:
                ScanRun[];
        }
        interface OutdatedLibrary {
            /** URLs to learn more information about the vulnerabilities in the library. */
            learnMoreUrls?:
                string[];
            /** The name of the outdated library. */
            libraryName?:
                string;
            /** The version number. */
            version?:
                string;
        }
        interface ScanConfig {
            /** The authentication configuration. If specified, service will use the authentication configuration during scanning. */
            authentication?:
                Authentication;
            /** The excluded URL patterns as described in https://cloud.google.com/security-command-center/docs/how-to-use-web-security-scanner#excluding_urls */
            blacklistPatterns?:
                string[];
            /** Required. The user provided display name of the ScanConfig. */
            displayName?:
                string;
            /** Controls export of scan configurations and results to Security Command Center. */
            exportToSecurityCommandCenter?:
                string;
            /** Whether to keep scanning even if most requests return HTTP error codes. */
            ignoreHttpStatusErrors?:
                boolean;
            /** Latest ScanRun if available. */
            latestRun?:
                ScanRun;
            /** Whether the scan config is managed by Web Security Scanner, output only. */
            managedScan?:
                boolean;
            /**
             * The maximum QPS during scanning. A valid value ranges from 5 to 20 inclusively. If the field is unspecified or its value is set 0, server will default to 15. Other values outside of
             * [5, 20] range will be rejected with INVALID_ARGUMENT error.
             */
            maxQps?:
                number;
            /** The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system. */
            name?:
                string;
            /** The risk level selected for the scan */
            riskLevel?:
                string;
            /** The schedule of the ScanConfig. */
            schedule?:
                Schedule;
            /** Required. The starting URLs from which the scanner finds site pages. */
            startingUrls?:
                string[];
            /** Whether the scan configuration has enabled static IP address scan feature. If enabled, the scanner will access applications from static IP addresses. */
            staticIpScan?:
                boolean;
            /** Set of Google Cloud platforms targeted by the scan. If empty, APP_ENGINE will be used as a default. */
            targetPlatforms?:
                string[];
            /** The user agent used during scanning. */
            userAgent?:
                string;
        }
        interface ScanConfigError {
            /** Indicates the reason code for a configuration failure. */
            code?:
                string;
            /**
             * Indicates the full name of the ScanConfig field that triggers this error, for example "scan_config.max_qps". This field is provided for troubleshooting purposes only and its actual
             * value can change in the future.
             */
            fieldName?:
                string;
        }
        interface ScanRun {
            /** The time at which the ScanRun reached termination state - that the ScanRun is either finished or stopped by user. */
            endTime?:
                string;
            /** If result_state is an ERROR, this field provides the primary reason for scan's termination and more details, if such are available. */
            errorTrace?:
                ScanRunErrorTrace;
            /** The execution state of the ScanRun. */
            executionState?:
                string;
            /** Whether the scan run has found any vulnerabilities. */
            hasVulnerabilities?:
                boolean;
            /** The resource name of the ScanRun. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. The ScanRun IDs are generated by the system. */
            name?:
                string;
            /**
             * The percentage of total completion ranging from 0 to 100. If the scan is in queue, the value is 0. If the scan is running, the value ranges from 0 to 100. If the scan is finished,
             * the value is 100.
             */
            progressPercent?:
                number;
            /** The result state of the ScanRun. This field is only available after the execution state reaches "FINISHED". */
            resultState?:
                string;
            /** The time at which the ScanRun started. */
            startTime?:
                string;
            /** The number of URLs crawled during this ScanRun. If the scan is in progress, the value represents the number of URLs crawled up to now. */
            urlsCrawledCount?:
                string;
            /**
             * The number of URLs tested during this ScanRun. If the scan is in progress, the value represents the number of URLs tested up to now. The number of URLs tested is usually larger than
             * the number URLS crawled because typically a crawled URL is tested with multiple test payloads.
             */
            urlsTestedCount?:
                string;
            /** A list of warnings, if such are encountered during this scan run. */
            warningTraces?:
                ScanRunWarningTrace[];
        }
        interface ScanRunErrorTrace {
            /** Indicates the error reason code. */
            code?:
                string;
            /**
             * If the scan encounters TOO_MANY_HTTP_ERRORS, this field indicates the most common HTTP error code, if such is available. For example, if this code is 404, the scan has encountered
             * too many NOT_FOUND responses.
             */
            mostCommonHttpErrorCode?:
                number;
            /** If the scan encounters SCAN_CONFIG_ISSUE error, this field has the error message encountered during scan configuration validation that is performed before each scan run. */
            scanConfigError?:
                ScanConfigError;
        }
        interface ScanRunWarningTrace {
            /** Indicates the warning code. */
            code?:
                string;
        }
        interface Schedule {
            /** Required. The duration of time between executions in days. */
            intervalDurationDays?:
                number;
            /**
             * A timestamp indicates when the next run will be scheduled. The value is refreshed by the server after each run. If unspecified, it will default to current server time, which means
             * the scan will be scheduled to start immediately.
             */
            scheduleTime?:
                string;
        }
        // tslint:disable-next-line:no-empty-interface
        interface StartScanRunRequest {
        }
        // tslint:disable-next-line:no-empty-interface
        interface StopScanRunRequest {
        }
        interface ViolatingResource {
            /** The MIME type of this resource. */
            contentType?:
                string;
            /** URL of this violating resource. */
            resourceUrl?:
                string;
        }
        interface VulnerableHeaders {
            /** List of vulnerable headers. */
            headers?:
                Header[];
            /** List of missing headers. */
            missingHeaders?:
                Header[];
        }
        interface VulnerableParameters {
            /** The vulnerable parameter names. */
            parameterNames?:
                string[];
        }
        interface Xss {
            /** An error message generated by a javascript breakage. */
            errorMessage?:
                string;
            /** Stack traces leading to the point where the XSS occurred. */
            stackTraces?:
                string[];
        }
        interface Xxe {
            /** Location within the request where the payload was placed. */
            payloadLocation?:
                string;
            /** The XML string that triggered the XXE vulnerability. Non-payload values might be redacted. */
            payloadValue?:
                string;
        }
        interface CrawledUrlsResource {
            /** List CrawledUrls under a given ScanRun. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of CrawledUrls to return, can be limited by server. If not specified or not positive, the implementation will select a reasonable value. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results to be returned. This should be a `next_page_token` value returned from a previous List request. If unspecified, the first page of results
                 * is returned.
                 */
                pageToken?:
                    string;
                /** Required. The parent resource name, which should be a scan run resource name in the format 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListCrawledUrlsResponse>;
        }
        interface FindingsResource {
            /** Gets a Finding. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /**
                 * Required. The resource name of the Finding to be returned. The name follows the format of
                 * 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}/findings/{findingId}'.
                 */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<Finding>;
            /** List Findings under a given ScanRun. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** Required. The filter expression. The expression must be in the format: . Supported field: 'finding_type'. Supported operator: '='. */
                filter?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of Findings to return, can be limited by server. If not specified or not positive, the implementation will select a reasonable value. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results to be returned. This should be a `next_page_token` value returned from a previous List request. If unspecified, the first page of results
                 * is returned.
                 */
                pageToken?:
                    string;
                /** Required. The parent resource name, which should be a scan run resource name in the format 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListFindingsResponse>;
        }
        interface FindingTypeStatsResource {
            /** List all FindingTypeStats under a given ScanRun. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The parent resource name, which should be a scan run resource name in the format 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListFindingTypeStatsResponse>;
        }
        interface ScanRunsResource {
            /** Gets a ScanRun. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanRun to be returned. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ScanRun>;
            /** Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of ScanRuns to return, can be limited by server. If not specified or not positive, the implementation will select a reasonable value. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results to be returned. This should be a `next_page_token` value returned from a previous List request. If unspecified, the first page of results
                 * is returned.
                 */
                pageToken?:
                    string;
                /** Required. The parent resource name, which should be a scan resource name in the format 'projects/{projectId}/scanConfigs/{scanConfigId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListScanRunsResponse>;
            /** Stops a ScanRun. The stopped ScanRun is returned. */
            stop(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanRun to be stopped. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    StopScanRunRequest;
            }): Request<ScanRun>;
            stop(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanRun to be stopped. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: StopScanRunRequest): Request<ScanRun>;
            crawledUrls:
                CrawledUrlsResource;
            findings:
                FindingsResource;
            findingTypeStats:
                FindingTypeStatsResource;
        }
        interface ScanConfigsResource {
            /** Creates a new ScanConfig. */
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The parent resource name where the scan is created, which should be a project resource name in the format 'projects/{projectId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ScanConfig;
            }): Request<ScanConfig>;
            create(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Required. The parent resource name where the scan is created, which should be a project resource name in the format 'projects/{projectId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ScanConfig): Request<ScanConfig>;
            /** Deletes an existing ScanConfig and its child resources. */
            delete(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanConfig to be deleted. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<{}>;
            /** Gets a ScanConfig. */
            get(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanConfig to be returned. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ScanConfig>;
            /** Lists ScanConfigs under a given project. */
            list(request?: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** The maximum number of ScanConfigs to return, can be limited by server. If not specified or not positive, the implementation will select a reasonable value. */
                pageSize?:
                    number;
                /**
                 * A token identifying a page of results to be returned. This should be a `next_page_token` value returned from a previous List request. If unspecified, the first page of results
                 * is returned.
                 */
                pageToken?:
                    string;
                /** Required. The parent resource name, which should be a project resource name in the format 'projects/{projectId}'. */
                parent:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            }): Request<ListScanConfigsResponse>;
            /** Updates a ScanConfig. This method support partial update of a ScanConfig. */
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    ScanConfig;
            }): Request<ScanConfig>;
            patch(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** The resource name of the ScanConfig. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. The ScanConfig IDs are generated by the system. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Required. The update mask applies to the resource. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask */
                updateMask?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: ScanConfig): Request<ScanConfig>;
            /** Start a ScanRun according to the given ScanConfig. */
            start(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanConfig to be used. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
                /** Request body */
                resource:
                    StartScanRunRequest;
            }): Request<ScanRun>;
            start(request: {
                /** V1 error format. */
                "$.xgafv"?:
                    string;
                /** OAuth access token. */
                access_token?:
                    string;
                /** Data format for response. */
                alt?:
                    string;
                /** JSONP */
                callback?:
                    string;
                /** Selector specifying which fields to include in a partial response. */
                fields?:
                    string;
                /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
                key?:
                    string;
                /** Required. The resource name of the ScanConfig to be used. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}'. */
                name:
                    string;
                /** OAuth 2.0 token for the current user. */
                oauth_token?:
                    string;
                /** Returns response with indentations and line breaks. */
                prettyPrint?:
                    boolean;
                /** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */
                quotaUser?:
                    string;
                /** Upload protocol for media (e.g. "raw", "multipart"). */
                upload_protocol?:
                    string;
                /** Legacy upload protocol for media (e.g. "media", "multipart"). */
                uploadType?:
                    string;
            },
            body: StartScanRunRequest): Request<ScanRun>;
            scanRuns:
                ScanRunsResource;
        }
        interface ProjectsResource {
            scanConfigs:
                ScanConfigsResource;
        }

        const projects: ProjectsResource;
    }
}
